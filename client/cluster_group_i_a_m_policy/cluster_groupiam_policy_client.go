// Code generated by go-swagger; DO NOT EDIT.

package cluster_group_i_a_m_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cluster group i a m policy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cluster group i a m policy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ClusterGroupIAMPolicyGet(params *ClusterGroupIAMPolicyGetParams, opts ...ClientOption) (*ClusterGroupIAMPolicyGetOK, error)

	ClusterGroupIAMPolicyPatch(params *ClusterGroupIAMPolicyPatchParams, opts ...ClientOption) (*ClusterGroupIAMPolicyPatchOK, error)

	ClusterGroupIAMPolicyTestPermissions(params *ClusterGroupIAMPolicyTestPermissionsParams, opts ...ClientOption) (*ClusterGroupIAMPolicyTestPermissionsOK, error)

	ClusterGroupIAMPolicyUpdate(params *ClusterGroupIAMPolicyUpdateParams, opts ...ClientOption) (*ClusterGroupIAMPolicyUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ClusterGroupIAMPolicyGet gets policy for a cluster group
*/
func (a *Client) ClusterGroupIAMPolicyGet(params *ClusterGroupIAMPolicyGetParams, opts ...ClientOption) (*ClusterGroupIAMPolicyGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterGroupIAMPolicyGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterGroupIAMPolicy_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clustergroups:iam/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ClusterGroupIAMPolicyGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterGroupIAMPolicyGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterGroupIAMPolicyGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ClusterGroupIAMPolicyPatch patches a cluster group policy
*/
func (a *Client) ClusterGroupIAMPolicyPatch(params *ClusterGroupIAMPolicyPatchParams, opts ...ClientOption) (*ClusterGroupIAMPolicyPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterGroupIAMPolicyPatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterGroupIAMPolicy_Patch",
		Method:             "PATCH",
		PathPattern:        "/v1alpha1/clustergroups:iam/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ClusterGroupIAMPolicyPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterGroupIAMPolicyPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterGroupIAMPolicyPatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ClusterGroupIAMPolicyTestPermissions tests permissions for a cluster group
*/
func (a *Client) ClusterGroupIAMPolicyTestPermissions(params *ClusterGroupIAMPolicyTestPermissionsParams, opts ...ClientOption) (*ClusterGroupIAMPolicyTestPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterGroupIAMPolicyTestPermissionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterGroupIAMPolicy_TestPermissions",
		Method:             "POST",
		PathPattern:        "/v1alpha1/clustergroups:iam/{fullName.name}/testPermissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ClusterGroupIAMPolicyTestPermissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterGroupIAMPolicyTestPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterGroupIAMPolicyTestPermissionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ClusterGroupIAMPolicyUpdate updates overwrite policy for a cluster group deleted if body is empty
*/
func (a *Client) ClusterGroupIAMPolicyUpdate(params *ClusterGroupIAMPolicyUpdateParams, opts ...ClientOption) (*ClusterGroupIAMPolicyUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterGroupIAMPolicyUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterGroupIAMPolicy_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/clustergroups:iam/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ClusterGroupIAMPolicyUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterGroupIAMPolicyUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterGroupIAMPolicyUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
