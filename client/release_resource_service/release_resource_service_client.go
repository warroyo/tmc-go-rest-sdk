// Code generated by go-swagger; DO NOT EDIT.

package release_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new release resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for release resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ReleaseResourceServiceCreate(params *ReleaseResourceServiceCreateParams, opts ...ClientOption) (*ReleaseResourceServiceCreateOK, error)

	ReleaseResourceServiceDelete(params *ReleaseResourceServiceDeleteParams, opts ...ClientOption) (*ReleaseResourceServiceDeleteOK, error)

	ReleaseResourceServiceGet(params *ReleaseResourceServiceGetParams, opts ...ClientOption) (*ReleaseResourceServiceGetOK, error)

	ReleaseResourceServiceList(params *ReleaseResourceServiceListParams, opts ...ClientOption) (*ReleaseResourceServiceListOK, error)

	ReleaseResourceServiceUpdate(params *ReleaseResourceServiceUpdateParams, opts ...ClientOption) (*ReleaseResourceServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ReleaseResourceServiceCreate creates a release
*/
func (a *Client) ReleaseResourceServiceCreate(params *ReleaseResourceServiceCreateParams, opts ...ClientOption) (*ReleaseResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReleaseResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReleaseResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/clusters/{release.fullName.clusterName}/namespaces/{release.fullName.namespaceName}/fluxcd/helm/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReleaseResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReleaseResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReleaseResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReleaseResourceServiceDelete deletes a release
*/
func (a *Client) ReleaseResourceServiceDelete(params *ReleaseResourceServiceDeleteParams, opts ...ClientOption) (*ReleaseResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReleaseResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReleaseResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/namespaces/{fullName.namespaceName}/fluxcd/helm/releases/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReleaseResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReleaseResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReleaseResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReleaseResourceServiceGet gets a release
*/
func (a *Client) ReleaseResourceServiceGet(params *ReleaseResourceServiceGetParams, opts ...ClientOption) (*ReleaseResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReleaseResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReleaseResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/namespaces/{fullName.namespaceName}/fluxcd/helm/releases/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReleaseResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReleaseResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReleaseResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReleaseResourceServiceList lists releases
*/
func (a *Client) ReleaseResourceServiceList(params *ReleaseResourceServiceListParams, opts ...ClientOption) (*ReleaseResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReleaseResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReleaseResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clusters/{searchScope.clusterName}/namespaces/{searchScope.namespaceName}/fluxcd/helm/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReleaseResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReleaseResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReleaseResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ReleaseResourceServiceUpdate updates overwrite a release
*/
func (a *Client) ReleaseResourceServiceUpdate(params *ReleaseResourceServiceUpdateParams, opts ...ClientOption) (*ReleaseResourceServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReleaseResourceServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReleaseResourceService_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/clusters/{release.fullName.clusterName}/namespaces/{release.fullName.namespaceName}/fluxcd/helm/releases/{release.fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReleaseResourceServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReleaseResourceServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReleaseResourceServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
