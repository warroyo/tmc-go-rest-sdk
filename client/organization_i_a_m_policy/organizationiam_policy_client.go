// Code generated by go-swagger; DO NOT EDIT.

package organization_i_a_m_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new organization i a m policy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for organization i a m policy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	OrganizationIAMPolicyGet(params *OrganizationIAMPolicyGetParams, opts ...ClientOption) (*OrganizationIAMPolicyGetOK, error)

	OrganizationIAMPolicyPatch(params *OrganizationIAMPolicyPatchParams, opts ...ClientOption) (*OrganizationIAMPolicyPatchOK, error)

	OrganizationIAMPolicyTestPermissions(params *OrganizationIAMPolicyTestPermissionsParams, opts ...ClientOption) (*OrganizationIAMPolicyTestPermissionsOK, error)

	OrganizationIAMPolicyUpdate(params *OrganizationIAMPolicyUpdateParams, opts ...ClientOption) (*OrganizationIAMPolicyUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
OrganizationIAMPolicyGet gets policy for organization
*/
func (a *Client) OrganizationIAMPolicyGet(params *OrganizationIAMPolicyGetParams, opts ...ClientOption) (*OrganizationIAMPolicyGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationIAMPolicyGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OrganizationIAMPolicy_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/organization:iam",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrganizationIAMPolicyGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationIAMPolicyGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrganizationIAMPolicyGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OrganizationIAMPolicyPatch patches policy for organization
*/
func (a *Client) OrganizationIAMPolicyPatch(params *OrganizationIAMPolicyPatchParams, opts ...ClientOption) (*OrganizationIAMPolicyPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationIAMPolicyPatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OrganizationIAMPolicy_Patch",
		Method:             "PATCH",
		PathPattern:        "/v1alpha1/organization:iam",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrganizationIAMPolicyPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationIAMPolicyPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrganizationIAMPolicyPatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OrganizationIAMPolicyTestPermissions tests permissions for organization
*/
func (a *Client) OrganizationIAMPolicyTestPermissions(params *OrganizationIAMPolicyTestPermissionsParams, opts ...ClientOption) (*OrganizationIAMPolicyTestPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationIAMPolicyTestPermissionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OrganizationIAMPolicy_TestPermissions",
		Method:             "POST",
		PathPattern:        "/v1alpha1/organization:iam/testPermissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrganizationIAMPolicyTestPermissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationIAMPolicyTestPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrganizationIAMPolicyTestPermissionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OrganizationIAMPolicyUpdate updates overwrite policy for organization deletes if body is empty
*/
func (a *Client) OrganizationIAMPolicyUpdate(params *OrganizationIAMPolicyUpdateParams, opts ...ClientOption) (*OrganizationIAMPolicyUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrganizationIAMPolicyUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "OrganizationIAMPolicy_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/organization:iam",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OrganizationIAMPolicyUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrganizationIAMPolicyUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrganizationIAMPolicyUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
