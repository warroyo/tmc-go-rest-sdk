// Code generated by go-swagger; DO NOT EDIT.

package cluster_group_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cluster group resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cluster group resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ClusterGroupResourceServiceCreate(params *ClusterGroupResourceServiceCreateParams, opts ...ClientOption) (*ClusterGroupResourceServiceCreateOK, error)

	ClusterGroupResourceServiceDelete(params *ClusterGroupResourceServiceDeleteParams, opts ...ClientOption) (*ClusterGroupResourceServiceDeleteOK, error)

	ClusterGroupResourceServiceGet(params *ClusterGroupResourceServiceGetParams, opts ...ClientOption) (*ClusterGroupResourceServiceGetOK, error)

	ClusterGroupResourceServiceList(params *ClusterGroupResourceServiceListParams, opts ...ClientOption) (*ClusterGroupResourceServiceListOK, error)

	ClusterGroupResourceServicePatch(params *ClusterGroupResourceServicePatchParams, opts ...ClientOption) (*ClusterGroupResourceServicePatchOK, error)

	ClusterGroupResourceServiceUpdate(params *ClusterGroupResourceServiceUpdateParams, opts ...ClientOption) (*ClusterGroupResourceServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ClusterGroupResourceServiceCreate creates a cluster group
*/
func (a *Client) ClusterGroupResourceServiceCreate(params *ClusterGroupResourceServiceCreateParams, opts ...ClientOption) (*ClusterGroupResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterGroupResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterGroupResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/clustergroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ClusterGroupResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterGroupResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterGroupResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ClusterGroupResourceServiceDelete deletes a cluster group
*/
func (a *Client) ClusterGroupResourceServiceDelete(params *ClusterGroupResourceServiceDeleteParams, opts ...ClientOption) (*ClusterGroupResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterGroupResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterGroupResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/clustergroups/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ClusterGroupResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterGroupResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterGroupResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ClusterGroupResourceServiceGet gets a cluster group
*/
func (a *Client) ClusterGroupResourceServiceGet(params *ClusterGroupResourceServiceGetParams, opts ...ClientOption) (*ClusterGroupResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterGroupResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterGroupResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clustergroups/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ClusterGroupResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterGroupResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterGroupResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ClusterGroupResourceServiceList lists cluster groups
*/
func (a *Client) ClusterGroupResourceServiceList(params *ClusterGroupResourceServiceListParams, opts ...ClientOption) (*ClusterGroupResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterGroupResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterGroupResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clustergroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ClusterGroupResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterGroupResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterGroupResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ClusterGroupResourceServicePatch patches partially update a cluster group
*/
func (a *Client) ClusterGroupResourceServicePatch(params *ClusterGroupResourceServicePatchParams, opts ...ClientOption) (*ClusterGroupResourceServicePatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterGroupResourceServicePatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterGroupResourceService_Patch",
		Method:             "PATCH",
		PathPattern:        "/v1alpha1/clustergroups/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ClusterGroupResourceServicePatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterGroupResourceServicePatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterGroupResourceServicePatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ClusterGroupResourceServiceUpdate updates overwrite a cluster group
*/
func (a *Client) ClusterGroupResourceServiceUpdate(params *ClusterGroupResourceServiceUpdateParams, opts ...ClientOption) (*ClusterGroupResourceServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterGroupResourceServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterGroupResourceService_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/clustergroups/{clusterGroup.fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ClusterGroupResourceServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterGroupResourceServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterGroupResourceServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
