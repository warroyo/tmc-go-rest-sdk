// Code generated by go-swagger; DO NOT EDIT.

package scan_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new scan resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for scan resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ScanResourceServiceCreate(params *ScanResourceServiceCreateParams, opts ...ClientOption) (*ScanResourceServiceCreateOK, error)

	ScanResourceServiceDelete(params *ScanResourceServiceDeleteParams, opts ...ClientOption) (*ScanResourceServiceDeleteOK, error)

	ScanResourceServiceGet(params *ScanResourceServiceGetParams, opts ...ClientOption) (*ScanResourceServiceGetOK, error)

	ScanResourceServiceList(params *ScanResourceServiceListParams, opts ...ClientOption) (*ScanResourceServiceListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ScanResourceServiceCreate creates a scan
*/
func (a *Client) ScanResourceServiceCreate(params *ScanResourceServiceCreateParams, opts ...ClientOption) (*ScanResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScanResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ScanResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/clusters/{scan.fullName.clusterName}/inspection/scans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ScanResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScanResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScanResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ScanResourceServiceDelete deletes a scan
*/
func (a *Client) ScanResourceServiceDelete(params *ScanResourceServiceDeleteParams, opts ...ClientOption) (*ScanResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScanResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ScanResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/inspection/scans/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ScanResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScanResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScanResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ScanResourceServiceGet gets a scan
*/
func (a *Client) ScanResourceServiceGet(params *ScanResourceServiceGetParams, opts ...ClientOption) (*ScanResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScanResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ScanResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/inspection/scans/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ScanResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScanResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScanResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ScanResourceServiceList lists scans
*/
func (a *Client) ScanResourceServiceList(params *ScanResourceServiceListParams, opts ...ClientOption) (*ScanResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScanResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ScanResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clusters/{searchScope.clusterName}/inspection/scans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ScanResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScanResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScanResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
