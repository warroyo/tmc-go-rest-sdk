// Code generated by go-swagger; DO NOT EDIT.

package template_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new template resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for template resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	TemplateResourceServiceCreate(params *TemplateResourceServiceCreateParams, opts ...ClientOption) (*TemplateResourceServiceCreateOK, error)

	TemplateResourceServiceDelete(params *TemplateResourceServiceDeleteParams, opts ...ClientOption) (*TemplateResourceServiceDeleteOK, error)

	TemplateResourceServiceGet(params *TemplateResourceServiceGetParams, opts ...ClientOption) (*TemplateResourceServiceGetOK, error)

	TemplateResourceServiceList(params *TemplateResourceServiceListParams, opts ...ClientOption) (*TemplateResourceServiceListOK, error)

	TemplateResourceServiceUpdate(params *TemplateResourceServiceUpdateParams, opts ...ClientOption) (*TemplateResourceServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
TemplateResourceServiceCreate creates a template
*/
func (a *Client) TemplateResourceServiceCreate(params *TemplateResourceServiceCreateParams, opts ...ClientOption) (*TemplateResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplateResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplateResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/policy/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TemplateResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplateResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplateResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TemplateResourceServiceDelete deletes a template
*/
func (a *Client) TemplateResourceServiceDelete(params *TemplateResourceServiceDeleteParams, opts ...ClientOption) (*TemplateResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplateResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplateResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/policy/templates/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TemplateResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplateResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplateResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TemplateResourceServiceGet gets a template
*/
func (a *Client) TemplateResourceServiceGet(params *TemplateResourceServiceGetParams, opts ...ClientOption) (*TemplateResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplateResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplateResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/policy/templates/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TemplateResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplateResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplateResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TemplateResourceServiceList lists templates
*/
func (a *Client) TemplateResourceServiceList(params *TemplateResourceServiceListParams, opts ...ClientOption) (*TemplateResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplateResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplateResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/policy/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TemplateResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplateResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplateResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TemplateResourceServiceUpdate updates overwrite a template
*/
func (a *Client) TemplateResourceServiceUpdate(params *TemplateResourceServiceUpdateParams, opts ...ClientOption) (*TemplateResourceServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTemplateResourceServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TemplateResourceService_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/policy/templates/{template.fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TemplateResourceServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TemplateResourceServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TemplateResourceServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
