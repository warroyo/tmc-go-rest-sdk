// Code generated by go-swagger; DO NOT EDIT.

package backup_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new backup resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for backup resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BackupResourceServiceCreate(params *BackupResourceServiceCreateParams, opts ...ClientOption) (*BackupResourceServiceCreateOK, error)

	BackupResourceServiceDelete(params *BackupResourceServiceDeleteParams, opts ...ClientOption) (*BackupResourceServiceDeleteOK, error)

	BackupResourceServiceGet(params *BackupResourceServiceGetParams, opts ...ClientOption) (*BackupResourceServiceGetOK, error)

	BackupResourceServiceList(params *BackupResourceServiceListParams, opts ...ClientOption) (*BackupResourceServiceListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
BackupResourceServiceCreate creates a backup
*/
func (a *Client) BackupResourceServiceCreate(params *BackupResourceServiceCreateParams, opts ...ClientOption) (*BackupResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BackupResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/clusters/{backup.fullName.clusterName}/dataprotection/backups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BackupResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BackupResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BackupResourceServiceDelete deletes a backup
*/
func (a *Client) BackupResourceServiceDelete(params *BackupResourceServiceDeleteParams, opts ...ClientOption) (*BackupResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BackupResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/dataprotection/backups/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BackupResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BackupResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BackupResourceServiceGet gets a backup
*/
func (a *Client) BackupResourceServiceGet(params *BackupResourceServiceGetParams, opts ...ClientOption) (*BackupResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BackupResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/dataprotection/backups/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BackupResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BackupResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BackupResourceServiceList lists backups
*/
func (a *Client) BackupResourceServiceList(params *BackupResourceServiceListParams, opts ...ClientOption) (*BackupResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBackupResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BackupResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clusters/{searchScope.clusterName}/dataprotection/backups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &BackupResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BackupResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BackupResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
