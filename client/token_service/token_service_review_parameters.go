// Code generated by go-swagger; DO NOT EDIT.

package token_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/warroyo/tmc-go-rest-sdk/models"
)

// NewTokenServiceReviewParams creates a new TokenServiceReviewParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewTokenServiceReviewParams() *TokenServiceReviewParams {
	return &TokenServiceReviewParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewTokenServiceReviewParamsWithTimeout creates a new TokenServiceReviewParams object
// with the ability to set a timeout on a request.
func NewTokenServiceReviewParamsWithTimeout(timeout time.Duration) *TokenServiceReviewParams {
	return &TokenServiceReviewParams{
		timeout: timeout,
	}
}

// NewTokenServiceReviewParamsWithContext creates a new TokenServiceReviewParams object
// with the ability to set a context for a request.
func NewTokenServiceReviewParamsWithContext(ctx context.Context) *TokenServiceReviewParams {
	return &TokenServiceReviewParams{
		Context: ctx,
	}
}

// NewTokenServiceReviewParamsWithHTTPClient creates a new TokenServiceReviewParams object
// with the ability to set a custom HTTPClient for a request.
func NewTokenServiceReviewParamsWithHTTPClient(client *http.Client) *TokenServiceReviewParams {
	return &TokenServiceReviewParams{
		HTTPClient: client,
	}
}

/*
TokenServiceReviewParams contains all the parameters to send to the API endpoint

	for the token service review operation.

	Typically these are written to a http.Request.
*/
type TokenServiceReviewParams struct {

	/* Body.

	   Body is the body of the webhook request.
	*/
	Body *models.ClusterAuthTokenReviewRequestBody

	/* ClusterUID.

	   ClusterUID is the UID for the cluster.
	*/
	ClusterUID string

	/* UserIDAsGroup.

	     UserIDAsGroup flag is used to determine whether to return the user ID as part of group in the response.
	This is needed as pinniped doesn't support UID as part of UserInfo and would allow us to still keep
	track of it by adding it as a part of the group.
	*/
	UserIDAsGroup *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the token service review params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TokenServiceReviewParams) WithDefaults() *TokenServiceReviewParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the token service review params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TokenServiceReviewParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the token service review params
func (o *TokenServiceReviewParams) WithTimeout(timeout time.Duration) *TokenServiceReviewParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the token service review params
func (o *TokenServiceReviewParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the token service review params
func (o *TokenServiceReviewParams) WithContext(ctx context.Context) *TokenServiceReviewParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the token service review params
func (o *TokenServiceReviewParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the token service review params
func (o *TokenServiceReviewParams) WithHTTPClient(client *http.Client) *TokenServiceReviewParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the token service review params
func (o *TokenServiceReviewParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the token service review params
func (o *TokenServiceReviewParams) WithBody(body *models.ClusterAuthTokenReviewRequestBody) *TokenServiceReviewParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the token service review params
func (o *TokenServiceReviewParams) SetBody(body *models.ClusterAuthTokenReviewRequestBody) {
	o.Body = body
}

// WithClusterUID adds the clusterUID to the token service review params
func (o *TokenServiceReviewParams) WithClusterUID(clusterUID string) *TokenServiceReviewParams {
	o.SetClusterUID(clusterUID)
	return o
}

// SetClusterUID adds the clusterUid to the token service review params
func (o *TokenServiceReviewParams) SetClusterUID(clusterUID string) {
	o.ClusterUID = clusterUID
}

// WithUserIDAsGroup adds the userIDAsGroup to the token service review params
func (o *TokenServiceReviewParams) WithUserIDAsGroup(userIDAsGroup *bool) *TokenServiceReviewParams {
	o.SetUserIDAsGroup(userIDAsGroup)
	return o
}

// SetUserIDAsGroup adds the userIdAsGroup to the token service review params
func (o *TokenServiceReviewParams) SetUserIDAsGroup(userIDAsGroup *bool) {
	o.UserIDAsGroup = userIDAsGroup
}

// WriteToRequest writes these params to a swagger request
func (o *TokenServiceReviewParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param clusterUid
	if err := r.SetPathParam("clusterUid", o.ClusterUID); err != nil {
		return err
	}

	if o.UserIDAsGroup != nil {

		// query param userIdAsGroup
		var qrUserIDAsGroup bool

		if o.UserIDAsGroup != nil {
			qrUserIDAsGroup = *o.UserIDAsGroup
		}
		qUserIDAsGroup := swag.FormatBool(qrUserIDAsGroup)
		if qUserIDAsGroup != "" {

			if err := r.SetQueryParam("userIdAsGroup", qUserIDAsGroup); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
