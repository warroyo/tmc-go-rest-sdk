// Code generated by go-swagger; DO NOT EDIT.

package source_secret_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new source secret resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for source secret resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SourceSecretResourceServiceCreate(params *SourceSecretResourceServiceCreateParams, opts ...ClientOption) (*SourceSecretResourceServiceCreateOK, error)

	SourceSecretResourceServiceDelete(params *SourceSecretResourceServiceDeleteParams, opts ...ClientOption) (*SourceSecretResourceServiceDeleteOK, error)

	SourceSecretResourceServiceGet(params *SourceSecretResourceServiceGetParams, opts ...ClientOption) (*SourceSecretResourceServiceGetOK, error)

	SourceSecretResourceServiceList(params *SourceSecretResourceServiceListParams, opts ...ClientOption) (*SourceSecretResourceServiceListOK, error)

	SourceSecretResourceServiceUpdate(params *SourceSecretResourceServiceUpdateParams, opts ...ClientOption) (*SourceSecretResourceServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
SourceSecretResourceServiceCreate creates a source secret
*/
func (a *Client) SourceSecretResourceServiceCreate(params *SourceSecretResourceServiceCreateParams, opts ...ClientOption) (*SourceSecretResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourceSecretResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SourceSecretResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/clusters/{sourceSecret.fullName.clusterName}/fluxcd/sourcesecrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SourceSecretResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourceSecretResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SourceSecretResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SourceSecretResourceServiceDelete deletes a source secret
*/
func (a *Client) SourceSecretResourceServiceDelete(params *SourceSecretResourceServiceDeleteParams, opts ...ClientOption) (*SourceSecretResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourceSecretResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SourceSecretResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/fluxcd/sourcesecrets/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SourceSecretResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourceSecretResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SourceSecretResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SourceSecretResourceServiceGet gets a source secret
*/
func (a *Client) SourceSecretResourceServiceGet(params *SourceSecretResourceServiceGetParams, opts ...ClientOption) (*SourceSecretResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourceSecretResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SourceSecretResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/fluxcd/sourcesecrets/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SourceSecretResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourceSecretResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SourceSecretResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SourceSecretResourceServiceList lists source secrets
*/
func (a *Client) SourceSecretResourceServiceList(params *SourceSecretResourceServiceListParams, opts ...ClientOption) (*SourceSecretResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourceSecretResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SourceSecretResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clusters/{searchScope.clusterName}/fluxcd/sourcesecrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SourceSecretResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourceSecretResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SourceSecretResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SourceSecretResourceServiceUpdate updates overwrite a source secret
*/
func (a *Client) SourceSecretResourceServiceUpdate(params *SourceSecretResourceServiceUpdateParams, opts ...ClientOption) (*SourceSecretResourceServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSourceSecretResourceServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SourceSecretResourceService_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/clusters/{sourceSecret.fullName.clusterName}/fluxcd/sourcesecrets/{sourceSecret.fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SourceSecretResourceServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SourceSecretResourceServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SourceSecretResourceServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
