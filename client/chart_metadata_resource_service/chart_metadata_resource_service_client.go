// Code generated by go-swagger; DO NOT EDIT.

package chart_metadata_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new chart metadata resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for chart metadata resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ChartMetadataResourceServiceGet(params *ChartMetadataResourceServiceGetParams, opts ...ClientOption) (*ChartMetadataResourceServiceGetOK, error)

	ChartMetadataResourceServiceList(params *ChartMetadataResourceServiceListParams, opts ...ClientOption) (*ChartMetadataResourceServiceListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ChartMetadataResourceServiceGet gets a chart metadata
*/
func (a *Client) ChartMetadataResourceServiceGet(params *ChartMetadataResourceServiceGetParams, opts ...ClientOption) (*ChartMetadataResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChartMetadataResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ChartMetadataResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/organization/fluxcd/helm/repositories/{fullName.repositoryName}/chartmetadatas/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChartMetadataResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChartMetadataResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ChartMetadataResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ChartMetadataResourceServiceList lists chart metadatas
*/
func (a *Client) ChartMetadataResourceServiceList(params *ChartMetadataResourceServiceListParams, opts ...ClientOption) (*ChartMetadataResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChartMetadataResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ChartMetadataResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/organization/fluxcd/helm/repositories/{searchScope.repositoryName}/chartmetadatas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChartMetadataResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChartMetadataResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ChartMetadataResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
