// Code generated by go-swagger; DO NOT EDIT.

package namespace_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new namespace resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for namespace resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	NamespaceResourceServiceCreate(params *NamespaceResourceServiceCreateParams, opts ...ClientOption) (*NamespaceResourceServiceCreateOK, error)

	NamespaceResourceServiceDelete(params *NamespaceResourceServiceDeleteParams, opts ...ClientOption) (*NamespaceResourceServiceDeleteOK, error)

	NamespaceResourceServiceGet(params *NamespaceResourceServiceGetParams, opts ...ClientOption) (*NamespaceResourceServiceGetOK, error)

	NamespaceResourceServiceList(params *NamespaceResourceServiceListParams, opts ...ClientOption) (*NamespaceResourceServiceListOK, error)

	NamespaceResourceServiceUpdate(params *NamespaceResourceServiceUpdateParams, opts ...ClientOption) (*NamespaceResourceServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
NamespaceResourceServiceCreate creates a namespace
*/
func (a *Client) NamespaceResourceServiceCreate(params *NamespaceResourceServiceCreateParams, opts ...ClientOption) (*NamespaceResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNamespaceResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NamespaceResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/clusters/{namespace.fullName.clusterName}/namespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NamespaceResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NamespaceResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NamespaceResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NamespaceResourceServiceDelete deletes a namespace
*/
func (a *Client) NamespaceResourceServiceDelete(params *NamespaceResourceServiceDeleteParams, opts ...ClientOption) (*NamespaceResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNamespaceResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NamespaceResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/namespaces/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NamespaceResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NamespaceResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NamespaceResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NamespaceResourceServiceGet gets a namespace
*/
func (a *Client) NamespaceResourceServiceGet(params *NamespaceResourceServiceGetParams, opts ...ClientOption) (*NamespaceResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNamespaceResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NamespaceResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/namespaces/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NamespaceResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NamespaceResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NamespaceResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NamespaceResourceServiceList lists namespaces
*/
func (a *Client) NamespaceResourceServiceList(params *NamespaceResourceServiceListParams, opts ...ClientOption) (*NamespaceResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNamespaceResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NamespaceResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clusters/{searchScope.clusterName}/namespaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NamespaceResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NamespaceResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NamespaceResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NamespaceResourceServiceUpdate updates overwrite a namespace
*/
func (a *Client) NamespaceResourceServiceUpdate(params *NamespaceResourceServiceUpdateParams, opts ...ClientOption) (*NamespaceResourceServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNamespaceResourceServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NamespaceResourceService_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/clusters/{namespace.fullName.clusterName}/namespaces/{namespace.fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NamespaceResourceServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NamespaceResourceServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NamespaceResourceServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
