// Code generated by go-swagger; DO NOT EDIT.

package repository_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new repository resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for repository resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	RepositoryResourceServiceCreate(params *RepositoryResourceServiceCreateParams, opts ...ClientOption) (*RepositoryResourceServiceCreateOK, error)

	RepositoryResourceServiceDelete(params *RepositoryResourceServiceDeleteParams, opts ...ClientOption) (*RepositoryResourceServiceDeleteOK, error)

	RepositoryResourceServiceGet(params *RepositoryResourceServiceGetParams, opts ...ClientOption) (*RepositoryResourceServiceGetOK, error)

	RepositoryResourceServiceList(params *RepositoryResourceServiceListParams, opts ...ClientOption) (*RepositoryResourceServiceListOK, error)

	RepositoryResourceServiceUpdate(params *RepositoryResourceServiceUpdateParams, opts ...ClientOption) (*RepositoryResourceServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
RepositoryResourceServiceCreate creates a repository
*/
func (a *Client) RepositoryResourceServiceCreate(params *RepositoryResourceServiceCreateParams, opts ...ClientOption) (*RepositoryResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepositoryResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RepositoryResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/clusters/{repository.fullName.clusterName}/namespaces/{repository.fullName.namespaceName}/tanzupackage/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepositoryResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepositoryResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RepositoryResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RepositoryResourceServiceDelete deletes a repository
*/
func (a *Client) RepositoryResourceServiceDelete(params *RepositoryResourceServiceDeleteParams, opts ...ClientOption) (*RepositoryResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepositoryResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RepositoryResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/namespaces/{fullName.namespaceName}/tanzupackage/repositories/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepositoryResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepositoryResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RepositoryResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RepositoryResourceServiceGet gets a repository
*/
func (a *Client) RepositoryResourceServiceGet(params *RepositoryResourceServiceGetParams, opts ...ClientOption) (*RepositoryResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepositoryResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RepositoryResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/organization/fluxcd/helm/repositories/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepositoryResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepositoryResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RepositoryResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RepositoryResourceServiceList lists repositories
*/
func (a *Client) RepositoryResourceServiceList(params *RepositoryResourceServiceListParams, opts ...ClientOption) (*RepositoryResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepositoryResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RepositoryResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/organization/fluxcd/helm/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepositoryResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepositoryResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RepositoryResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RepositoryResourceServiceUpdate updates overwrite a repository
*/
func (a *Client) RepositoryResourceServiceUpdate(params *RepositoryResourceServiceUpdateParams, opts ...ClientOption) (*RepositoryResourceServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepositoryResourceServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RepositoryResourceService_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/clusters/{repository.fullName.clusterName}/namespaces/{repository.fullName.namespaceName}/tanzupackage/repositories/{repository.fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepositoryResourceServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RepositoryResourceServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RepositoryResourceServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
