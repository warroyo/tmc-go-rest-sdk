// Code generated by go-swagger; DO NOT EDIT.

package tanzu_kubernetes_cluster_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tanzu kubernetes cluster resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tanzu kubernetes cluster resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	TanzuKubernetesClusterResourceServiceCreate(params *TanzuKubernetesClusterResourceServiceCreateParams, opts ...ClientOption) (*TanzuKubernetesClusterResourceServiceCreateOK, error)

	TanzuKubernetesClusterResourceServiceDelete(params *TanzuKubernetesClusterResourceServiceDeleteParams, opts ...ClientOption) (*TanzuKubernetesClusterResourceServiceDeleteOK, error)

	TanzuKubernetesClusterResourceServiceGet(params *TanzuKubernetesClusterResourceServiceGetParams, opts ...ClientOption) (*TanzuKubernetesClusterResourceServiceGetOK, error)

	TanzuKubernetesClusterResourceServiceList(params *TanzuKubernetesClusterResourceServiceListParams, opts ...ClientOption) (*TanzuKubernetesClusterResourceServiceListOK, error)

	TanzuKubernetesClusterResourceServicePatch(params *TanzuKubernetesClusterResourceServicePatchParams, opts ...ClientOption) (*TanzuKubernetesClusterResourceServicePatchOK, error)

	TanzuKubernetesClusterResourceServiceUpdate(params *TanzuKubernetesClusterResourceServiceUpdateParams, opts ...ClientOption) (*TanzuKubernetesClusterResourceServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
TanzuKubernetesClusterResourceServiceCreate creates a tanzu kubernetes cluster
*/
func (a *Client) TanzuKubernetesClusterResourceServiceCreate(params *TanzuKubernetesClusterResourceServiceCreateParams, opts ...ClientOption) (*TanzuKubernetesClusterResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTanzuKubernetesClusterResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TanzuKubernetesClusterResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/managementclusters/{tanzuKubernetesCluster.fullName.managementClusterName}/provisioners/{tanzuKubernetesCluster.fullName.provisionerName}/tanzukubernetesclusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TanzuKubernetesClusterResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TanzuKubernetesClusterResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TanzuKubernetesClusterResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TanzuKubernetesClusterResourceServiceDelete deletes a tanzu kubernetes cluster
*/
func (a *Client) TanzuKubernetesClusterResourceServiceDelete(params *TanzuKubernetesClusterResourceServiceDeleteParams, opts ...ClientOption) (*TanzuKubernetesClusterResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTanzuKubernetesClusterResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TanzuKubernetesClusterResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/managementclusters/{fullName.managementClusterName}/provisioners/{fullName.provisionerName}/tanzukubernetesclusters/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TanzuKubernetesClusterResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TanzuKubernetesClusterResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TanzuKubernetesClusterResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TanzuKubernetesClusterResourceServiceGet gets a tanzu kubernetes cluster
*/
func (a *Client) TanzuKubernetesClusterResourceServiceGet(params *TanzuKubernetesClusterResourceServiceGetParams, opts ...ClientOption) (*TanzuKubernetesClusterResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTanzuKubernetesClusterResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TanzuKubernetesClusterResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/managementclusters/{fullName.managementClusterName}/provisioners/{fullName.provisionerName}/tanzukubernetesclusters/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TanzuKubernetesClusterResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TanzuKubernetesClusterResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TanzuKubernetesClusterResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TanzuKubernetesClusterResourceServiceList lists tanzu kubernetes clusters
*/
func (a *Client) TanzuKubernetesClusterResourceServiceList(params *TanzuKubernetesClusterResourceServiceListParams, opts ...ClientOption) (*TanzuKubernetesClusterResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTanzuKubernetesClusterResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TanzuKubernetesClusterResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/managementclusters/{searchScope.managementClusterName}/provisioners/{searchScope.provisionerName}/tanzukubernetesclusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TanzuKubernetesClusterResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TanzuKubernetesClusterResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TanzuKubernetesClusterResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TanzuKubernetesClusterResourceServicePatch patches partially update a tanzu kubernetes cluster
*/
func (a *Client) TanzuKubernetesClusterResourceServicePatch(params *TanzuKubernetesClusterResourceServicePatchParams, opts ...ClientOption) (*TanzuKubernetesClusterResourceServicePatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTanzuKubernetesClusterResourceServicePatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TanzuKubernetesClusterResourceService_Patch",
		Method:             "PATCH",
		PathPattern:        "/v1alpha1/managementclusters/{fullName.managementClusterName}/provisioners/{fullName.provisionerName}/tanzukubernetesclusters/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TanzuKubernetesClusterResourceServicePatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TanzuKubernetesClusterResourceServicePatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TanzuKubernetesClusterResourceServicePatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TanzuKubernetesClusterResourceServiceUpdate updates overwrite a tanzu kubernetes cluster
*/
func (a *Client) TanzuKubernetesClusterResourceServiceUpdate(params *TanzuKubernetesClusterResourceServiceUpdateParams, opts ...ClientOption) (*TanzuKubernetesClusterResourceServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTanzuKubernetesClusterResourceServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TanzuKubernetesClusterResourceService_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/managementclusters/{tanzuKubernetesCluster.fullName.managementClusterName}/provisioners/{tanzuKubernetesCluster.fullName.provisionerName}/tanzukubernetesclusters/{tanzuKubernetesCluster.fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TanzuKubernetesClusterResourceServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TanzuKubernetesClusterResourceServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TanzuKubernetesClusterResourceServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
