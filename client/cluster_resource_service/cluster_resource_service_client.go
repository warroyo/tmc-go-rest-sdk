// Code generated by go-swagger; DO NOT EDIT.

package cluster_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cluster resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cluster resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ClusterResourceServiceCreate(params *ClusterResourceServiceCreateParams, opts ...ClientOption) (*ClusterResourceServiceCreateOK, error)

	ClusterResourceServiceDelete(params *ClusterResourceServiceDeleteParams, opts ...ClientOption) (*ClusterResourceServiceDeleteOK, error)

	ClusterResourceServiceGet(params *ClusterResourceServiceGetParams, opts ...ClientOption) (*ClusterResourceServiceGetOK, error)

	ClusterResourceServiceList(params *ClusterResourceServiceListParams, opts ...ClientOption) (*ClusterResourceServiceListOK, error)

	ClusterResourceServicePatch(params *ClusterResourceServicePatchParams, opts ...ClientOption) (*ClusterResourceServicePatchOK, error)

	ClusterResourceServiceUpdate(params *ClusterResourceServiceUpdateParams, opts ...ClientOption) (*ClusterResourceServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ClusterResourceServiceCreate creates a cluster
*/
func (a *Client) ClusterResourceServiceCreate(params *ClusterResourceServiceCreateParams, opts ...ClientOption) (*ClusterResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ClusterResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ClusterResourceServiceDelete deletes a cluster
*/
func (a *Client) ClusterResourceServiceDelete(params *ClusterResourceServiceDeleteParams, opts ...ClientOption) (*ClusterResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/clusters/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ClusterResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ClusterResourceServiceGet gets a cluster
*/
func (a *Client) ClusterResourceServiceGet(params *ClusterResourceServiceGetParams, opts ...ClientOption) (*ClusterResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clusters/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ClusterResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ClusterResourceServiceList lists clusters
*/
func (a *Client) ClusterResourceServiceList(params *ClusterResourceServiceListParams, opts ...ClientOption) (*ClusterResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ClusterResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ClusterResourceServicePatch patches partially update a cluster
*/
func (a *Client) ClusterResourceServicePatch(params *ClusterResourceServicePatchParams, opts ...ClientOption) (*ClusterResourceServicePatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterResourceServicePatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterResourceService_Patch",
		Method:             "PATCH",
		PathPattern:        "/v1alpha1/clusters/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ClusterResourceServicePatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterResourceServicePatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterResourceServicePatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ClusterResourceServiceUpdate updates overwrite a cluster
*/
func (a *Client) ClusterResourceServiceUpdate(params *ClusterResourceServiceUpdateParams, opts ...ClientOption) (*ClusterResourceServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClusterResourceServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ClusterResourceService_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/clusters/{cluster.fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ClusterResourceServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ClusterResourceServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ClusterResourceServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
