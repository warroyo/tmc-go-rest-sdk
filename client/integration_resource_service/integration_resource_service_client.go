// Code generated by go-swagger; DO NOT EDIT.

package integration_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new integration resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for integration resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	IntegrationResourceServiceCreate(params *IntegrationResourceServiceCreateParams, opts ...ClientOption) (*IntegrationResourceServiceCreateOK, error)

	IntegrationResourceServiceDelete(params *IntegrationResourceServiceDeleteParams, opts ...ClientOption) (*IntegrationResourceServiceDeleteOK, error)

	IntegrationResourceServiceGet(params *IntegrationResourceServiceGetParams, opts ...ClientOption) (*IntegrationResourceServiceGetOK, error)

	IntegrationResourceServiceList(params *IntegrationResourceServiceListParams, opts ...ClientOption) (*IntegrationResourceServiceListOK, error)

	IntegrationResourceServicePatch(params *IntegrationResourceServicePatchParams, opts ...ClientOption) (*IntegrationResourceServicePatchOK, error)

	IntegrationResourceServiceUpdate(params *IntegrationResourceServiceUpdateParams, opts ...ClientOption) (*IntegrationResourceServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
IntegrationResourceServiceCreate creates an integration
*/
func (a *Client) IntegrationResourceServiceCreate(params *IntegrationResourceServiceCreateParams, opts ...ClientOption) (*IntegrationResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IntegrationResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/organization/integrations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IntegrationResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IntegrationResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IntegrationResourceServiceDelete deletes an integration
*/
func (a *Client) IntegrationResourceServiceDelete(params *IntegrationResourceServiceDeleteParams, opts ...ClientOption) (*IntegrationResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IntegrationResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/organization/integrations/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IntegrationResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IntegrationResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IntegrationResourceServiceGet gets an integration
*/
func (a *Client) IntegrationResourceServiceGet(params *IntegrationResourceServiceGetParams, opts ...ClientOption) (*IntegrationResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IntegrationResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/organization/integrations/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IntegrationResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IntegrationResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IntegrationResourceServiceList lists integrations
*/
func (a *Client) IntegrationResourceServiceList(params *IntegrationResourceServiceListParams, opts ...ClientOption) (*IntegrationResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IntegrationResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/organization/integrations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IntegrationResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IntegrationResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IntegrationResourceServicePatch patches partially update an integration
*/
func (a *Client) IntegrationResourceServicePatch(params *IntegrationResourceServicePatchParams, opts ...ClientOption) (*IntegrationResourceServicePatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationResourceServicePatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IntegrationResourceService_Patch",
		Method:             "PATCH",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/integrations/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IntegrationResourceServicePatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationResourceServicePatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IntegrationResourceServicePatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IntegrationResourceServiceUpdate updates overwrite an integration
*/
func (a *Client) IntegrationResourceServiceUpdate(params *IntegrationResourceServiceUpdateParams, opts ...ClientOption) (*IntegrationResourceServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIntegrationResourceServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IntegrationResourceService_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/clusters/{integration.fullName.clusterName}/integrations/{integration.fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IntegrationResourceServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IntegrationResourceServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IntegrationResourceServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
