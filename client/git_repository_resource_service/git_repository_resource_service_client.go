// Code generated by go-swagger; DO NOT EDIT.

package git_repository_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new git repository resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for git repository resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GitRepositoryResourceServiceCreate(params *GitRepositoryResourceServiceCreateParams, opts ...ClientOption) (*GitRepositoryResourceServiceCreateOK, error)

	GitRepositoryResourceServiceDelete(params *GitRepositoryResourceServiceDeleteParams, opts ...ClientOption) (*GitRepositoryResourceServiceDeleteOK, error)

	GitRepositoryResourceServiceGet(params *GitRepositoryResourceServiceGetParams, opts ...ClientOption) (*GitRepositoryResourceServiceGetOK, error)

	GitRepositoryResourceServiceList(params *GitRepositoryResourceServiceListParams, opts ...ClientOption) (*GitRepositoryResourceServiceListOK, error)

	GitRepositoryResourceServiceUpdate(params *GitRepositoryResourceServiceUpdateParams, opts ...ClientOption) (*GitRepositoryResourceServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GitRepositoryResourceServiceCreate creates a git repository
*/
func (a *Client) GitRepositoryResourceServiceCreate(params *GitRepositoryResourceServiceCreateParams, opts ...ClientOption) (*GitRepositoryResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGitRepositoryResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GitRepositoryResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/clusters/{gitRepository.fullName.clusterName}/namespaces/{gitRepository.fullName.namespaceName}/fluxcd/gitrepositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GitRepositoryResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GitRepositoryResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GitRepositoryResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GitRepositoryResourceServiceDelete deletes a git repository
*/
func (a *Client) GitRepositoryResourceServiceDelete(params *GitRepositoryResourceServiceDeleteParams, opts ...ClientOption) (*GitRepositoryResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGitRepositoryResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GitRepositoryResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/namespaces/{fullName.namespaceName}/fluxcd/gitrepositories/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GitRepositoryResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GitRepositoryResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GitRepositoryResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GitRepositoryResourceServiceGet gets a git repository
*/
func (a *Client) GitRepositoryResourceServiceGet(params *GitRepositoryResourceServiceGetParams, opts ...ClientOption) (*GitRepositoryResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGitRepositoryResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GitRepositoryResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/namespaces/{fullName.namespaceName}/fluxcd/gitrepositories/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GitRepositoryResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GitRepositoryResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GitRepositoryResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GitRepositoryResourceServiceList lists git repositories
*/
func (a *Client) GitRepositoryResourceServiceList(params *GitRepositoryResourceServiceListParams, opts ...ClientOption) (*GitRepositoryResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGitRepositoryResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GitRepositoryResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clusters/{searchScope.clusterName}/namespaces/{searchScope.namespaceName}/fluxcd/gitrepositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GitRepositoryResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GitRepositoryResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GitRepositoryResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GitRepositoryResourceServiceUpdate updates overwrite a git repository
*/
func (a *Client) GitRepositoryResourceServiceUpdate(params *GitRepositoryResourceServiceUpdateParams, opts ...ClientOption) (*GitRepositoryResourceServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGitRepositoryResourceServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GitRepositoryResourceService_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/clusters/{gitRepository.fullName.clusterName}/namespaces/{gitRepository.fullName.namespaceName}/fluxcd/gitrepositories/{gitRepository.fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GitRepositoryResourceServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GitRepositoryResourceServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GitRepositoryResourceServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
