// Code generated by go-swagger; DO NOT EDIT.

package nodepool_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new nodepool resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for nodepool resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	NodepoolResourceServiceCreate(params *NodepoolResourceServiceCreateParams, opts ...ClientOption) (*NodepoolResourceServiceCreateOK, error)

	NodepoolResourceServiceDelete(params *NodepoolResourceServiceDeleteParams, opts ...ClientOption) (*NodepoolResourceServiceDeleteOK, error)

	NodepoolResourceServiceGet(params *NodepoolResourceServiceGetParams, opts ...ClientOption) (*NodepoolResourceServiceGetOK, error)

	NodepoolResourceServiceList(params *NodepoolResourceServiceListParams, opts ...ClientOption) (*NodepoolResourceServiceListOK, error)

	NodepoolResourceServicePatch(params *NodepoolResourceServicePatchParams, opts ...ClientOption) (*NodepoolResourceServicePatchOK, error)

	NodepoolResourceServiceUpdate(params *NodepoolResourceServiceUpdateParams, opts ...ClientOption) (*NodepoolResourceServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
NodepoolResourceServiceCreate creates a nodepool
*/
func (a *Client) NodepoolResourceServiceCreate(params *NodepoolResourceServiceCreateParams, opts ...ClientOption) (*NodepoolResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodepoolResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NodepoolResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/managementclusters/{nodepool.fullName.managementClusterName}/provisioners/{nodepool.fullName.provisionerName}/tanzukubernetesclusters/{nodepool.fullName.tanzuKubernetesClusterName}/nodepools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodepoolResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodepoolResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodepoolResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NodepoolResourceServiceDelete deletes a nodepool
*/
func (a *Client) NodepoolResourceServiceDelete(params *NodepoolResourceServiceDeleteParams, opts ...ClientOption) (*NodepoolResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodepoolResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NodepoolResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/managementclusters/{fullName.managementClusterName}/provisioners/{fullName.provisionerName}/tanzukubernetesclusters/{fullName.tanzuKubernetesClusterName}/nodepools/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodepoolResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodepoolResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodepoolResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NodepoolResourceServiceGet gets a nodepool
*/
func (a *Client) NodepoolResourceServiceGet(params *NodepoolResourceServiceGetParams, opts ...ClientOption) (*NodepoolResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodepoolResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NodepoolResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/managementclusters/{fullName.managementClusterName}/provisioners/{fullName.provisionerName}/tanzukubernetesclusters/{fullName.tanzuKubernetesClusterName}/nodepools/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodepoolResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodepoolResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodepoolResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NodepoolResourceServiceList lists nodepools
*/
func (a *Client) NodepoolResourceServiceList(params *NodepoolResourceServiceListParams, opts ...ClientOption) (*NodepoolResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodepoolResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NodepoolResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/managementclusters/{searchScope.managementClusterName}/provisioners/{searchScope.provisionerName}/tanzukubernetesclusters/{searchScope.tanzuKubernetesClusterName}/nodepools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodepoolResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodepoolResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodepoolResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NodepoolResourceServicePatch patches partially update a nodepool
*/
func (a *Client) NodepoolResourceServicePatch(params *NodepoolResourceServicePatchParams, opts ...ClientOption) (*NodepoolResourceServicePatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodepoolResourceServicePatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NodepoolResourceService_Patch",
		Method:             "PATCH",
		PathPattern:        "/v1alpha1/managementclusters/{fullName.managementClusterName}/provisioners/{fullName.provisionerName}/tanzukubernetesclusters/{fullName.tanzuKubernetesClusterName}/nodepools/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodepoolResourceServicePatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodepoolResourceServicePatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodepoolResourceServicePatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NodepoolResourceServiceUpdate updates overwrite a nodepool
*/
func (a *Client) NodepoolResourceServiceUpdate(params *NodepoolResourceServiceUpdateParams, opts ...ClientOption) (*NodepoolResourceServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNodepoolResourceServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NodepoolResourceService_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/managementclusters/{nodepool.fullName.managementClusterName}/provisioners/{nodepool.fullName.provisionerName}/tanzukubernetesclusters/{nodepool.fullName.tanzuKubernetesClusterName}/nodepools/{nodepool.fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NodepoolResourceServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NodepoolResourceServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NodepoolResourceServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
