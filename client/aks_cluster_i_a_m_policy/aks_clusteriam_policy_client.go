// Code generated by go-swagger; DO NOT EDIT.

package aks_cluster_i_a_m_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new aks cluster i a m policy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for aks cluster i a m policy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AksClusterIAMPolicyGet(params *AksClusterIAMPolicyGetParams, opts ...ClientOption) (*AksClusterIAMPolicyGetOK, error)

	AksClusterIAMPolicyPatch(params *AksClusterIAMPolicyPatchParams, opts ...ClientOption) (*AksClusterIAMPolicyPatchOK, error)

	AksClusterIAMPolicyTestPermissions(params *AksClusterIAMPolicyTestPermissionsParams, opts ...ClientOption) (*AksClusterIAMPolicyTestPermissionsOK, error)

	AksClusterIAMPolicyUpdate(params *AksClusterIAMPolicyUpdateParams, opts ...ClientOption) (*AksClusterIAMPolicyUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AksClusterIAMPolicyGet gets policy for a aks cluster
*/
func (a *Client) AksClusterIAMPolicyGet(params *AksClusterIAMPolicyGetParams, opts ...ClientOption) (*AksClusterIAMPolicyGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAksClusterIAMPolicyGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AksClusterIAMPolicy_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/aksclusters:iam/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AksClusterIAMPolicyGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AksClusterIAMPolicyGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AksClusterIAMPolicyGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AksClusterIAMPolicyPatch patches an aks cluster policy
*/
func (a *Client) AksClusterIAMPolicyPatch(params *AksClusterIAMPolicyPatchParams, opts ...ClientOption) (*AksClusterIAMPolicyPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAksClusterIAMPolicyPatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AksClusterIAMPolicy_Patch",
		Method:             "PATCH",
		PathPattern:        "/v1alpha1/aksclusters:iam/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AksClusterIAMPolicyPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AksClusterIAMPolicyPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AksClusterIAMPolicyPatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AksClusterIAMPolicyTestPermissions tests permissions for a aks cluster
*/
func (a *Client) AksClusterIAMPolicyTestPermissions(params *AksClusterIAMPolicyTestPermissionsParams, opts ...ClientOption) (*AksClusterIAMPolicyTestPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAksClusterIAMPolicyTestPermissionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AksClusterIAMPolicy_TestPermissions",
		Method:             "POST",
		PathPattern:        "/v1alpha1/aksclusters:iam/{fullName.name}/testPermissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AksClusterIAMPolicyTestPermissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AksClusterIAMPolicyTestPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AksClusterIAMPolicyTestPermissionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AksClusterIAMPolicyUpdate updates overwrite policy for an aks cluster deleted if body is empty
*/
func (a *Client) AksClusterIAMPolicyUpdate(params *AksClusterIAMPolicyUpdateParams, opts ...ClientOption) (*AksClusterIAMPolicyUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAksClusterIAMPolicyUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AksClusterIAMPolicy_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/aksclusters:iam/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AksClusterIAMPolicyUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AksClusterIAMPolicyUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AksClusterIAMPolicyUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
