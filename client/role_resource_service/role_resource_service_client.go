// Code generated by go-swagger; DO NOT EDIT.

package role_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new role resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for role resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	RoleResourceServiceCreate(params *RoleResourceServiceCreateParams, opts ...ClientOption) (*RoleResourceServiceCreateOK, error)

	RoleResourceServiceDelete(params *RoleResourceServiceDeleteParams, opts ...ClientOption) (*RoleResourceServiceDeleteOK, error)

	RoleResourceServiceGet(params *RoleResourceServiceGetParams, opts ...ClientOption) (*RoleResourceServiceGetOK, error)

	RoleResourceServiceList(params *RoleResourceServiceListParams, opts ...ClientOption) (*RoleResourceServiceListOK, error)

	RoleResourceServicePatch(params *RoleResourceServicePatchParams, opts ...ClientOption) (*RoleResourceServicePatchOK, error)

	RoleResourceServiceUpdate(params *RoleResourceServiceUpdateParams, opts ...ClientOption) (*RoleResourceServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
RoleResourceServiceCreate creates a role
*/
func (a *Client) RoleResourceServiceCreate(params *RoleResourceServiceCreateParams, opts ...ClientOption) (*RoleResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoleResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RoleResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/iam/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RoleResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoleResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RoleResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RoleResourceServiceDelete deletes a role
*/
func (a *Client) RoleResourceServiceDelete(params *RoleResourceServiceDeleteParams, opts ...ClientOption) (*RoleResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoleResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RoleResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/iam/roles/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RoleResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoleResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RoleResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RoleResourceServiceGet gets a role
*/
func (a *Client) RoleResourceServiceGet(params *RoleResourceServiceGetParams, opts ...ClientOption) (*RoleResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoleResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RoleResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/iam/roles/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RoleResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoleResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RoleResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RoleResourceServiceList lists roles
*/
func (a *Client) RoleResourceServiceList(params *RoleResourceServiceListParams, opts ...ClientOption) (*RoleResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoleResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RoleResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/iam/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RoleResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoleResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RoleResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RoleResourceServicePatch patches partially update a role
*/
func (a *Client) RoleResourceServicePatch(params *RoleResourceServicePatchParams, opts ...ClientOption) (*RoleResourceServicePatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoleResourceServicePatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RoleResourceService_Patch",
		Method:             "PATCH",
		PathPattern:        "/v1alpha1/iam/roles/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RoleResourceServicePatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoleResourceServicePatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RoleResourceServicePatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RoleResourceServiceUpdate updates overwrite a role
*/
func (a *Client) RoleResourceServiceUpdate(params *RoleResourceServiceUpdateParams, opts ...ClientOption) (*RoleResourceServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoleResourceServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RoleResourceService_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/iam/roles/{role.fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RoleResourceServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoleResourceServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RoleResourceServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
