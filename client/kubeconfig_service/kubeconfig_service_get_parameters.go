// Code generated by go-swagger; DO NOT EDIT.

package kubeconfig_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewKubeconfigServiceGetParams creates a new KubeconfigServiceGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewKubeconfigServiceGetParams() *KubeconfigServiceGetParams {
	return &KubeconfigServiceGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewKubeconfigServiceGetParamsWithTimeout creates a new KubeconfigServiceGetParams object
// with the ability to set a timeout on a request.
func NewKubeconfigServiceGetParamsWithTimeout(timeout time.Duration) *KubeconfigServiceGetParams {
	return &KubeconfigServiceGetParams{
		timeout: timeout,
	}
}

// NewKubeconfigServiceGetParamsWithContext creates a new KubeconfigServiceGetParams object
// with the ability to set a context for a request.
func NewKubeconfigServiceGetParamsWithContext(ctx context.Context) *KubeconfigServiceGetParams {
	return &KubeconfigServiceGetParams{
		Context: ctx,
	}
}

// NewKubeconfigServiceGetParamsWithHTTPClient creates a new KubeconfigServiceGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewKubeconfigServiceGetParamsWithHTTPClient(client *http.Client) *KubeconfigServiceGetParams {
	return &KubeconfigServiceGetParams{
		HTTPClient: client,
	}
}

/*
KubeconfigServiceGetParams contains all the parameters to send to the API endpoint

	for the kubeconfig service get operation.

	Typically these are written to a http.Request.
*/
type KubeconfigServiceGetParams struct {

	/* Cli.

	    CliType will help identify the appropriate kubeconfig to be returned for CLI application.

	- TMC_CLI: TMC_CLI platform.
	- TANZU_CLI: TANZU_CLI platform.

	    Default: "TMC_CLI"
	*/
	Cli *string

	/* FullNameManagementClusterName.

	   Name of the management cluster.
	*/
	FullNameManagementClusterName *string

	/* FullNameName.

	   Name of this cluster.
	*/
	FullNameName string

	/* FullNameOrgID.

	   ID of Organization.
	*/
	FullNameOrgID *string

	/* FullNameProvisionerName.

	   Provisioner of the cluster.
	*/
	FullNameProvisionerName *string

	/* Namespace.

	     Namespace option to get kubeconfig for a specific namespace. It is optional. If not specified, the cluster
	kubeconfig will be returned. Specifying a namespace is mainly for application developers who have access to a
	workspace and certain namespaces in a cluster to get a kubeconfig to access that cluster.
	*/
	Namespace *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the kubeconfig service get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *KubeconfigServiceGetParams) WithDefaults() *KubeconfigServiceGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the kubeconfig service get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *KubeconfigServiceGetParams) SetDefaults() {
	var (
		cliDefault = string("TMC_CLI")
	)

	val := KubeconfigServiceGetParams{
		Cli: &cliDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the kubeconfig service get params
func (o *KubeconfigServiceGetParams) WithTimeout(timeout time.Duration) *KubeconfigServiceGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the kubeconfig service get params
func (o *KubeconfigServiceGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the kubeconfig service get params
func (o *KubeconfigServiceGetParams) WithContext(ctx context.Context) *KubeconfigServiceGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the kubeconfig service get params
func (o *KubeconfigServiceGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the kubeconfig service get params
func (o *KubeconfigServiceGetParams) WithHTTPClient(client *http.Client) *KubeconfigServiceGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the kubeconfig service get params
func (o *KubeconfigServiceGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCli adds the cli to the kubeconfig service get params
func (o *KubeconfigServiceGetParams) WithCli(cli *string) *KubeconfigServiceGetParams {
	o.SetCli(cli)
	return o
}

// SetCli adds the cli to the kubeconfig service get params
func (o *KubeconfigServiceGetParams) SetCli(cli *string) {
	o.Cli = cli
}

// WithFullNameManagementClusterName adds the fullNameManagementClusterName to the kubeconfig service get params
func (o *KubeconfigServiceGetParams) WithFullNameManagementClusterName(fullNameManagementClusterName *string) *KubeconfigServiceGetParams {
	o.SetFullNameManagementClusterName(fullNameManagementClusterName)
	return o
}

// SetFullNameManagementClusterName adds the fullNameManagementClusterName to the kubeconfig service get params
func (o *KubeconfigServiceGetParams) SetFullNameManagementClusterName(fullNameManagementClusterName *string) {
	o.FullNameManagementClusterName = fullNameManagementClusterName
}

// WithFullNameName adds the fullNameName to the kubeconfig service get params
func (o *KubeconfigServiceGetParams) WithFullNameName(fullNameName string) *KubeconfigServiceGetParams {
	o.SetFullNameName(fullNameName)
	return o
}

// SetFullNameName adds the fullNameName to the kubeconfig service get params
func (o *KubeconfigServiceGetParams) SetFullNameName(fullNameName string) {
	o.FullNameName = fullNameName
}

// WithFullNameOrgID adds the fullNameOrgID to the kubeconfig service get params
func (o *KubeconfigServiceGetParams) WithFullNameOrgID(fullNameOrgID *string) *KubeconfigServiceGetParams {
	o.SetFullNameOrgID(fullNameOrgID)
	return o
}

// SetFullNameOrgID adds the fullNameOrgId to the kubeconfig service get params
func (o *KubeconfigServiceGetParams) SetFullNameOrgID(fullNameOrgID *string) {
	o.FullNameOrgID = fullNameOrgID
}

// WithFullNameProvisionerName adds the fullNameProvisionerName to the kubeconfig service get params
func (o *KubeconfigServiceGetParams) WithFullNameProvisionerName(fullNameProvisionerName *string) *KubeconfigServiceGetParams {
	o.SetFullNameProvisionerName(fullNameProvisionerName)
	return o
}

// SetFullNameProvisionerName adds the fullNameProvisionerName to the kubeconfig service get params
func (o *KubeconfigServiceGetParams) SetFullNameProvisionerName(fullNameProvisionerName *string) {
	o.FullNameProvisionerName = fullNameProvisionerName
}

// WithNamespace adds the namespace to the kubeconfig service get params
func (o *KubeconfigServiceGetParams) WithNamespace(namespace *string) *KubeconfigServiceGetParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the kubeconfig service get params
func (o *KubeconfigServiceGetParams) SetNamespace(namespace *string) {
	o.Namespace = namespace
}

// WriteToRequest writes these params to a swagger request
func (o *KubeconfigServiceGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cli != nil {

		// query param cli
		var qrCli string

		if o.Cli != nil {
			qrCli = *o.Cli
		}
		qCli := qrCli
		if qCli != "" {

			if err := r.SetQueryParam("cli", qCli); err != nil {
				return err
			}
		}
	}

	if o.FullNameManagementClusterName != nil {

		// query param fullName.managementClusterName
		var qrFullNameManagementClusterName string

		if o.FullNameManagementClusterName != nil {
			qrFullNameManagementClusterName = *o.FullNameManagementClusterName
		}
		qFullNameManagementClusterName := qrFullNameManagementClusterName
		if qFullNameManagementClusterName != "" {

			if err := r.SetQueryParam("fullName.managementClusterName", qFullNameManagementClusterName); err != nil {
				return err
			}
		}
	}

	// path param fullName.name
	if err := r.SetPathParam("fullName.name", o.FullNameName); err != nil {
		return err
	}

	if o.FullNameOrgID != nil {

		// query param fullName.orgId
		var qrFullNameOrgID string

		if o.FullNameOrgID != nil {
			qrFullNameOrgID = *o.FullNameOrgID
		}
		qFullNameOrgID := qrFullNameOrgID
		if qFullNameOrgID != "" {

			if err := r.SetQueryParam("fullName.orgId", qFullNameOrgID); err != nil {
				return err
			}
		}
	}

	if o.FullNameProvisionerName != nil {

		// query param fullName.provisionerName
		var qrFullNameProvisionerName string

		if o.FullNameProvisionerName != nil {
			qrFullNameProvisionerName = *o.FullNameProvisionerName
		}
		qFullNameProvisionerName := qrFullNameProvisionerName
		if qFullNameProvisionerName != "" {

			if err := r.SetQueryParam("fullName.provisionerName", qFullNameProvisionerName); err != nil {
				return err
			}
		}
	}

	if o.Namespace != nil {

		// query param namespace
		var qrNamespace string

		if o.Namespace != nil {
			qrNamespace = *o.Namespace
		}
		qNamespace := qrNamespace
		if qNamespace != "" {

			if err := r.SetQueryParam("namespace", qNamespace); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
