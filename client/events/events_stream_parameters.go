// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewEventsStreamParams creates a new EventsStreamParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewEventsStreamParams() *EventsStreamParams {
	return &EventsStreamParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewEventsStreamParamsWithTimeout creates a new EventsStreamParams object
// with the ability to set a timeout on a request.
func NewEventsStreamParamsWithTimeout(timeout time.Duration) *EventsStreamParams {
	return &EventsStreamParams{
		timeout: timeout,
	}
}

// NewEventsStreamParamsWithContext creates a new EventsStreamParams object
// with the ability to set a context for a request.
func NewEventsStreamParamsWithContext(ctx context.Context) *EventsStreamParams {
	return &EventsStreamParams{
		Context: ctx,
	}
}

// NewEventsStreamParamsWithHTTPClient creates a new EventsStreamParams object
// with the ability to set a custom HTTPClient for a request.
func NewEventsStreamParamsWithHTTPClient(client *http.Client) *EventsStreamParams {
	return &EventsStreamParams{
		HTTPClient: client,
	}
}

/*
EventsStreamParams contains all the parameters to send to the API endpoint

	for the events stream operation.

	Typically these are written to a http.Request.
*/
type EventsStreamParams struct {

	/* EventTypes.

	     One or more event types to apply as a filter (default: no filter).
	Possible event types are:
	com.vmware.tmc.cluster -> Cluster
	com.vmware.tmc.cluster.health -> ClusterHealth
	com.vmware.tmc.cluster.lifecycle -> ClusterLifecycle
	com.vmware.tmc.clustergroup -> ClusterGroup
	com.vmware.tmc.namespace -> Namespace
	com.vmware.tmc.provisioner -> Provisioner
	com.vmware.tmc.workspace -> Workspace
	com.vmware.tmc.inspection -> Inspection.
	*/
	EventTypes []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the events stream params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EventsStreamParams) WithDefaults() *EventsStreamParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the events stream params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EventsStreamParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the events stream params
func (o *EventsStreamParams) WithTimeout(timeout time.Duration) *EventsStreamParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the events stream params
func (o *EventsStreamParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the events stream params
func (o *EventsStreamParams) WithContext(ctx context.Context) *EventsStreamParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the events stream params
func (o *EventsStreamParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the events stream params
func (o *EventsStreamParams) WithHTTPClient(client *http.Client) *EventsStreamParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the events stream params
func (o *EventsStreamParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEventTypes adds the eventTypes to the events stream params
func (o *EventsStreamParams) WithEventTypes(eventTypes []string) *EventsStreamParams {
	o.SetEventTypes(eventTypes)
	return o
}

// SetEventTypes adds the eventTypes to the events stream params
func (o *EventsStreamParams) SetEventTypes(eventTypes []string) {
	o.EventTypes = eventTypes
}

// WriteToRequest writes these params to a swagger request
func (o *EventsStreamParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EventTypes != nil {

		// binding items for eventTypes
		joinedEventTypes := o.bindParamEventTypes(reg)

		// query array param eventTypes
		if err := r.SetQueryParam("eventTypes", joinedEventTypes...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamEventsStream binds the parameter eventTypes
func (o *EventsStreamParams) bindParamEventTypes(formats strfmt.Registry) []string {
	eventTypesIR := o.EventTypes

	var eventTypesIC []string
	for _, eventTypesIIR := range eventTypesIR { // explode []string

		eventTypesIIV := eventTypesIIR // string as string
		eventTypesIC = append(eventTypesIC, eventTypesIIV)
	}

	// items.CollectionFormat: "multi"
	eventTypesIS := swag.JoinByFormat(eventTypesIC, "multi")

	return eventTypesIS
}
