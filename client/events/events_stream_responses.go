// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/warroyo/tmc-go-rest-sdk/models"
)

// EventsStreamReader is a Reader for the EventsStream structure.
type EventsStreamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EventsStreamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEventsStreamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewEventsStreamDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewEventsStreamOK creates a EventsStreamOK with default headers values
func NewEventsStreamOK() *EventsStreamOK {
	return &EventsStreamOK{}
}

/*
EventsStreamOK describes a response with status code 200, with default header values.

A successful response.(streaming responses)
*/
type EventsStreamOK struct {
	Payload *EventsStreamOKBody
}

// IsSuccess returns true when this events stream o k response has a 2xx status code
func (o *EventsStreamOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this events stream o k response has a 3xx status code
func (o *EventsStreamOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this events stream o k response has a 4xx status code
func (o *EventsStreamOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this events stream o k response has a 5xx status code
func (o *EventsStreamOK) IsServerError() bool {
	return false
}

// IsCode returns true when this events stream o k response a status code equal to that given
func (o *EventsStreamOK) IsCode(code int) bool {
	return code == 200
}

func (o *EventsStreamOK) Error() string {
	return fmt.Sprintf("[GET /v1alpha1/events/stream][%d] eventsStreamOK  %+v", 200, o.Payload)
}

func (o *EventsStreamOK) String() string {
	return fmt.Sprintf("[GET /v1alpha1/events/stream][%d] eventsStreamOK  %+v", 200, o.Payload)
}

func (o *EventsStreamOK) GetPayload() *EventsStreamOKBody {
	return o.Payload
}

func (o *EventsStreamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(EventsStreamOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEventsStreamDefault creates a EventsStreamDefault with default headers values
func NewEventsStreamDefault(code int) *EventsStreamDefault {
	return &EventsStreamDefault{
		_statusCode: code,
	}
}

/*
EventsStreamDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type EventsStreamDefault struct {
	_statusCode int

	Payload *models.GrpcGatewayRuntimeError
}

// Code gets the status code for the events stream default response
func (o *EventsStreamDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this events stream default response has a 2xx status code
func (o *EventsStreamDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this events stream default response has a 3xx status code
func (o *EventsStreamDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this events stream default response has a 4xx status code
func (o *EventsStreamDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this events stream default response has a 5xx status code
func (o *EventsStreamDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this events stream default response a status code equal to that given
func (o *EventsStreamDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *EventsStreamDefault) Error() string {
	return fmt.Sprintf("[GET /v1alpha1/events/stream][%d] Events_Stream default  %+v", o._statusCode, o.Payload)
}

func (o *EventsStreamDefault) String() string {
	return fmt.Sprintf("[GET /v1alpha1/events/stream][%d] Events_Stream default  %+v", o._statusCode, o.Payload)
}

func (o *EventsStreamDefault) GetPayload() *models.GrpcGatewayRuntimeError {
	return o.Payload
}

func (o *EventsStreamDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GrpcGatewayRuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
EventsStreamOKBody Stream result of events.StreamEventsResponse
swagger:model EventsStreamOKBody
*/
type EventsStreamOKBody struct {

	// error
	Error *models.GrpcGatewayRuntimeStreamError `json:"error,omitempty"`

	// result
	Result *models.EventsStreamEventsResponse `json:"result,omitempty"`
}

// Validate validates this events stream o k body
func (o *EventsStreamOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EventsStreamOKBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventsStreamOK" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eventsStreamOK" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *EventsStreamOKBody) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventsStreamOK" + "." + "result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eventsStreamOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this events stream o k body based on the context it is used
func (o *EventsStreamOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EventsStreamOKBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventsStreamOK" + "." + "error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eventsStreamOK" + "." + "error")
			}
			return err
		}
	}

	return nil
}

func (o *EventsStreamOKBody) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if o.Result != nil {
		if err := o.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventsStreamOK" + "." + "result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eventsStreamOK" + "." + "result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *EventsStreamOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EventsStreamOKBody) UnmarshalBinary(b []byte) error {
	var res EventsStreamOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
