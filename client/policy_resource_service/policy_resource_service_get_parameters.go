// Code generated by go-swagger; DO NOT EDIT.

package policy_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPolicyResourceServiceGetParams creates a new PolicyResourceServiceGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPolicyResourceServiceGetParams() *PolicyResourceServiceGetParams {
	return &PolicyResourceServiceGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPolicyResourceServiceGetParamsWithTimeout creates a new PolicyResourceServiceGetParams object
// with the ability to set a timeout on a request.
func NewPolicyResourceServiceGetParamsWithTimeout(timeout time.Duration) *PolicyResourceServiceGetParams {
	return &PolicyResourceServiceGetParams{
		timeout: timeout,
	}
}

// NewPolicyResourceServiceGetParamsWithContext creates a new PolicyResourceServiceGetParams object
// with the ability to set a context for a request.
func NewPolicyResourceServiceGetParamsWithContext(ctx context.Context) *PolicyResourceServiceGetParams {
	return &PolicyResourceServiceGetParams{
		Context: ctx,
	}
}

// NewPolicyResourceServiceGetParamsWithHTTPClient creates a new PolicyResourceServiceGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewPolicyResourceServiceGetParamsWithHTTPClient(client *http.Client) *PolicyResourceServiceGetParams {
	return &PolicyResourceServiceGetParams{
		HTTPClient: client,
	}
}

/*
PolicyResourceServiceGetParams contains all the parameters to send to the API endpoint

	for the policy resource service get operation.

	Typically these are written to a http.Request.
*/
type PolicyResourceServiceGetParams struct {

	/* FullNameName.

	   Name of the policy.
	*/
	FullNameName string

	/* FullNameOrgID.

	   ID of Organization.
	*/
	FullNameOrgID *string

	/* FullNameWorkspaceName.

	   Name of the workspace.
	*/
	FullNameWorkspaceName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the policy resource service get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PolicyResourceServiceGetParams) WithDefaults() *PolicyResourceServiceGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the policy resource service get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PolicyResourceServiceGetParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the policy resource service get params
func (o *PolicyResourceServiceGetParams) WithTimeout(timeout time.Duration) *PolicyResourceServiceGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the policy resource service get params
func (o *PolicyResourceServiceGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the policy resource service get params
func (o *PolicyResourceServiceGetParams) WithContext(ctx context.Context) *PolicyResourceServiceGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the policy resource service get params
func (o *PolicyResourceServiceGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the policy resource service get params
func (o *PolicyResourceServiceGetParams) WithHTTPClient(client *http.Client) *PolicyResourceServiceGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the policy resource service get params
func (o *PolicyResourceServiceGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFullNameName adds the fullNameName to the policy resource service get params
func (o *PolicyResourceServiceGetParams) WithFullNameName(fullNameName string) *PolicyResourceServiceGetParams {
	o.SetFullNameName(fullNameName)
	return o
}

// SetFullNameName adds the fullNameName to the policy resource service get params
func (o *PolicyResourceServiceGetParams) SetFullNameName(fullNameName string) {
	o.FullNameName = fullNameName
}

// WithFullNameOrgID adds the fullNameOrgID to the policy resource service get params
func (o *PolicyResourceServiceGetParams) WithFullNameOrgID(fullNameOrgID *string) *PolicyResourceServiceGetParams {
	o.SetFullNameOrgID(fullNameOrgID)
	return o
}

// SetFullNameOrgID adds the fullNameOrgId to the policy resource service get params
func (o *PolicyResourceServiceGetParams) SetFullNameOrgID(fullNameOrgID *string) {
	o.FullNameOrgID = fullNameOrgID
}

// WithFullNameWorkspaceName adds the fullNameWorkspaceName to the policy resource service get params
func (o *PolicyResourceServiceGetParams) WithFullNameWorkspaceName(fullNameWorkspaceName string) *PolicyResourceServiceGetParams {
	o.SetFullNameWorkspaceName(fullNameWorkspaceName)
	return o
}

// SetFullNameWorkspaceName adds the fullNameWorkspaceName to the policy resource service get params
func (o *PolicyResourceServiceGetParams) SetFullNameWorkspaceName(fullNameWorkspaceName string) {
	o.FullNameWorkspaceName = fullNameWorkspaceName
}

// WriteToRequest writes these params to a swagger request
func (o *PolicyResourceServiceGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param fullName.name
	if err := r.SetPathParam("fullName.name", o.FullNameName); err != nil {
		return err
	}

	if o.FullNameOrgID != nil {

		// query param fullName.orgId
		var qrFullNameOrgID string

		if o.FullNameOrgID != nil {
			qrFullNameOrgID = *o.FullNameOrgID
		}
		qFullNameOrgID := qrFullNameOrgID
		if qFullNameOrgID != "" {

			if err := r.SetQueryParam("fullName.orgId", qFullNameOrgID); err != nil {
				return err
			}
		}
	}

	// path param fullName.workspaceName
	if err := r.SetPathParam("fullName.workspaceName", o.FullNameWorkspaceName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
