// Code generated by go-swagger; DO NOT EDIT.

package policy_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new policy resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for policy resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PolicyResourceServiceCreate(params *PolicyResourceServiceCreateParams, opts ...ClientOption) (*PolicyResourceServiceCreateOK, error)

	PolicyResourceServiceDelete(params *PolicyResourceServiceDeleteParams, opts ...ClientOption) (*PolicyResourceServiceDeleteOK, error)

	PolicyResourceServiceGet(params *PolicyResourceServiceGetParams, opts ...ClientOption) (*PolicyResourceServiceGetOK, error)

	PolicyResourceServiceList(params *PolicyResourceServiceListParams, opts ...ClientOption) (*PolicyResourceServiceListOK, error)

	PolicyResourceServiceUpdate(params *PolicyResourceServiceUpdateParams, opts ...ClientOption) (*PolicyResourceServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
PolicyResourceServiceCreate creates a policy
*/
func (a *Client) PolicyResourceServiceCreate(params *PolicyResourceServiceCreateParams, opts ...ClientOption) (*PolicyResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPolicyResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PolicyResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/workspaces/{policy.fullName.workspaceName}/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PolicyResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PolicyResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PolicyResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PolicyResourceServiceDelete deletes a policy
*/
func (a *Client) PolicyResourceServiceDelete(params *PolicyResourceServiceDeleteParams, opts ...ClientOption) (*PolicyResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPolicyResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PolicyResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/workspaces/{fullName.workspaceName}/policies/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PolicyResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PolicyResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PolicyResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PolicyResourceServiceGet gets a policy
*/
func (a *Client) PolicyResourceServiceGet(params *PolicyResourceServiceGetParams, opts ...ClientOption) (*PolicyResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPolicyResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PolicyResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/workspaces/{fullName.workspaceName}/policies/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PolicyResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PolicyResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PolicyResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PolicyResourceServiceList lists policies
*/
func (a *Client) PolicyResourceServiceList(params *PolicyResourceServiceListParams, opts ...ClientOption) (*PolicyResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPolicyResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PolicyResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/workspaces/{searchScope.workspaceName}/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PolicyResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PolicyResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PolicyResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PolicyResourceServiceUpdate updates overwrite a policy
*/
func (a *Client) PolicyResourceServiceUpdate(params *PolicyResourceServiceUpdateParams, opts ...ClientOption) (*PolicyResourceServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPolicyResourceServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PolicyResourceService_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/workspaces/{policy.fullName.workspaceName}/policies/{policy.fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PolicyResourceServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PolicyResourceServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PolicyResourceServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
