// Code generated by go-swagger; DO NOT EDIT.

package workspace_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new workspace resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workspace resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	WorkspaceResourceServiceCreate(params *WorkspaceResourceServiceCreateParams, opts ...ClientOption) (*WorkspaceResourceServiceCreateOK, error)

	WorkspaceResourceServiceDelete(params *WorkspaceResourceServiceDeleteParams, opts ...ClientOption) (*WorkspaceResourceServiceDeleteOK, error)

	WorkspaceResourceServiceGet(params *WorkspaceResourceServiceGetParams, opts ...ClientOption) (*WorkspaceResourceServiceGetOK, error)

	WorkspaceResourceServiceList(params *WorkspaceResourceServiceListParams, opts ...ClientOption) (*WorkspaceResourceServiceListOK, error)

	WorkspaceResourceServicePatch(params *WorkspaceResourceServicePatchParams, opts ...ClientOption) (*WorkspaceResourceServicePatchOK, error)

	WorkspaceResourceServiceUpdate(params *WorkspaceResourceServiceUpdateParams, opts ...ClientOption) (*WorkspaceResourceServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
WorkspaceResourceServiceCreate creates a workspace
*/
func (a *Client) WorkspaceResourceServiceCreate(params *WorkspaceResourceServiceCreateParams, opts ...ClientOption) (*WorkspaceResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/workspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkspaceResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkspaceResourceServiceDelete deletes a workspace
*/
func (a *Client) WorkspaceResourceServiceDelete(params *WorkspaceResourceServiceDeleteParams, opts ...ClientOption) (*WorkspaceResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/workspaces/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkspaceResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkspaceResourceServiceGet gets a workspace
*/
func (a *Client) WorkspaceResourceServiceGet(params *WorkspaceResourceServiceGetParams, opts ...ClientOption) (*WorkspaceResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/workspaces/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkspaceResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkspaceResourceServiceList lists workspaces
*/
func (a *Client) WorkspaceResourceServiceList(params *WorkspaceResourceServiceListParams, opts ...ClientOption) (*WorkspaceResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/workspaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkspaceResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkspaceResourceServicePatch patches partially update a workspace
*/
func (a *Client) WorkspaceResourceServicePatch(params *WorkspaceResourceServicePatchParams, opts ...ClientOption) (*WorkspaceResourceServicePatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceResourceServicePatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceResourceService_Patch",
		Method:             "PATCH",
		PathPattern:        "/v1alpha1/workspaces/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkspaceResourceServicePatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceResourceServicePatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceResourceServicePatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WorkspaceResourceServiceUpdate updates overwrite a workspace
*/
func (a *Client) WorkspaceResourceServiceUpdate(params *WorkspaceResourceServiceUpdateParams, opts ...ClientOption) (*WorkspaceResourceServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWorkspaceResourceServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WorkspaceResourceService_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/workspaces/{workspace.fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WorkspaceResourceServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WorkspaceResourceServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WorkspaceResourceServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
