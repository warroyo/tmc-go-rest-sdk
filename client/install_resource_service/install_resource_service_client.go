// Code generated by go-swagger; DO NOT EDIT.

package install_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new install resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for install resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	InstallResourceServiceCreate(params *InstallResourceServiceCreateParams, opts ...ClientOption) (*InstallResourceServiceCreateOK, error)

	InstallResourceServiceDelete(params *InstallResourceServiceDeleteParams, opts ...ClientOption) (*InstallResourceServiceDeleteOK, error)

	InstallResourceServiceGet(params *InstallResourceServiceGetParams, opts ...ClientOption) (*InstallResourceServiceGetOK, error)

	InstallResourceServiceList(params *InstallResourceServiceListParams, opts ...ClientOption) (*InstallResourceServiceListOK, error)

	InstallResourceServiceUpdate(params *InstallResourceServiceUpdateParams, opts ...ClientOption) (*InstallResourceServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
InstallResourceServiceCreate creates an install
*/
func (a *Client) InstallResourceServiceCreate(params *InstallResourceServiceCreateParams, opts ...ClientOption) (*InstallResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstallResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InstallResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/clusters/{install.fullName.clusterName}/namespaces/{install.fullName.namespaceName}/tanzupackage/installs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InstallResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstallResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InstallResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InstallResourceServiceDelete deletes an install
*/
func (a *Client) InstallResourceServiceDelete(params *InstallResourceServiceDeleteParams, opts ...ClientOption) (*InstallResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstallResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InstallResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/namespaces/{fullName.namespaceName}/tanzupackage/installs/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InstallResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstallResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InstallResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InstallResourceServiceGet gets an install
*/
func (a *Client) InstallResourceServiceGet(params *InstallResourceServiceGetParams, opts ...ClientOption) (*InstallResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstallResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InstallResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/namespaces/{fullName.namespaceName}/tanzupackage/installs/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InstallResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstallResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InstallResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InstallResourceServiceList lists installs
*/
func (a *Client) InstallResourceServiceList(params *InstallResourceServiceListParams, opts ...ClientOption) (*InstallResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstallResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InstallResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clusters/{searchScope.clusterName}/namespaces/{searchScope.namespaceName}/tanzupackage/installs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InstallResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstallResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InstallResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InstallResourceServiceUpdate updates overwrite an install
*/
func (a *Client) InstallResourceServiceUpdate(params *InstallResourceServiceUpdateParams, opts ...ClientOption) (*InstallResourceServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstallResourceServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InstallResourceService_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/clusters/{install.fullName.clusterName}/namespaces/{install.fullName.namespaceName}/tanzupackage/installs/{install.fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InstallResourceServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstallResourceServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InstallResourceServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
