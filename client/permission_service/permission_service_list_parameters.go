// Code generated by go-swagger; DO NOT EDIT.

package permission_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPermissionServiceListParams creates a new PermissionServiceListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPermissionServiceListParams() *PermissionServiceListParams {
	return &PermissionServiceListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPermissionServiceListParamsWithTimeout creates a new PermissionServiceListParams object
// with the ability to set a timeout on a request.
func NewPermissionServiceListParamsWithTimeout(timeout time.Duration) *PermissionServiceListParams {
	return &PermissionServiceListParams{
		timeout: timeout,
	}
}

// NewPermissionServiceListParamsWithContext creates a new PermissionServiceListParams object
// with the ability to set a context for a request.
func NewPermissionServiceListParamsWithContext(ctx context.Context) *PermissionServiceListParams {
	return &PermissionServiceListParams{
		Context: ctx,
	}
}

// NewPermissionServiceListParamsWithHTTPClient creates a new PermissionServiceListParams object
// with the ability to set a custom HTTPClient for a request.
func NewPermissionServiceListParamsWithHTTPClient(client *http.Client) *PermissionServiceListParams {
	return &PermissionServiceListParams{
		HTTPClient: client,
	}
}

/*
PermissionServiceListParams contains all the parameters to send to the API endpoint

	for the permission service list operation.

	Typically these are written to a http.Request.
*/
type PermissionServiceListParams struct {

	/* Name.

	     Name, if provided, limits the response to a particular permission.
	+optional.
	*/
	Name *string

	/* Resources.

	     Resources, if provided, will limit the response permissions to those
	which are valid for these resources.
	+optional.

	 - RESOURCE_UNSPECIFIED: Unkonwn.
	 - ORGANIZATION: Organization.
	 - MANAGEMENT_CLUSTER: Management cluster.
	 - PROVISIONER: Provisioner.
	 - CLUSTER_GROUP: Cluster group.
	 - CLUSTER: Cluster.
	 - WORKSPACE: Workspace.
	 - NAMESPACE: Namespace.
	*/
	Resources []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the permission service list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PermissionServiceListParams) WithDefaults() *PermissionServiceListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the permission service list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PermissionServiceListParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the permission service list params
func (o *PermissionServiceListParams) WithTimeout(timeout time.Duration) *PermissionServiceListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the permission service list params
func (o *PermissionServiceListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the permission service list params
func (o *PermissionServiceListParams) WithContext(ctx context.Context) *PermissionServiceListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the permission service list params
func (o *PermissionServiceListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the permission service list params
func (o *PermissionServiceListParams) WithHTTPClient(client *http.Client) *PermissionServiceListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the permission service list params
func (o *PermissionServiceListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the permission service list params
func (o *PermissionServiceListParams) WithName(name *string) *PermissionServiceListParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the permission service list params
func (o *PermissionServiceListParams) SetName(name *string) {
	o.Name = name
}

// WithResources adds the resources to the permission service list params
func (o *PermissionServiceListParams) WithResources(resources []string) *PermissionServiceListParams {
	o.SetResources(resources)
	return o
}

// SetResources adds the resources to the permission service list params
func (o *PermissionServiceListParams) SetResources(resources []string) {
	o.Resources = resources
}

// WriteToRequest writes these params to a swagger request
func (o *PermissionServiceListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Resources != nil {

		// binding items for resources
		joinedResources := o.bindParamResources(reg)

		// query array param resources
		if err := r.SetQueryParam("resources", joinedResources...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamPermissionServiceList binds the parameter resources
func (o *PermissionServiceListParams) bindParamResources(formats strfmt.Registry) []string {
	resourcesIR := o.Resources

	var resourcesIC []string
	for _, resourcesIIR := range resourcesIR { // explode []string

		resourcesIIV := resourcesIIR // string as string
		resourcesIC = append(resourcesIC, resourcesIIV)
	}

	// items.CollectionFormat: "multi"
	resourcesIS := swag.JoinByFormat(resourcesIC, "multi")

	return resourcesIS
}
