// Code generated by go-swagger; DO NOT EDIT.

package secret_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new secret resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for secret resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SecretResourceServiceCreate(params *SecretResourceServiceCreateParams, opts ...ClientOption) (*SecretResourceServiceCreateOK, error)

	SecretResourceServiceDelete(params *SecretResourceServiceDeleteParams, opts ...ClientOption) (*SecretResourceServiceDeleteOK, error)

	SecretResourceServiceGet(params *SecretResourceServiceGetParams, opts ...ClientOption) (*SecretResourceServiceGetOK, error)

	SecretResourceServiceList(params *SecretResourceServiceListParams, opts ...ClientOption) (*SecretResourceServiceListOK, error)

	SecretResourceServiceUpdate(params *SecretResourceServiceUpdateParams, opts ...ClientOption) (*SecretResourceServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
SecretResourceServiceCreate creates a secret
*/
func (a *Client) SecretResourceServiceCreate(params *SecretResourceServiceCreateParams, opts ...ClientOption) (*SecretResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/clusters/{secret.fullName.clusterName}/namespaces/{secret.fullName.namespaceName}/secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SecretResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SecretResourceServiceDelete deletes a secret
*/
func (a *Client) SecretResourceServiceDelete(params *SecretResourceServiceDeleteParams, opts ...ClientOption) (*SecretResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/namespaces/{fullName.namespaceName}/secrets/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SecretResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SecretResourceServiceGet gets a secret
*/
func (a *Client) SecretResourceServiceGet(params *SecretResourceServiceGetParams, opts ...ClientOption) (*SecretResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/namespaces/{fullName.namespaceName}/secrets/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SecretResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SecretResourceServiceList lists secrets
*/
func (a *Client) SecretResourceServiceList(params *SecretResourceServiceListParams, opts ...ClientOption) (*SecretResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clusters/{searchScope.clusterName}/namespaces/{searchScope.namespaceName}/secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SecretResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SecretResourceServiceUpdate updates overwrite a secret
*/
func (a *Client) SecretResourceServiceUpdate(params *SecretResourceServiceUpdateParams, opts ...ClientOption) (*SecretResourceServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSecretResourceServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SecretResourceService_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/clusters/{secret.fullName.clusterName}/namespaces/{secret.fullName.namespaceName}/secrets/{secret.fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SecretResourceServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SecretResourceServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SecretResourceServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
