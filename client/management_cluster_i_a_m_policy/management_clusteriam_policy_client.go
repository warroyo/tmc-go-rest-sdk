// Code generated by go-swagger; DO NOT EDIT.

package management_cluster_i_a_m_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new management cluster i a m policy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for management cluster i a m policy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ManagementClusterIAMPolicyGet(params *ManagementClusterIAMPolicyGetParams, opts ...ClientOption) (*ManagementClusterIAMPolicyGetOK, error)

	ManagementClusterIAMPolicyPatch(params *ManagementClusterIAMPolicyPatchParams, opts ...ClientOption) (*ManagementClusterIAMPolicyPatchOK, error)

	ManagementClusterIAMPolicyTestPermissions(params *ManagementClusterIAMPolicyTestPermissionsParams, opts ...ClientOption) (*ManagementClusterIAMPolicyTestPermissionsOK, error)

	ManagementClusterIAMPolicyUpdate(params *ManagementClusterIAMPolicyUpdateParams, opts ...ClientOption) (*ManagementClusterIAMPolicyUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ManagementClusterIAMPolicyGet gets policy for a management cluster
*/
func (a *Client) ManagementClusterIAMPolicyGet(params *ManagementClusterIAMPolicyGetParams, opts ...ClientOption) (*ManagementClusterIAMPolicyGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewManagementClusterIAMPolicyGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ManagementClusterIAMPolicy_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/managementclusters:iam/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ManagementClusterIAMPolicyGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManagementClusterIAMPolicyGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ManagementClusterIAMPolicyGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ManagementClusterIAMPolicyPatch patches a management cluster policy
*/
func (a *Client) ManagementClusterIAMPolicyPatch(params *ManagementClusterIAMPolicyPatchParams, opts ...ClientOption) (*ManagementClusterIAMPolicyPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewManagementClusterIAMPolicyPatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ManagementClusterIAMPolicy_Patch",
		Method:             "PATCH",
		PathPattern:        "/v1alpha1/managementclusters:iam/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ManagementClusterIAMPolicyPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManagementClusterIAMPolicyPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ManagementClusterIAMPolicyPatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ManagementClusterIAMPolicyTestPermissions tests permissions for a management cluster
*/
func (a *Client) ManagementClusterIAMPolicyTestPermissions(params *ManagementClusterIAMPolicyTestPermissionsParams, opts ...ClientOption) (*ManagementClusterIAMPolicyTestPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewManagementClusterIAMPolicyTestPermissionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ManagementClusterIAMPolicy_TestPermissions",
		Method:             "POST",
		PathPattern:        "/v1alpha1/managementclusters:iam/{fullName.name}/testPermissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ManagementClusterIAMPolicyTestPermissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManagementClusterIAMPolicyTestPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ManagementClusterIAMPolicyTestPermissionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ManagementClusterIAMPolicyUpdate updates overwrite policy for a management cluster deleted if body is empty
*/
func (a *Client) ManagementClusterIAMPolicyUpdate(params *ManagementClusterIAMPolicyUpdateParams, opts ...ClientOption) (*ManagementClusterIAMPolicyUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewManagementClusterIAMPolicyUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ManagementClusterIAMPolicy_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/managementclusters:iam/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ManagementClusterIAMPolicyUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManagementClusterIAMPolicyUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ManagementClusterIAMPolicyUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
