// Code generated by go-swagger; DO NOT EDIT.

package usage_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUsageServiceGetClusterLevelUsageParams creates a new UsageServiceGetClusterLevelUsageParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUsageServiceGetClusterLevelUsageParams() *UsageServiceGetClusterLevelUsageParams {
	return &UsageServiceGetClusterLevelUsageParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUsageServiceGetClusterLevelUsageParamsWithTimeout creates a new UsageServiceGetClusterLevelUsageParams object
// with the ability to set a timeout on a request.
func NewUsageServiceGetClusterLevelUsageParamsWithTimeout(timeout time.Duration) *UsageServiceGetClusterLevelUsageParams {
	return &UsageServiceGetClusterLevelUsageParams{
		timeout: timeout,
	}
}

// NewUsageServiceGetClusterLevelUsageParamsWithContext creates a new UsageServiceGetClusterLevelUsageParams object
// with the ability to set a context for a request.
func NewUsageServiceGetClusterLevelUsageParamsWithContext(ctx context.Context) *UsageServiceGetClusterLevelUsageParams {
	return &UsageServiceGetClusterLevelUsageParams{
		Context: ctx,
	}
}

// NewUsageServiceGetClusterLevelUsageParamsWithHTTPClient creates a new UsageServiceGetClusterLevelUsageParams object
// with the ability to set a custom HTTPClient for a request.
func NewUsageServiceGetClusterLevelUsageParamsWithHTTPClient(client *http.Client) *UsageServiceGetClusterLevelUsageParams {
	return &UsageServiceGetClusterLevelUsageParams{
		HTTPClient: client,
	}
}

/*
UsageServiceGetClusterLevelUsageParams contains all the parameters to send to the API endpoint

	for the usage service get cluster level usage operation.

	Typically these are written to a http.Request.
*/
type UsageServiceGetClusterLevelUsageParams struct {

	/* ClusterFullNameManagementClusterName.

	   Name of the management cluster.
	*/
	ClusterFullNameManagementClusterName *string

	/* ClusterFullNameName.

	   Name of this cluster.
	*/
	ClusterFullNameName *string

	/* ClusterFullNameOrgID.

	   ID of Organization.
	*/
	ClusterFullNameOrgID *string

	/* ClusterFullNameProvisionerName.

	   Provisioner of the cluster.
	*/
	ClusterFullNameProvisionerName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the usage service get cluster level usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UsageServiceGetClusterLevelUsageParams) WithDefaults() *UsageServiceGetClusterLevelUsageParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the usage service get cluster level usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UsageServiceGetClusterLevelUsageParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the usage service get cluster level usage params
func (o *UsageServiceGetClusterLevelUsageParams) WithTimeout(timeout time.Duration) *UsageServiceGetClusterLevelUsageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the usage service get cluster level usage params
func (o *UsageServiceGetClusterLevelUsageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the usage service get cluster level usage params
func (o *UsageServiceGetClusterLevelUsageParams) WithContext(ctx context.Context) *UsageServiceGetClusterLevelUsageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the usage service get cluster level usage params
func (o *UsageServiceGetClusterLevelUsageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the usage service get cluster level usage params
func (o *UsageServiceGetClusterLevelUsageParams) WithHTTPClient(client *http.Client) *UsageServiceGetClusterLevelUsageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the usage service get cluster level usage params
func (o *UsageServiceGetClusterLevelUsageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterFullNameManagementClusterName adds the clusterFullNameManagementClusterName to the usage service get cluster level usage params
func (o *UsageServiceGetClusterLevelUsageParams) WithClusterFullNameManagementClusterName(clusterFullNameManagementClusterName *string) *UsageServiceGetClusterLevelUsageParams {
	o.SetClusterFullNameManagementClusterName(clusterFullNameManagementClusterName)
	return o
}

// SetClusterFullNameManagementClusterName adds the clusterFullNameManagementClusterName to the usage service get cluster level usage params
func (o *UsageServiceGetClusterLevelUsageParams) SetClusterFullNameManagementClusterName(clusterFullNameManagementClusterName *string) {
	o.ClusterFullNameManagementClusterName = clusterFullNameManagementClusterName
}

// WithClusterFullNameName adds the clusterFullNameName to the usage service get cluster level usage params
func (o *UsageServiceGetClusterLevelUsageParams) WithClusterFullNameName(clusterFullNameName *string) *UsageServiceGetClusterLevelUsageParams {
	o.SetClusterFullNameName(clusterFullNameName)
	return o
}

// SetClusterFullNameName adds the clusterFullNameName to the usage service get cluster level usage params
func (o *UsageServiceGetClusterLevelUsageParams) SetClusterFullNameName(clusterFullNameName *string) {
	o.ClusterFullNameName = clusterFullNameName
}

// WithClusterFullNameOrgID adds the clusterFullNameOrgID to the usage service get cluster level usage params
func (o *UsageServiceGetClusterLevelUsageParams) WithClusterFullNameOrgID(clusterFullNameOrgID *string) *UsageServiceGetClusterLevelUsageParams {
	o.SetClusterFullNameOrgID(clusterFullNameOrgID)
	return o
}

// SetClusterFullNameOrgID adds the clusterFullNameOrgId to the usage service get cluster level usage params
func (o *UsageServiceGetClusterLevelUsageParams) SetClusterFullNameOrgID(clusterFullNameOrgID *string) {
	o.ClusterFullNameOrgID = clusterFullNameOrgID
}

// WithClusterFullNameProvisionerName adds the clusterFullNameProvisionerName to the usage service get cluster level usage params
func (o *UsageServiceGetClusterLevelUsageParams) WithClusterFullNameProvisionerName(clusterFullNameProvisionerName *string) *UsageServiceGetClusterLevelUsageParams {
	o.SetClusterFullNameProvisionerName(clusterFullNameProvisionerName)
	return o
}

// SetClusterFullNameProvisionerName adds the clusterFullNameProvisionerName to the usage service get cluster level usage params
func (o *UsageServiceGetClusterLevelUsageParams) SetClusterFullNameProvisionerName(clusterFullNameProvisionerName *string) {
	o.ClusterFullNameProvisionerName = clusterFullNameProvisionerName
}

// WriteToRequest writes these params to a swagger request
func (o *UsageServiceGetClusterLevelUsageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClusterFullNameManagementClusterName != nil {

		// query param clusterFullName.managementClusterName
		var qrClusterFullNameManagementClusterName string

		if o.ClusterFullNameManagementClusterName != nil {
			qrClusterFullNameManagementClusterName = *o.ClusterFullNameManagementClusterName
		}
		qClusterFullNameManagementClusterName := qrClusterFullNameManagementClusterName
		if qClusterFullNameManagementClusterName != "" {

			if err := r.SetQueryParam("clusterFullName.managementClusterName", qClusterFullNameManagementClusterName); err != nil {
				return err
			}
		}
	}

	if o.ClusterFullNameName != nil {

		// query param clusterFullName.name
		var qrClusterFullNameName string

		if o.ClusterFullNameName != nil {
			qrClusterFullNameName = *o.ClusterFullNameName
		}
		qClusterFullNameName := qrClusterFullNameName
		if qClusterFullNameName != "" {

			if err := r.SetQueryParam("clusterFullName.name", qClusterFullNameName); err != nil {
				return err
			}
		}
	}

	if o.ClusterFullNameOrgID != nil {

		// query param clusterFullName.orgId
		var qrClusterFullNameOrgID string

		if o.ClusterFullNameOrgID != nil {
			qrClusterFullNameOrgID = *o.ClusterFullNameOrgID
		}
		qClusterFullNameOrgID := qrClusterFullNameOrgID
		if qClusterFullNameOrgID != "" {

			if err := r.SetQueryParam("clusterFullName.orgId", qClusterFullNameOrgID); err != nil {
				return err
			}
		}
	}

	if o.ClusterFullNameProvisionerName != nil {

		// query param clusterFullName.provisionerName
		var qrClusterFullNameProvisionerName string

		if o.ClusterFullNameProvisionerName != nil {
			qrClusterFullNameProvisionerName = *o.ClusterFullNameProvisionerName
		}
		qClusterFullNameProvisionerName := qrClusterFullNameProvisionerName
		if qClusterFullNameProvisionerName != "" {

			if err := r.SetQueryParam("clusterFullName.provisionerName", qClusterFullNameProvisionerName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
