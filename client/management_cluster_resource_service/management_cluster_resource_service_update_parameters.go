// Code generated by go-swagger; DO NOT EDIT.

package management_cluster_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/warroyo/tmc-go-rest-sdk/models"
)

// NewManagementClusterResourceServiceUpdateParams creates a new ManagementClusterResourceServiceUpdateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewManagementClusterResourceServiceUpdateParams() *ManagementClusterResourceServiceUpdateParams {
	return &ManagementClusterResourceServiceUpdateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewManagementClusterResourceServiceUpdateParamsWithTimeout creates a new ManagementClusterResourceServiceUpdateParams object
// with the ability to set a timeout on a request.
func NewManagementClusterResourceServiceUpdateParamsWithTimeout(timeout time.Duration) *ManagementClusterResourceServiceUpdateParams {
	return &ManagementClusterResourceServiceUpdateParams{
		timeout: timeout,
	}
}

// NewManagementClusterResourceServiceUpdateParamsWithContext creates a new ManagementClusterResourceServiceUpdateParams object
// with the ability to set a context for a request.
func NewManagementClusterResourceServiceUpdateParamsWithContext(ctx context.Context) *ManagementClusterResourceServiceUpdateParams {
	return &ManagementClusterResourceServiceUpdateParams{
		Context: ctx,
	}
}

// NewManagementClusterResourceServiceUpdateParamsWithHTTPClient creates a new ManagementClusterResourceServiceUpdateParams object
// with the ability to set a custom HTTPClient for a request.
func NewManagementClusterResourceServiceUpdateParamsWithHTTPClient(client *http.Client) *ManagementClusterResourceServiceUpdateParams {
	return &ManagementClusterResourceServiceUpdateParams{
		HTTPClient: client,
	}
}

/*
ManagementClusterResourceServiceUpdateParams contains all the parameters to send to the API endpoint

	for the management cluster resource service update operation.

	Typically these are written to a http.Request.
*/
type ManagementClusterResourceServiceUpdateParams struct {

	// Body.
	Body *models.ManagementclusterUpdateManagementClusterRequest

	/* ManagementClusterFullNameName.

	   Unique identifier of the ManagementCluster.
	*/
	ManagementClusterFullNameName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the management cluster resource service update params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ManagementClusterResourceServiceUpdateParams) WithDefaults() *ManagementClusterResourceServiceUpdateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the management cluster resource service update params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ManagementClusterResourceServiceUpdateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the management cluster resource service update params
func (o *ManagementClusterResourceServiceUpdateParams) WithTimeout(timeout time.Duration) *ManagementClusterResourceServiceUpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the management cluster resource service update params
func (o *ManagementClusterResourceServiceUpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the management cluster resource service update params
func (o *ManagementClusterResourceServiceUpdateParams) WithContext(ctx context.Context) *ManagementClusterResourceServiceUpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the management cluster resource service update params
func (o *ManagementClusterResourceServiceUpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the management cluster resource service update params
func (o *ManagementClusterResourceServiceUpdateParams) WithHTTPClient(client *http.Client) *ManagementClusterResourceServiceUpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the management cluster resource service update params
func (o *ManagementClusterResourceServiceUpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the management cluster resource service update params
func (o *ManagementClusterResourceServiceUpdateParams) WithBody(body *models.ManagementclusterUpdateManagementClusterRequest) *ManagementClusterResourceServiceUpdateParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the management cluster resource service update params
func (o *ManagementClusterResourceServiceUpdateParams) SetBody(body *models.ManagementclusterUpdateManagementClusterRequest) {
	o.Body = body
}

// WithManagementClusterFullNameName adds the managementClusterFullNameName to the management cluster resource service update params
func (o *ManagementClusterResourceServiceUpdateParams) WithManagementClusterFullNameName(managementClusterFullNameName string) *ManagementClusterResourceServiceUpdateParams {
	o.SetManagementClusterFullNameName(managementClusterFullNameName)
	return o
}

// SetManagementClusterFullNameName adds the managementClusterFullNameName to the management cluster resource service update params
func (o *ManagementClusterResourceServiceUpdateParams) SetManagementClusterFullNameName(managementClusterFullNameName string) {
	o.ManagementClusterFullNameName = managementClusterFullNameName
}

// WriteToRequest writes these params to a swagger request
func (o *ManagementClusterResourceServiceUpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param managementCluster.fullName.name
	if err := r.SetPathParam("managementCluster.fullName.name", o.ManagementClusterFullNameName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
