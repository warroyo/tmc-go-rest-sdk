// Code generated by go-swagger; DO NOT EDIT.

package credential_i_a_m_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/warroyo/tmc-go-rest-sdk/models"
)

// NewCredentialIAMPolicyTestPermissionsParams creates a new CredentialIAMPolicyTestPermissionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCredentialIAMPolicyTestPermissionsParams() *CredentialIAMPolicyTestPermissionsParams {
	return &CredentialIAMPolicyTestPermissionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCredentialIAMPolicyTestPermissionsParamsWithTimeout creates a new CredentialIAMPolicyTestPermissionsParams object
// with the ability to set a timeout on a request.
func NewCredentialIAMPolicyTestPermissionsParamsWithTimeout(timeout time.Duration) *CredentialIAMPolicyTestPermissionsParams {
	return &CredentialIAMPolicyTestPermissionsParams{
		timeout: timeout,
	}
}

// NewCredentialIAMPolicyTestPermissionsParamsWithContext creates a new CredentialIAMPolicyTestPermissionsParams object
// with the ability to set a context for a request.
func NewCredentialIAMPolicyTestPermissionsParamsWithContext(ctx context.Context) *CredentialIAMPolicyTestPermissionsParams {
	return &CredentialIAMPolicyTestPermissionsParams{
		Context: ctx,
	}
}

// NewCredentialIAMPolicyTestPermissionsParamsWithHTTPClient creates a new CredentialIAMPolicyTestPermissionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewCredentialIAMPolicyTestPermissionsParamsWithHTTPClient(client *http.Client) *CredentialIAMPolicyTestPermissionsParams {
	return &CredentialIAMPolicyTestPermissionsParams{
		HTTPClient: client,
	}
}

/*
CredentialIAMPolicyTestPermissionsParams contains all the parameters to send to the API endpoint

	for the credential i a m policy test permissions operation.

	Typically these are written to a http.Request.
*/
type CredentialIAMPolicyTestPermissionsParams struct {

	// Body.
	Body *models.AccountManagementclusterProvisionerCredentialTestCredentialIAMPermissionsRequest

	/* FullNameName.

	   Name of this credential.
	*/
	FullNameName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the credential i a m policy test permissions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CredentialIAMPolicyTestPermissionsParams) WithDefaults() *CredentialIAMPolicyTestPermissionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the credential i a m policy test permissions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CredentialIAMPolicyTestPermissionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the credential i a m policy test permissions params
func (o *CredentialIAMPolicyTestPermissionsParams) WithTimeout(timeout time.Duration) *CredentialIAMPolicyTestPermissionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the credential i a m policy test permissions params
func (o *CredentialIAMPolicyTestPermissionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the credential i a m policy test permissions params
func (o *CredentialIAMPolicyTestPermissionsParams) WithContext(ctx context.Context) *CredentialIAMPolicyTestPermissionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the credential i a m policy test permissions params
func (o *CredentialIAMPolicyTestPermissionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the credential i a m policy test permissions params
func (o *CredentialIAMPolicyTestPermissionsParams) WithHTTPClient(client *http.Client) *CredentialIAMPolicyTestPermissionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the credential i a m policy test permissions params
func (o *CredentialIAMPolicyTestPermissionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the credential i a m policy test permissions params
func (o *CredentialIAMPolicyTestPermissionsParams) WithBody(body *models.AccountManagementclusterProvisionerCredentialTestCredentialIAMPermissionsRequest) *CredentialIAMPolicyTestPermissionsParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the credential i a m policy test permissions params
func (o *CredentialIAMPolicyTestPermissionsParams) SetBody(body *models.AccountManagementclusterProvisionerCredentialTestCredentialIAMPermissionsRequest) {
	o.Body = body
}

// WithFullNameName adds the fullNameName to the credential i a m policy test permissions params
func (o *CredentialIAMPolicyTestPermissionsParams) WithFullNameName(fullNameName string) *CredentialIAMPolicyTestPermissionsParams {
	o.SetFullNameName(fullNameName)
	return o
}

// SetFullNameName adds the fullNameName to the credential i a m policy test permissions params
func (o *CredentialIAMPolicyTestPermissionsParams) SetFullNameName(fullNameName string) {
	o.FullNameName = fullNameName
}

// WriteToRequest writes these params to a swagger request
func (o *CredentialIAMPolicyTestPermissionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param fullName.name
	if err := r.SetPathParam("fullName.name", o.FullNameName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
