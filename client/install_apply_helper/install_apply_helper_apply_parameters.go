// Code generated by go-swagger; DO NOT EDIT.

package install_apply_helper

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/warroyo/tmc-go-rest-sdk/models"
)

// NewInstallApplyHelperApplyParams creates a new InstallApplyHelperApplyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewInstallApplyHelperApplyParams() *InstallApplyHelperApplyParams {
	return &InstallApplyHelperApplyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewInstallApplyHelperApplyParamsWithTimeout creates a new InstallApplyHelperApplyParams object
// with the ability to set a timeout on a request.
func NewInstallApplyHelperApplyParamsWithTimeout(timeout time.Duration) *InstallApplyHelperApplyParams {
	return &InstallApplyHelperApplyParams{
		timeout: timeout,
	}
}

// NewInstallApplyHelperApplyParamsWithContext creates a new InstallApplyHelperApplyParams object
// with the ability to set a context for a request.
func NewInstallApplyHelperApplyParamsWithContext(ctx context.Context) *InstallApplyHelperApplyParams {
	return &InstallApplyHelperApplyParams{
		Context: ctx,
	}
}

// NewInstallApplyHelperApplyParamsWithHTTPClient creates a new InstallApplyHelperApplyParams object
// with the ability to set a custom HTTPClient for a request.
func NewInstallApplyHelperApplyParamsWithHTTPClient(client *http.Client) *InstallApplyHelperApplyParams {
	return &InstallApplyHelperApplyParams{
		HTTPClient: client,
	}
}

/*
InstallApplyHelperApplyParams contains all the parameters to send to the API endpoint

	for the install apply helper apply operation.

	Typically these are written to a http.Request.
*/
type InstallApplyHelperApplyParams struct {

	// Body.
	Body *models.ClusterNamespaceTanzupackageInstallApplyInstallRequest

	/* InstallFullNameClusterName.

	   Name of Cluster.
	*/
	InstallFullNameClusterName string

	/* InstallFullNameNamespaceName.

	   Name of Namespace.
	*/
	InstallFullNameNamespaceName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the install apply helper apply params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *InstallApplyHelperApplyParams) WithDefaults() *InstallApplyHelperApplyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the install apply helper apply params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *InstallApplyHelperApplyParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the install apply helper apply params
func (o *InstallApplyHelperApplyParams) WithTimeout(timeout time.Duration) *InstallApplyHelperApplyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the install apply helper apply params
func (o *InstallApplyHelperApplyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the install apply helper apply params
func (o *InstallApplyHelperApplyParams) WithContext(ctx context.Context) *InstallApplyHelperApplyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the install apply helper apply params
func (o *InstallApplyHelperApplyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the install apply helper apply params
func (o *InstallApplyHelperApplyParams) WithHTTPClient(client *http.Client) *InstallApplyHelperApplyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the install apply helper apply params
func (o *InstallApplyHelperApplyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the install apply helper apply params
func (o *InstallApplyHelperApplyParams) WithBody(body *models.ClusterNamespaceTanzupackageInstallApplyInstallRequest) *InstallApplyHelperApplyParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the install apply helper apply params
func (o *InstallApplyHelperApplyParams) SetBody(body *models.ClusterNamespaceTanzupackageInstallApplyInstallRequest) {
	o.Body = body
}

// WithInstallFullNameClusterName adds the installFullNameClusterName to the install apply helper apply params
func (o *InstallApplyHelperApplyParams) WithInstallFullNameClusterName(installFullNameClusterName string) *InstallApplyHelperApplyParams {
	o.SetInstallFullNameClusterName(installFullNameClusterName)
	return o
}

// SetInstallFullNameClusterName adds the installFullNameClusterName to the install apply helper apply params
func (o *InstallApplyHelperApplyParams) SetInstallFullNameClusterName(installFullNameClusterName string) {
	o.InstallFullNameClusterName = installFullNameClusterName
}

// WithInstallFullNameNamespaceName adds the installFullNameNamespaceName to the install apply helper apply params
func (o *InstallApplyHelperApplyParams) WithInstallFullNameNamespaceName(installFullNameNamespaceName string) *InstallApplyHelperApplyParams {
	o.SetInstallFullNameNamespaceName(installFullNameNamespaceName)
	return o
}

// SetInstallFullNameNamespaceName adds the installFullNameNamespaceName to the install apply helper apply params
func (o *InstallApplyHelperApplyParams) SetInstallFullNameNamespaceName(installFullNameNamespaceName string) {
	o.InstallFullNameNamespaceName = installFullNameNamespaceName
}

// WriteToRequest writes these params to a swagger request
func (o *InstallApplyHelperApplyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param install.fullName.clusterName
	if err := r.SetPathParam("install.fullName.clusterName", o.InstallFullNameClusterName); err != nil {
		return err
	}

	// path param install.fullName.namespaceName
	if err := r.SetPathParam("install.fullName.namespaceName", o.InstallFullNameNamespaceName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
