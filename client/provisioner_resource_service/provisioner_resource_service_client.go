// Code generated by go-swagger; DO NOT EDIT.

package provisioner_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new provisioner resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for provisioner resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ProvisionerResourceServiceCreate(params *ProvisionerResourceServiceCreateParams, opts ...ClientOption) (*ProvisionerResourceServiceCreateOK, error)

	ProvisionerResourceServiceDelete(params *ProvisionerResourceServiceDeleteParams, opts ...ClientOption) (*ProvisionerResourceServiceDeleteOK, error)

	ProvisionerResourceServiceGet(params *ProvisionerResourceServiceGetParams, opts ...ClientOption) (*ProvisionerResourceServiceGetOK, error)

	ProvisionerResourceServiceList(params *ProvisionerResourceServiceListParams, opts ...ClientOption) (*ProvisionerResourceServiceListOK, error)

	ProvisionerResourceServicePatch(params *ProvisionerResourceServicePatchParams, opts ...ClientOption) (*ProvisionerResourceServicePatchOK, error)

	ProvisionerResourceServiceUpdate(params *ProvisionerResourceServiceUpdateParams, opts ...ClientOption) (*ProvisionerResourceServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ProvisionerResourceServiceCreate creates a provisioner
*/
func (a *Client) ProvisionerResourceServiceCreate(params *ProvisionerResourceServiceCreateParams, opts ...ClientOption) (*ProvisionerResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvisionerResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProvisionerResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/managementclusters/{provisioner.fullName.managementClusterName}/provisioners",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProvisionerResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvisionerResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProvisionerResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProvisionerResourceServiceDelete deletes a provisioner
*/
func (a *Client) ProvisionerResourceServiceDelete(params *ProvisionerResourceServiceDeleteParams, opts ...ClientOption) (*ProvisionerResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvisionerResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProvisionerResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/managementclusters/{fullName.managementClusterName}/provisioners/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProvisionerResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvisionerResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProvisionerResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProvisionerResourceServiceGet gets a provisioner
*/
func (a *Client) ProvisionerResourceServiceGet(params *ProvisionerResourceServiceGetParams, opts ...ClientOption) (*ProvisionerResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvisionerResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProvisionerResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/managementclusters/{fullName.managementClusterName}/provisioners/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProvisionerResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvisionerResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProvisionerResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProvisionerResourceServiceList lists provisioners
*/
func (a *Client) ProvisionerResourceServiceList(params *ProvisionerResourceServiceListParams, opts ...ClientOption) (*ProvisionerResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvisionerResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProvisionerResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/managementclusters/{searchScope.managementClusterName}/provisioners",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProvisionerResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvisionerResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProvisionerResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProvisionerResourceServicePatch patches partially update a provisioner
*/
func (a *Client) ProvisionerResourceServicePatch(params *ProvisionerResourceServicePatchParams, opts ...ClientOption) (*ProvisionerResourceServicePatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvisionerResourceServicePatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProvisionerResourceService_Patch",
		Method:             "PATCH",
		PathPattern:        "/v1alpha1/managementclusters/{fullName.managementClusterName}/provisioners/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProvisionerResourceServicePatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvisionerResourceServicePatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProvisionerResourceServicePatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ProvisionerResourceServiceUpdate updates overwrite a provisioner
*/
func (a *Client) ProvisionerResourceServiceUpdate(params *ProvisionerResourceServiceUpdateParams, opts ...ClientOption) (*ProvisionerResourceServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvisionerResourceServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ProvisionerResourceService_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/managementclusters/{provisioner.fullName.managementClusterName}/provisioners/{provisioner.fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProvisionerResourceServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProvisionerResourceServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProvisionerResourceServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
