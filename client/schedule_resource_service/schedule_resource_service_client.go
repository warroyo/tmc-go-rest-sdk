// Code generated by go-swagger; DO NOT EDIT.

package schedule_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new schedule resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for schedule resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ScheduleResourceServiceCreate(params *ScheduleResourceServiceCreateParams, opts ...ClientOption) (*ScheduleResourceServiceCreateOK, error)

	ScheduleResourceServiceDelete(params *ScheduleResourceServiceDeleteParams, opts ...ClientOption) (*ScheduleResourceServiceDeleteOK, error)

	ScheduleResourceServiceGet(params *ScheduleResourceServiceGetParams, opts ...ClientOption) (*ScheduleResourceServiceGetOK, error)

	ScheduleResourceServiceList(params *ScheduleResourceServiceListParams, opts ...ClientOption) (*ScheduleResourceServiceListOK, error)

	ScheduleResourceServiceUpdate(params *ScheduleResourceServiceUpdateParams, opts ...ClientOption) (*ScheduleResourceServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ScheduleResourceServiceCreate creates a schedule
*/
func (a *Client) ScheduleResourceServiceCreate(params *ScheduleResourceServiceCreateParams, opts ...ClientOption) (*ScheduleResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ScheduleResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/clusters/{schedule.fullName.clusterName}/inspection/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ScheduleResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduleResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScheduleResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ScheduleResourceServiceDelete deletes a schedule
*/
func (a *Client) ScheduleResourceServiceDelete(params *ScheduleResourceServiceDeleteParams, opts ...ClientOption) (*ScheduleResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ScheduleResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/inspection/schedules/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ScheduleResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduleResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScheduleResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ScheduleResourceServiceGet gets a schedule
*/
func (a *Client) ScheduleResourceServiceGet(params *ScheduleResourceServiceGetParams, opts ...ClientOption) (*ScheduleResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ScheduleResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/inspection/schedules/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ScheduleResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduleResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScheduleResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ScheduleResourceServiceList lists schedules
*/
func (a *Client) ScheduleResourceServiceList(params *ScheduleResourceServiceListParams, opts ...ClientOption) (*ScheduleResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ScheduleResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clusters/{searchScope.clusterName}/inspection/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ScheduleResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduleResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScheduleResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ScheduleResourceServiceUpdate updates overwrite a schedule
*/
func (a *Client) ScheduleResourceServiceUpdate(params *ScheduleResourceServiceUpdateParams, opts ...ClientOption) (*ScheduleResourceServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleResourceServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ScheduleResourceService_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/clusters/{schedule.fullName.clusterName}/dataprotection/schedules/{schedule.fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ScheduleResourceServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduleResourceServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScheduleResourceServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
