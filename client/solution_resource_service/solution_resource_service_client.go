// Code generated by go-swagger; DO NOT EDIT.

package solution_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new solution resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for solution resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SolutionResourceServiceCreate(params *SolutionResourceServiceCreateParams, opts ...ClientOption) (*SolutionResourceServiceCreateOK, error)

	SolutionResourceServiceDelete(params *SolutionResourceServiceDeleteParams, opts ...ClientOption) (*SolutionResourceServiceDeleteOK, error)

	SolutionResourceServiceGet(params *SolutionResourceServiceGetParams, opts ...ClientOption) (*SolutionResourceServiceGetOK, error)

	SolutionResourceServiceList(params *SolutionResourceServiceListParams, opts ...ClientOption) (*SolutionResourceServiceListOK, error)

	SolutionResourceServiceUpdate(params *SolutionResourceServiceUpdateParams, opts ...ClientOption) (*SolutionResourceServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
SolutionResourceServiceCreate creates a solution
*/
func (a *Client) SolutionResourceServiceCreate(params *SolutionResourceServiceCreateParams, opts ...ClientOption) (*SolutionResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSolutionResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SolutionResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/tanzupackage/tap/solutions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SolutionResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SolutionResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SolutionResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SolutionResourceServiceDelete deletes a solution
*/
func (a *Client) SolutionResourceServiceDelete(params *SolutionResourceServiceDeleteParams, opts ...ClientOption) (*SolutionResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSolutionResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SolutionResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/tanzupackage/tap/solutions/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SolutionResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SolutionResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SolutionResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SolutionResourceServiceGet gets a solution
*/
func (a *Client) SolutionResourceServiceGet(params *SolutionResourceServiceGetParams, opts ...ClientOption) (*SolutionResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSolutionResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SolutionResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/tanzupackage/tap/solutions/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SolutionResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SolutionResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SolutionResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SolutionResourceServiceList lists solutions
*/
func (a *Client) SolutionResourceServiceList(params *SolutionResourceServiceListParams, opts ...ClientOption) (*SolutionResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSolutionResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SolutionResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/tanzupackage/tap/solutions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SolutionResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SolutionResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SolutionResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SolutionResourceServiceUpdate updates overwrite a solution
*/
func (a *Client) SolutionResourceServiceUpdate(params *SolutionResourceServiceUpdateParams, opts ...ClientOption) (*SolutionResourceServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSolutionResourceServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SolutionResourceService_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/tanzupackage/tap/solutions/{solution.fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SolutionResourceServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SolutionResourceServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SolutionResourceServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
