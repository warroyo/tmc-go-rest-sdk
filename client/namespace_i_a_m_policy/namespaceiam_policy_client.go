// Code generated by go-swagger; DO NOT EDIT.

package namespace_i_a_m_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new namespace i a m policy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for namespace i a m policy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	NamespaceIAMPolicyGet(params *NamespaceIAMPolicyGetParams, opts ...ClientOption) (*NamespaceIAMPolicyGetOK, error)

	NamespaceIAMPolicyPatch(params *NamespaceIAMPolicyPatchParams, opts ...ClientOption) (*NamespaceIAMPolicyPatchOK, error)

	NamespaceIAMPolicyTestPermissions(params *NamespaceIAMPolicyTestPermissionsParams, opts ...ClientOption) (*NamespaceIAMPolicyTestPermissionsOK, error)

	NamespaceIAMPolicyUpdate(params *NamespaceIAMPolicyUpdateParams, opts ...ClientOption) (*NamespaceIAMPolicyUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
NamespaceIAMPolicyGet gets policy for a namespace
*/
func (a *Client) NamespaceIAMPolicyGet(params *NamespaceIAMPolicyGetParams, opts ...ClientOption) (*NamespaceIAMPolicyGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNamespaceIAMPolicyGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NamespaceIAMPolicy_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/namespaces:iam/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NamespaceIAMPolicyGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NamespaceIAMPolicyGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NamespaceIAMPolicyGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NamespaceIAMPolicyPatch patches a namespace policy
*/
func (a *Client) NamespaceIAMPolicyPatch(params *NamespaceIAMPolicyPatchParams, opts ...ClientOption) (*NamespaceIAMPolicyPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNamespaceIAMPolicyPatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NamespaceIAMPolicy_Patch",
		Method:             "PATCH",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/namespaces:iam/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NamespaceIAMPolicyPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NamespaceIAMPolicyPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NamespaceIAMPolicyPatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NamespaceIAMPolicyTestPermissions tests permissions for a namespace
*/
func (a *Client) NamespaceIAMPolicyTestPermissions(params *NamespaceIAMPolicyTestPermissionsParams, opts ...ClientOption) (*NamespaceIAMPolicyTestPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNamespaceIAMPolicyTestPermissionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NamespaceIAMPolicy_TestPermissions",
		Method:             "POST",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/namespaces:iam/{fullName.name}/testPermissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NamespaceIAMPolicyTestPermissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NamespaceIAMPolicyTestPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NamespaceIAMPolicyTestPermissionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
NamespaceIAMPolicyUpdate updates overwrite policy for a namespace deleted if body is empty
*/
func (a *Client) NamespaceIAMPolicyUpdate(params *NamespaceIAMPolicyUpdateParams, opts ...ClientOption) (*NamespaceIAMPolicyUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNamespaceIAMPolicyUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "NamespaceIAMPolicy_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/clusters/{fullName.clusterName}/namespaces:iam/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NamespaceIAMPolicyUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NamespaceIAMPolicyUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*NamespaceIAMPolicyUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
