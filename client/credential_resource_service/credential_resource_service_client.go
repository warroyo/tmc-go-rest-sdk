// Code generated by go-swagger; DO NOT EDIT.

package credential_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new credential resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for credential resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CredentialResourceServiceCreate(params *CredentialResourceServiceCreateParams, opts ...ClientOption) (*CredentialResourceServiceCreateOK, error)

	CredentialResourceServiceDelete(params *CredentialResourceServiceDeleteParams, opts ...ClientOption) (*CredentialResourceServiceDeleteOK, error)

	CredentialResourceServiceGet(params *CredentialResourceServiceGetParams, opts ...ClientOption) (*CredentialResourceServiceGetOK, error)

	CredentialResourceServiceList(params *CredentialResourceServiceListParams, opts ...ClientOption) (*CredentialResourceServiceListOK, error)

	CredentialResourceServicePatch(params *CredentialResourceServicePatchParams, opts ...ClientOption) (*CredentialResourceServicePatchOK, error)

	CredentialResourceServiceUpdate(params *CredentialResourceServiceUpdateParams, opts ...ClientOption) (*CredentialResourceServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CredentialResourceServiceCreate creates a credential
*/
func (a *Client) CredentialResourceServiceCreate(params *CredentialResourceServiceCreateParams, opts ...ClientOption) (*CredentialResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCredentialResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CredentialResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/account/managementcluster/provisioner/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CredentialResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CredentialResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CredentialResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CredentialResourceServiceDelete deletes a credential
*/
func (a *Client) CredentialResourceServiceDelete(params *CredentialResourceServiceDeleteParams, opts ...ClientOption) (*CredentialResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCredentialResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CredentialResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/account/managementcluster/provisioner/credentials/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CredentialResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CredentialResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CredentialResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CredentialResourceServiceGet gets a credential
*/
func (a *Client) CredentialResourceServiceGet(params *CredentialResourceServiceGetParams, opts ...ClientOption) (*CredentialResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCredentialResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CredentialResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/account/managementcluster/provisioner/credentials/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CredentialResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CredentialResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CredentialResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CredentialResourceServiceList lists credentials
*/
func (a *Client) CredentialResourceServiceList(params *CredentialResourceServiceListParams, opts ...ClientOption) (*CredentialResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCredentialResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CredentialResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/account/managementcluster/provisioner/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CredentialResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CredentialResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CredentialResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CredentialResourceServicePatch patches partially update a credential
*/
func (a *Client) CredentialResourceServicePatch(params *CredentialResourceServicePatchParams, opts ...ClientOption) (*CredentialResourceServicePatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCredentialResourceServicePatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CredentialResourceService_Patch",
		Method:             "PATCH",
		PathPattern:        "/v1alpha1/account/managementcluster/provisioner/credentials/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CredentialResourceServicePatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CredentialResourceServicePatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CredentialResourceServicePatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CredentialResourceServiceUpdate updates overwrite a credential
*/
func (a *Client) CredentialResourceServiceUpdate(params *CredentialResourceServiceUpdateParams, opts ...ClientOption) (*CredentialResourceServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCredentialResourceServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CredentialResourceService_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/account/managementcluster/provisioner/credentials/{credential.fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CredentialResourceServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CredentialResourceServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CredentialResourceServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
