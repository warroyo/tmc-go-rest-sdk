// Code generated by go-swagger; DO NOT EDIT.

package enablement_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewEnablementServiceValidateParams creates a new EnablementServiceValidateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewEnablementServiceValidateParams() *EnablementServiceValidateParams {
	return &EnablementServiceValidateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewEnablementServiceValidateParamsWithTimeout creates a new EnablementServiceValidateParams object
// with the ability to set a timeout on a request.
func NewEnablementServiceValidateParamsWithTimeout(timeout time.Duration) *EnablementServiceValidateParams {
	return &EnablementServiceValidateParams{
		timeout: timeout,
	}
}

// NewEnablementServiceValidateParamsWithContext creates a new EnablementServiceValidateParams object
// with the ability to set a context for a request.
func NewEnablementServiceValidateParamsWithContext(ctx context.Context) *EnablementServiceValidateParams {
	return &EnablementServiceValidateParams{
		Context: ctx,
	}
}

// NewEnablementServiceValidateParamsWithHTTPClient creates a new EnablementServiceValidateParams object
// with the ability to set a custom HTTPClient for a request.
func NewEnablementServiceValidateParamsWithHTTPClient(client *http.Client) *EnablementServiceValidateParams {
	return &EnablementServiceValidateParams{
		HTTPClient: client,
	}
}

/*
EnablementServiceValidateParams contains all the parameters to send to the API endpoint

	for the enablement service validate operation.

	Typically these are written to a http.Request.
*/
type EnablementServiceValidateParams struct {

	/* Service.

	    IntegratedService for which validation needs to be performed.

	- SERVICE_UNSPECIFIED: Unspecified Service.
	- ARIA: Aria service.

	    Default: "SERVICE_UNSPECIFIED"
	*/
	Service *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the enablement service validate params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EnablementServiceValidateParams) WithDefaults() *EnablementServiceValidateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the enablement service validate params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EnablementServiceValidateParams) SetDefaults() {
	var (
		serviceDefault = string("SERVICE_UNSPECIFIED")
	)

	val := EnablementServiceValidateParams{
		Service: &serviceDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the enablement service validate params
func (o *EnablementServiceValidateParams) WithTimeout(timeout time.Duration) *EnablementServiceValidateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the enablement service validate params
func (o *EnablementServiceValidateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the enablement service validate params
func (o *EnablementServiceValidateParams) WithContext(ctx context.Context) *EnablementServiceValidateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the enablement service validate params
func (o *EnablementServiceValidateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the enablement service validate params
func (o *EnablementServiceValidateParams) WithHTTPClient(client *http.Client) *EnablementServiceValidateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the enablement service validate params
func (o *EnablementServiceValidateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithService adds the service to the enablement service validate params
func (o *EnablementServiceValidateParams) WithService(service *string) *EnablementServiceValidateParams {
	o.SetService(service)
	return o
}

// SetService adds the service to the enablement service validate params
func (o *EnablementServiceValidateParams) SetService(service *string) {
	o.Service = service
}

// WriteToRequest writes these params to a swagger request
func (o *EnablementServiceValidateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Service != nil {

		// query param service
		var qrService string

		if o.Service != nil {
			qrService = *o.Service
		}
		qService := qrService
		if qService != "" {

			if err := r.SetQueryParam("service", qService); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
