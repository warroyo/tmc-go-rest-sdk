// Code generated by go-swagger; DO NOT EDIT.

package eks_cluster_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewEksClusterResourceServiceGetParams creates a new EksClusterResourceServiceGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewEksClusterResourceServiceGetParams() *EksClusterResourceServiceGetParams {
	return &EksClusterResourceServiceGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewEksClusterResourceServiceGetParamsWithTimeout creates a new EksClusterResourceServiceGetParams object
// with the ability to set a timeout on a request.
func NewEksClusterResourceServiceGetParamsWithTimeout(timeout time.Duration) *EksClusterResourceServiceGetParams {
	return &EksClusterResourceServiceGetParams{
		timeout: timeout,
	}
}

// NewEksClusterResourceServiceGetParamsWithContext creates a new EksClusterResourceServiceGetParams object
// with the ability to set a context for a request.
func NewEksClusterResourceServiceGetParamsWithContext(ctx context.Context) *EksClusterResourceServiceGetParams {
	return &EksClusterResourceServiceGetParams{
		Context: ctx,
	}
}

// NewEksClusterResourceServiceGetParamsWithHTTPClient creates a new EksClusterResourceServiceGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewEksClusterResourceServiceGetParamsWithHTTPClient(client *http.Client) *EksClusterResourceServiceGetParams {
	return &EksClusterResourceServiceGetParams{
		HTTPClient: client,
	}
}

/*
EksClusterResourceServiceGetParams contains all the parameters to send to the API endpoint

	for the eks cluster resource service get operation.

	Typically these are written to a http.Request.
*/
type EksClusterResourceServiceGetParams struct {

	/* FullNameCredentialName.

	   Name of the credential.
	*/
	FullNameCredentialName *string

	/* FullNameName.

	   Name of this cluster.
	*/
	FullNameName string

	/* FullNameOrgID.

	   ID of Organization.
	*/
	FullNameOrgID *string

	/* FullNameRegion.

	   Name of the region.
	*/
	FullNameRegion *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the eks cluster resource service get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EksClusterResourceServiceGetParams) WithDefaults() *EksClusterResourceServiceGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the eks cluster resource service get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EksClusterResourceServiceGetParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the eks cluster resource service get params
func (o *EksClusterResourceServiceGetParams) WithTimeout(timeout time.Duration) *EksClusterResourceServiceGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the eks cluster resource service get params
func (o *EksClusterResourceServiceGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the eks cluster resource service get params
func (o *EksClusterResourceServiceGetParams) WithContext(ctx context.Context) *EksClusterResourceServiceGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the eks cluster resource service get params
func (o *EksClusterResourceServiceGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the eks cluster resource service get params
func (o *EksClusterResourceServiceGetParams) WithHTTPClient(client *http.Client) *EksClusterResourceServiceGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the eks cluster resource service get params
func (o *EksClusterResourceServiceGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFullNameCredentialName adds the fullNameCredentialName to the eks cluster resource service get params
func (o *EksClusterResourceServiceGetParams) WithFullNameCredentialName(fullNameCredentialName *string) *EksClusterResourceServiceGetParams {
	o.SetFullNameCredentialName(fullNameCredentialName)
	return o
}

// SetFullNameCredentialName adds the fullNameCredentialName to the eks cluster resource service get params
func (o *EksClusterResourceServiceGetParams) SetFullNameCredentialName(fullNameCredentialName *string) {
	o.FullNameCredentialName = fullNameCredentialName
}

// WithFullNameName adds the fullNameName to the eks cluster resource service get params
func (o *EksClusterResourceServiceGetParams) WithFullNameName(fullNameName string) *EksClusterResourceServiceGetParams {
	o.SetFullNameName(fullNameName)
	return o
}

// SetFullNameName adds the fullNameName to the eks cluster resource service get params
func (o *EksClusterResourceServiceGetParams) SetFullNameName(fullNameName string) {
	o.FullNameName = fullNameName
}

// WithFullNameOrgID adds the fullNameOrgID to the eks cluster resource service get params
func (o *EksClusterResourceServiceGetParams) WithFullNameOrgID(fullNameOrgID *string) *EksClusterResourceServiceGetParams {
	o.SetFullNameOrgID(fullNameOrgID)
	return o
}

// SetFullNameOrgID adds the fullNameOrgId to the eks cluster resource service get params
func (o *EksClusterResourceServiceGetParams) SetFullNameOrgID(fullNameOrgID *string) {
	o.FullNameOrgID = fullNameOrgID
}

// WithFullNameRegion adds the fullNameRegion to the eks cluster resource service get params
func (o *EksClusterResourceServiceGetParams) WithFullNameRegion(fullNameRegion *string) *EksClusterResourceServiceGetParams {
	o.SetFullNameRegion(fullNameRegion)
	return o
}

// SetFullNameRegion adds the fullNameRegion to the eks cluster resource service get params
func (o *EksClusterResourceServiceGetParams) SetFullNameRegion(fullNameRegion *string) {
	o.FullNameRegion = fullNameRegion
}

// WriteToRequest writes these params to a swagger request
func (o *EksClusterResourceServiceGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FullNameCredentialName != nil {

		// query param fullName.credentialName
		var qrFullNameCredentialName string

		if o.FullNameCredentialName != nil {
			qrFullNameCredentialName = *o.FullNameCredentialName
		}
		qFullNameCredentialName := qrFullNameCredentialName
		if qFullNameCredentialName != "" {

			if err := r.SetQueryParam("fullName.credentialName", qFullNameCredentialName); err != nil {
				return err
			}
		}
	}

	// path param fullName.name
	if err := r.SetPathParam("fullName.name", o.FullNameName); err != nil {
		return err
	}

	if o.FullNameOrgID != nil {

		// query param fullName.orgId
		var qrFullNameOrgID string

		if o.FullNameOrgID != nil {
			qrFullNameOrgID = *o.FullNameOrgID
		}
		qFullNameOrgID := qrFullNameOrgID
		if qFullNameOrgID != "" {

			if err := r.SetQueryParam("fullName.orgId", qFullNameOrgID); err != nil {
				return err
			}
		}
	}

	if o.FullNameRegion != nil {

		// query param fullName.region
		var qrFullNameRegion string

		if o.FullNameRegion != nil {
			qrFullNameRegion = *o.FullNameRegion
		}
		qFullNameRegion := qrFullNameRegion
		if qFullNameRegion != "" {

			if err := r.SetQueryParam("fullName.region", qFullNameRegion); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
