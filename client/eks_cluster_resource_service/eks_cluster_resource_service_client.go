// Code generated by go-swagger; DO NOT EDIT.

package eks_cluster_resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new eks cluster resource service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for eks cluster resource service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	EksClusterResourceServiceCreate(params *EksClusterResourceServiceCreateParams, opts ...ClientOption) (*EksClusterResourceServiceCreateOK, error)

	EksClusterResourceServiceDelete(params *EksClusterResourceServiceDeleteParams, opts ...ClientOption) (*EksClusterResourceServiceDeleteOK, error)

	EksClusterResourceServiceGet(params *EksClusterResourceServiceGetParams, opts ...ClientOption) (*EksClusterResourceServiceGetOK, error)

	EksClusterResourceServiceList(params *EksClusterResourceServiceListParams, opts ...ClientOption) (*EksClusterResourceServiceListOK, error)

	EksClusterResourceServicePatch(params *EksClusterResourceServicePatchParams, opts ...ClientOption) (*EksClusterResourceServicePatchOK, error)

	EksClusterResourceServiceUpdate(params *EksClusterResourceServiceUpdateParams, opts ...ClientOption) (*EksClusterResourceServiceUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
EksClusterResourceServiceCreate creates an eks cluster
*/
func (a *Client) EksClusterResourceServiceCreate(params *EksClusterResourceServiceCreateParams, opts ...ClientOption) (*EksClusterResourceServiceCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEksClusterResourceServiceCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EksClusterResourceService_Create",
		Method:             "POST",
		PathPattern:        "/v1alpha1/eksclusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EksClusterResourceServiceCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EksClusterResourceServiceCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EksClusterResourceServiceCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EksClusterResourceServiceDelete deletes an eks cluster
*/
func (a *Client) EksClusterResourceServiceDelete(params *EksClusterResourceServiceDeleteParams, opts ...ClientOption) (*EksClusterResourceServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEksClusterResourceServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EksClusterResourceService_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1alpha1/eksclusters/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EksClusterResourceServiceDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EksClusterResourceServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EksClusterResourceServiceDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EksClusterResourceServiceGet gets an eks cluster
*/
func (a *Client) EksClusterResourceServiceGet(params *EksClusterResourceServiceGetParams, opts ...ClientOption) (*EksClusterResourceServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEksClusterResourceServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EksClusterResourceService_Get",
		Method:             "GET",
		PathPattern:        "/v1alpha1/eksclusters/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EksClusterResourceServiceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EksClusterResourceServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EksClusterResourceServiceGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EksClusterResourceServiceList lists eks clusters
*/
func (a *Client) EksClusterResourceServiceList(params *EksClusterResourceServiceListParams, opts ...ClientOption) (*EksClusterResourceServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEksClusterResourceServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EksClusterResourceService_List",
		Method:             "GET",
		PathPattern:        "/v1alpha1/eksclusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EksClusterResourceServiceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EksClusterResourceServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EksClusterResourceServiceListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EksClusterResourceServicePatch patches partially update an eks cluster
*/
func (a *Client) EksClusterResourceServicePatch(params *EksClusterResourceServicePatchParams, opts ...ClientOption) (*EksClusterResourceServicePatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEksClusterResourceServicePatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EksClusterResourceService_Patch",
		Method:             "PATCH",
		PathPattern:        "/v1alpha1/eksclusters/{fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EksClusterResourceServicePatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EksClusterResourceServicePatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EksClusterResourceServicePatchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EksClusterResourceServiceUpdate updates overwrite an eks cluster
*/
func (a *Client) EksClusterResourceServiceUpdate(params *EksClusterResourceServiceUpdateParams, opts ...ClientOption) (*EksClusterResourceServiceUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEksClusterResourceServiceUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EksClusterResourceService_Update",
		Method:             "PUT",
		PathPattern:        "/v1alpha1/eksclusters/{eksCluster.fullName.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EksClusterResourceServiceUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EksClusterResourceServiceUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EksClusterResourceServiceUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
