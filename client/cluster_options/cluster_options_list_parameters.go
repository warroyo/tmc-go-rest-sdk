// Code generated by go-swagger; DO NOT EDIT.

package cluster_options

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewClusterOptionsListParams creates a new ClusterOptionsListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewClusterOptionsListParams() *ClusterOptionsListParams {
	return &ClusterOptionsListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewClusterOptionsListParamsWithTimeout creates a new ClusterOptionsListParams object
// with the ability to set a timeout on a request.
func NewClusterOptionsListParamsWithTimeout(timeout time.Duration) *ClusterOptionsListParams {
	return &ClusterOptionsListParams{
		timeout: timeout,
	}
}

// NewClusterOptionsListParamsWithContext creates a new ClusterOptionsListParams object
// with the ability to set a context for a request.
func NewClusterOptionsListParamsWithContext(ctx context.Context) *ClusterOptionsListParams {
	return &ClusterOptionsListParams{
		Context: ctx,
	}
}

// NewClusterOptionsListParamsWithHTTPClient creates a new ClusterOptionsListParams object
// with the ability to set a custom HTTPClient for a request.
func NewClusterOptionsListParamsWithHTTPClient(client *http.Client) *ClusterOptionsListParams {
	return &ClusterOptionsListParams{
		HTTPClient: client,
	}
}

/*
ClusterOptionsListParams contains all the parameters to send to the API endpoint

	for the cluster options list operation.

	Typically these are written to a http.Request.
*/
type ClusterOptionsListParams struct {

	/* CredentialName.

	   Name of this credential.
	*/
	CredentialName *string

	/* ManagementClusterName.

	   Name of the ManagementCluster.
	*/
	ManagementClusterName *string

	/* OrgID.

	   ID of Organization.
	*/
	OrgID *string

	/* ProvisionerName.

	   Name of the Provisioner.
	*/
	ProvisionerName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cluster options list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ClusterOptionsListParams) WithDefaults() *ClusterOptionsListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cluster options list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ClusterOptionsListParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the cluster options list params
func (o *ClusterOptionsListParams) WithTimeout(timeout time.Duration) *ClusterOptionsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cluster options list params
func (o *ClusterOptionsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cluster options list params
func (o *ClusterOptionsListParams) WithContext(ctx context.Context) *ClusterOptionsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cluster options list params
func (o *ClusterOptionsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cluster options list params
func (o *ClusterOptionsListParams) WithHTTPClient(client *http.Client) *ClusterOptionsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cluster options list params
func (o *ClusterOptionsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCredentialName adds the credentialName to the cluster options list params
func (o *ClusterOptionsListParams) WithCredentialName(credentialName *string) *ClusterOptionsListParams {
	o.SetCredentialName(credentialName)
	return o
}

// SetCredentialName adds the credentialName to the cluster options list params
func (o *ClusterOptionsListParams) SetCredentialName(credentialName *string) {
	o.CredentialName = credentialName
}

// WithManagementClusterName adds the managementClusterName to the cluster options list params
func (o *ClusterOptionsListParams) WithManagementClusterName(managementClusterName *string) *ClusterOptionsListParams {
	o.SetManagementClusterName(managementClusterName)
	return o
}

// SetManagementClusterName adds the managementClusterName to the cluster options list params
func (o *ClusterOptionsListParams) SetManagementClusterName(managementClusterName *string) {
	o.ManagementClusterName = managementClusterName
}

// WithOrgID adds the orgID to the cluster options list params
func (o *ClusterOptionsListParams) WithOrgID(orgID *string) *ClusterOptionsListParams {
	o.SetOrgID(orgID)
	return o
}

// SetOrgID adds the orgId to the cluster options list params
func (o *ClusterOptionsListParams) SetOrgID(orgID *string) {
	o.OrgID = orgID
}

// WithProvisionerName adds the provisionerName to the cluster options list params
func (o *ClusterOptionsListParams) WithProvisionerName(provisionerName *string) *ClusterOptionsListParams {
	o.SetProvisionerName(provisionerName)
	return o
}

// SetProvisionerName adds the provisionerName to the cluster options list params
func (o *ClusterOptionsListParams) SetProvisionerName(provisionerName *string) {
	o.ProvisionerName = provisionerName
}

// WriteToRequest writes these params to a swagger request
func (o *ClusterOptionsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CredentialName != nil {

		// query param credentialName
		var qrCredentialName string

		if o.CredentialName != nil {
			qrCredentialName = *o.CredentialName
		}
		qCredentialName := qrCredentialName
		if qCredentialName != "" {

			if err := r.SetQueryParam("credentialName", qCredentialName); err != nil {
				return err
			}
		}
	}

	if o.ManagementClusterName != nil {

		// query param managementClusterName
		var qrManagementClusterName string

		if o.ManagementClusterName != nil {
			qrManagementClusterName = *o.ManagementClusterName
		}
		qManagementClusterName := qrManagementClusterName
		if qManagementClusterName != "" {

			if err := r.SetQueryParam("managementClusterName", qManagementClusterName); err != nil {
				return err
			}
		}
	}

	if o.OrgID != nil {

		// query param orgId
		var qrOrgID string

		if o.OrgID != nil {
			qrOrgID = *o.OrgID
		}
		qOrgID := qrOrgID
		if qOrgID != "" {

			if err := r.SetQueryParam("orgId", qOrgID); err != nil {
				return err
			}
		}
	}

	if o.ProvisionerName != nil {

		// query param provisionerName
		var qrProvisionerName string

		if o.ProvisionerName != nil {
			qrProvisionerName = *o.ProvisionerName
		}
		qProvisionerName := qrProvisionerName
		if qProvisionerName != "" {

			if err := r.SetQueryParam("provisionerName", qProvisionerName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
