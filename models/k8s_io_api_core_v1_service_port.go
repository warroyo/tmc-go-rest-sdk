// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// K8sIoAPICoreV1ServicePort ServicePort contains information on service's port.
//
// swagger:model k8s.io.api.core.v1.ServicePort
type K8sIoAPICoreV1ServicePort struct {

	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. This maps to
	// the 'Name' field in EndpointPort objects.
	// Optional if only one ServicePort is defined on this service.
	// +optional
	Name string `json:"name,omitempty"`

	// The port on each node on which this service is exposed when type=NodePort or LoadBalancer.
	// Usually assigned by the system. If specified, it will be allocated to the service
	// if unused or else creation of the service will fail.
	// Default is to auto-allocate a port if the ServiceType of this Service requires one.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	// +optional
	NodePort int32 `json:"nodePort,omitempty"`

	// The port that will be exposed by this service.
	Port int32 `json:"port,omitempty"`

	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	// +optional
	Protocol string `json:"protocol,omitempty"`

	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	// +optional
	TargetPort *K8sIoApimachineryPkgUtilIntstrIntOrString `json:"targetPort,omitempty"`
}

// Validate validates this k8s io api core v1 service port
func (m *K8sIoAPICoreV1ServicePort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetPort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *K8sIoAPICoreV1ServicePort) validateTargetPort(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetPort) { // not required
		return nil
	}

	if m.TargetPort != nil {
		if err := m.TargetPort.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetPort")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetPort")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this k8s io api core v1 service port based on the context it is used
func (m *K8sIoAPICoreV1ServicePort) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTargetPort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *K8sIoAPICoreV1ServicePort) contextValidateTargetPort(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetPort != nil {
		if err := m.TargetPort.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetPort")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetPort")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *K8sIoAPICoreV1ServicePort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *K8sIoAPICoreV1ServicePort) UnmarshalBinary(b []byte) error {
	var res K8sIoAPICoreV1ServicePort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
