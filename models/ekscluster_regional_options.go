// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EksclusterRegionalOptions AWS specific regional options.
//
// swagger:model ekscluster.RegionalOptions
type EksclusterRegionalOptions struct {

	// List of ami types.
	AmiTypeOptions []*EksclusterAmiTypeOptions `json:"amiTypeOptions"`

	// image options.
	ImageOptions []*EksclusterImageOptions `json:"imageOptions"`

	// Launch template options.
	LaunchTemplateOptions []*EksclusterLaunchTemplateOptions `json:"launchTemplateOptions"`

	// Name of the region.
	RegionName string `json:"regionName,omitempty"`

	// List of AWS SSH key name.
	SSHKeyNames []string `json:"sshKeyNames"`

	// List of VPCs.
	VpcOptions []*EksclusterVPCOptions `json:"vpcOptions"`
}

// Validate validates this ekscluster regional options
func (m *EksclusterRegionalOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmiTypeOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLaunchTemplateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpcOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EksclusterRegionalOptions) validateAmiTypeOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.AmiTypeOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.AmiTypeOptions); i++ {
		if swag.IsZero(m.AmiTypeOptions[i]) { // not required
			continue
		}

		if m.AmiTypeOptions[i] != nil {
			if err := m.AmiTypeOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("amiTypeOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("amiTypeOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EksclusterRegionalOptions) validateImageOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.ImageOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.ImageOptions); i++ {
		if swag.IsZero(m.ImageOptions[i]) { // not required
			continue
		}

		if m.ImageOptions[i] != nil {
			if err := m.ImageOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("imageOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("imageOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EksclusterRegionalOptions) validateLaunchTemplateOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.LaunchTemplateOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.LaunchTemplateOptions); i++ {
		if swag.IsZero(m.LaunchTemplateOptions[i]) { // not required
			continue
		}

		if m.LaunchTemplateOptions[i] != nil {
			if err := m.LaunchTemplateOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("launchTemplateOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("launchTemplateOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EksclusterRegionalOptions) validateVpcOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.VpcOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.VpcOptions); i++ {
		if swag.IsZero(m.VpcOptions[i]) { // not required
			continue
		}

		if m.VpcOptions[i] != nil {
			if err := m.VpcOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vpcOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vpcOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this ekscluster regional options based on the context it is used
func (m *EksclusterRegionalOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmiTypeOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImageOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLaunchTemplateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVpcOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EksclusterRegionalOptions) contextValidateAmiTypeOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AmiTypeOptions); i++ {

		if m.AmiTypeOptions[i] != nil {
			if err := m.AmiTypeOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("amiTypeOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("amiTypeOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EksclusterRegionalOptions) contextValidateImageOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ImageOptions); i++ {

		if m.ImageOptions[i] != nil {
			if err := m.ImageOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("imageOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("imageOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EksclusterRegionalOptions) contextValidateLaunchTemplateOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LaunchTemplateOptions); i++ {

		if m.LaunchTemplateOptions[i] != nil {
			if err := m.LaunchTemplateOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("launchTemplateOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("launchTemplateOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EksclusterRegionalOptions) contextValidateVpcOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VpcOptions); i++ {

		if m.VpcOptions[i] != nil {
			if err := m.VpcOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vpcOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vpcOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EksclusterRegionalOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EksclusterRegionalOptions) UnmarshalBinary(b []byte) error {
	var res EksclusterRegionalOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
