// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterPhase Phase of the cluster resource.
//
//   - PHASE_UNSPECIFIED: Unspecified phase.
//   - PENDING: Resource is pending processing.
//   - PROCESSING: Processing the resource.
//   - CREATING: Resource is being created.
//   - READY: Resource is ready state.
//   - DELETING: Resource is being deleted.
//   - ERROR: Error in processing.
//   - DETACHING: Resource is being detached.
//   - UPGRADING: An upgrade is in progress.
//   - UPGRADE_FAILED: An upgrade has failed.
//   - UPDATING: This phase is used to reflect the UPDATING state of TanzuKubernetescluster in TKG Service.
//   - OVER_LIMIT: This phase indicates cluster has crossed resource limits set for the organization.
//
// For such cluster we no longer sync data back to TMC.
//   - READY_TO_ATTACH: Resource is ready to be attached.
//   - ATTACH_COMPLETE: Attach resource has been applied on the cluster.
//
// swagger:model cluster.Phase
type ClusterPhase string

func NewClusterPhase(value ClusterPhase) *ClusterPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClusterPhase.
func (m ClusterPhase) Pointer() *ClusterPhase {
	return &m
}

const (

	// ClusterPhasePHASEUNSPECIFIED captures enum value "PHASE_UNSPECIFIED"
	ClusterPhasePHASEUNSPECIFIED ClusterPhase = "PHASE_UNSPECIFIED"

	// ClusterPhasePENDING captures enum value "PENDING"
	ClusterPhasePENDING ClusterPhase = "PENDING"

	// ClusterPhasePROCESSING captures enum value "PROCESSING"
	ClusterPhasePROCESSING ClusterPhase = "PROCESSING"

	// ClusterPhaseCREATING captures enum value "CREATING"
	ClusterPhaseCREATING ClusterPhase = "CREATING"

	// ClusterPhaseREADY captures enum value "READY"
	ClusterPhaseREADY ClusterPhase = "READY"

	// ClusterPhaseDELETING captures enum value "DELETING"
	ClusterPhaseDELETING ClusterPhase = "DELETING"

	// ClusterPhaseERROR captures enum value "ERROR"
	ClusterPhaseERROR ClusterPhase = "ERROR"

	// ClusterPhaseDETACHING captures enum value "DETACHING"
	ClusterPhaseDETACHING ClusterPhase = "DETACHING"

	// ClusterPhaseUPGRADING captures enum value "UPGRADING"
	ClusterPhaseUPGRADING ClusterPhase = "UPGRADING"

	// ClusterPhaseUPGRADEFAILED captures enum value "UPGRADE_FAILED"
	ClusterPhaseUPGRADEFAILED ClusterPhase = "UPGRADE_FAILED"

	// ClusterPhaseUPDATING captures enum value "UPDATING"
	ClusterPhaseUPDATING ClusterPhase = "UPDATING"

	// ClusterPhaseOVERLIMIT captures enum value "OVER_LIMIT"
	ClusterPhaseOVERLIMIT ClusterPhase = "OVER_LIMIT"

	// ClusterPhaseREADYTOATTACH captures enum value "READY_TO_ATTACH"
	ClusterPhaseREADYTOATTACH ClusterPhase = "READY_TO_ATTACH"

	// ClusterPhaseATTACHCOMPLETE captures enum value "ATTACH_COMPLETE"
	ClusterPhaseATTACHCOMPLETE ClusterPhase = "ATTACH_COMPLETE"
)

// for schema
var clusterPhaseEnum []interface{}

func init() {
	var res []ClusterPhase
	if err := json.Unmarshal([]byte(`["PHASE_UNSPECIFIED","PENDING","PROCESSING","CREATING","READY","DELETING","ERROR","DETACHING","UPGRADING","UPGRADE_FAILED","UPDATING","OVER_LIMIT","READY_TO_ATTACH","ATTACH_COMPLETE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterPhaseEnum = append(clusterPhaseEnum, v)
	}
}

func (m ClusterPhase) validateClusterPhaseEnum(path, location string, value ClusterPhase) error {
	if err := validate.EnumCase(path, location, value, clusterPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster phase
func (m ClusterPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cluster phase based on context it is used
func (m ClusterPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
