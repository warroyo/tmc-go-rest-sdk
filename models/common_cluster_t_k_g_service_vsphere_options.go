// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CommonClusterTKGServiceVsphereOptions TKG service vsphere provider specific options.
//
// swagger:model common.cluster.TKGServiceVsphereOptions
type CommonClusterTKGServiceVsphereOptions struct {

	// List of available availability zones on TKG Service management cluster for creating nodepools with failure domains.
	AvailabilityZones []string `json:"availabilityZones"`

	// List of available storage classes on a TKG Service management cluster.
	StorageClasses []*CommonClusterStorageClass `json:"storageClasses"`

	// Flag to denote support for multiple nodepools in a TKGS workload cluster.
	SupportsMultipleNodepools bool `json:"supportsMultipleNodepools,omitempty"`

	// TKC version of TKG Service.
	TkcVersion string `json:"tkcVersion,omitempty"`

	// List of supported virtual machine classes on a TKG Service management cluster.
	VirtualMachineClasses []*CommonClusterVirtualMachineClass `json:"virtualMachineClasses"`

	// List of available virtual machine images on a TKG Service management cluster.
	VirtualMachineImages []*CommonClusterVirtualMachineImage `json:"virtualMachineImages"`
}

// Validate validates this common cluster t k g service vsphere options
func (m *CommonClusterTKGServiceVsphereOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStorageClasses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualMachineClasses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualMachineImages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonClusterTKGServiceVsphereOptions) validateStorageClasses(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageClasses) { // not required
		return nil
	}

	for i := 0; i < len(m.StorageClasses); i++ {
		if swag.IsZero(m.StorageClasses[i]) { // not required
			continue
		}

		if m.StorageClasses[i] != nil {
			if err := m.StorageClasses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storageClasses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storageClasses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonClusterTKGServiceVsphereOptions) validateVirtualMachineClasses(formats strfmt.Registry) error {
	if swag.IsZero(m.VirtualMachineClasses) { // not required
		return nil
	}

	for i := 0; i < len(m.VirtualMachineClasses); i++ {
		if swag.IsZero(m.VirtualMachineClasses[i]) { // not required
			continue
		}

		if m.VirtualMachineClasses[i] != nil {
			if err := m.VirtualMachineClasses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtualMachineClasses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtualMachineClasses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonClusterTKGServiceVsphereOptions) validateVirtualMachineImages(formats strfmt.Registry) error {
	if swag.IsZero(m.VirtualMachineImages) { // not required
		return nil
	}

	for i := 0; i < len(m.VirtualMachineImages); i++ {
		if swag.IsZero(m.VirtualMachineImages[i]) { // not required
			continue
		}

		if m.VirtualMachineImages[i] != nil {
			if err := m.VirtualMachineImages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtualMachineImages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtualMachineImages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this common cluster t k g service vsphere options based on the context it is used
func (m *CommonClusterTKGServiceVsphereOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageClasses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVirtualMachineClasses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVirtualMachineImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonClusterTKGServiceVsphereOptions) contextValidateStorageClasses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StorageClasses); i++ {

		if m.StorageClasses[i] != nil {
			if err := m.StorageClasses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storageClasses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storageClasses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonClusterTKGServiceVsphereOptions) contextValidateVirtualMachineClasses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VirtualMachineClasses); i++ {

		if m.VirtualMachineClasses[i] != nil {
			if err := m.VirtualMachineClasses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtualMachineClasses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtualMachineClasses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonClusterTKGServiceVsphereOptions) contextValidateVirtualMachineImages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VirtualMachineImages); i++ {

		if m.VirtualMachineImages[i] != nil {
			if err := m.VirtualMachineImages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtualMachineImages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtualMachineImages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonClusterTKGServiceVsphereOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonClusterTKGServiceVsphereOptions) UnmarshalBinary(b []byte) error {
	var res CommonClusterTKGServiceVsphereOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
