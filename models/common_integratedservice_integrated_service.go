// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CommonIntegratedserviceIntegratedService IntegratedService service for which integrations are enabled.
//
//   - SERVICE_UNSPECIFIED: Unspecified Service.
//   - ARIA: Aria service.
//
// swagger:model common.integratedservice.IntegratedService
type CommonIntegratedserviceIntegratedService string

func NewCommonIntegratedserviceIntegratedService(value CommonIntegratedserviceIntegratedService) *CommonIntegratedserviceIntegratedService {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CommonIntegratedserviceIntegratedService.
func (m CommonIntegratedserviceIntegratedService) Pointer() *CommonIntegratedserviceIntegratedService {
	return &m
}

const (

	// CommonIntegratedserviceIntegratedServiceSERVICEUNSPECIFIED captures enum value "SERVICE_UNSPECIFIED"
	CommonIntegratedserviceIntegratedServiceSERVICEUNSPECIFIED CommonIntegratedserviceIntegratedService = "SERVICE_UNSPECIFIED"

	// CommonIntegratedserviceIntegratedServiceARIA captures enum value "ARIA"
	CommonIntegratedserviceIntegratedServiceARIA CommonIntegratedserviceIntegratedService = "ARIA"
)

// for schema
var commonIntegratedserviceIntegratedServiceEnum []interface{}

func init() {
	var res []CommonIntegratedserviceIntegratedService
	if err := json.Unmarshal([]byte(`["SERVICE_UNSPECIFIED","ARIA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonIntegratedserviceIntegratedServiceEnum = append(commonIntegratedserviceIntegratedServiceEnum, v)
	}
}

func (m CommonIntegratedserviceIntegratedService) validateCommonIntegratedserviceIntegratedServiceEnum(path, location string, value CommonIntegratedserviceIntegratedService) error {
	if err := validate.EnumCase(path, location, value, commonIntegratedserviceIntegratedServiceEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this common integratedservice integrated service
func (m CommonIntegratedserviceIntegratedService) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCommonIntegratedserviceIntegratedServiceEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this common integratedservice integrated service based on context it is used
func (m CommonIntegratedserviceIntegratedService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
