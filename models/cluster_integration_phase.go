// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterIntegrationPhase Integration Lifecycle Phase.
//
//   - PHASE_UNSPECIFIED: Unspecified  phase.
//   - CREATING: CREATING phase when process for adding integration to cluster is started.
//   - UPDATING: Updating phase when need to update configuration for the added integration.
//   - READY: READY phase when integration is added to cluster.
//   - ERROR: Error phase when there is any issue during addition/update/deletion of the integration.
//   - DELETING: DELETING phase when when process for removing integration to cluster is started.
//   - PENDING: PENDING phase when the process is waiting for changes in the cluster after addition/update of the integration.
//
// swagger:model cluster.integration.Phase
type ClusterIntegrationPhase string

func NewClusterIntegrationPhase(value ClusterIntegrationPhase) *ClusterIntegrationPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClusterIntegrationPhase.
func (m ClusterIntegrationPhase) Pointer() *ClusterIntegrationPhase {
	return &m
}

const (

	// ClusterIntegrationPhasePHASEUNSPECIFIED captures enum value "PHASE_UNSPECIFIED"
	ClusterIntegrationPhasePHASEUNSPECIFIED ClusterIntegrationPhase = "PHASE_UNSPECIFIED"

	// ClusterIntegrationPhaseCREATING captures enum value "CREATING"
	ClusterIntegrationPhaseCREATING ClusterIntegrationPhase = "CREATING"

	// ClusterIntegrationPhaseUPDATING captures enum value "UPDATING"
	ClusterIntegrationPhaseUPDATING ClusterIntegrationPhase = "UPDATING"

	// ClusterIntegrationPhaseREADY captures enum value "READY"
	ClusterIntegrationPhaseREADY ClusterIntegrationPhase = "READY"

	// ClusterIntegrationPhaseERROR captures enum value "ERROR"
	ClusterIntegrationPhaseERROR ClusterIntegrationPhase = "ERROR"

	// ClusterIntegrationPhaseDELETING captures enum value "DELETING"
	ClusterIntegrationPhaseDELETING ClusterIntegrationPhase = "DELETING"

	// ClusterIntegrationPhasePENDING captures enum value "PENDING"
	ClusterIntegrationPhasePENDING ClusterIntegrationPhase = "PENDING"
)

// for schema
var clusterIntegrationPhaseEnum []interface{}

func init() {
	var res []ClusterIntegrationPhase
	if err := json.Unmarshal([]byte(`["PHASE_UNSPECIFIED","CREATING","UPDATING","READY","ERROR","DELETING","PENDING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterIntegrationPhaseEnum = append(clusterIntegrationPhaseEnum, v)
	}
}

func (m ClusterIntegrationPhase) validateClusterIntegrationPhaseEnum(path, location string, value ClusterIntegrationPhase) error {
	if err := validate.EnumCase(path, location, value, clusterIntegrationPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster integration phase
func (m ClusterIntegrationPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterIntegrationPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cluster integration phase based on context it is used
func (m ClusterIntegrationPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
