// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// K8sIoApimachineryPkgApisMetaV1Fields Fields stores a set of fields in a data structure like a Trie.
// To understand how this is used, see: https://github.com/kubernetes-sigs/structured-merge-diff
//
// swagger:model k8s.io.apimachinery.pkg.apis.meta.v1.Fields
type K8sIoApimachineryPkgApisMetaV1Fields struct {

	// Map stores a set of fields in a data structure like a Trie.
	//
	// Each key is either a '.' representing the field itself, and will always map to an empty set,
	// or a string representing a sub-field or item. The string will follow one of these four formats:
	// 'f:<name>', where <name> is the name of a field in a struct, or key in a map
	// 'v:<value>', where <value> is the exact json formatted value of a list item
	// 'i:<index>', where <index> is position of a item in a list
	// 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values
	// If a key maps to an empty Fields value, the field that key represents is part of the set.
	//
	// The exact format is defined in k8s.io/apiserver/pkg/endpoints/handlers/fieldmanager/internal
	Map map[string]K8sIoApimachineryPkgApisMetaV1Fields `json:"map,omitempty"`
}

// Validate validates this k8s io apimachinery pkg apis meta v1 fields
func (m *K8sIoApimachineryPkgApisMetaV1Fields) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *K8sIoApimachineryPkgApisMetaV1Fields) validateMap(formats strfmt.Registry) error {
	if swag.IsZero(m.Map) { // not required
		return nil
	}

	for k := range m.Map {

		if err := validate.Required("map"+"."+k, "body", m.Map[k]); err != nil {
			return err
		}
		if val, ok := m.Map[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("map" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("map" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this k8s io apimachinery pkg apis meta v1 fields based on the context it is used
func (m *K8sIoApimachineryPkgApisMetaV1Fields) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *K8sIoApimachineryPkgApisMetaV1Fields) contextValidateMap(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Map {

		if val, ok := m.Map[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *K8sIoApimachineryPkgApisMetaV1Fields) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *K8sIoApimachineryPkgApisMetaV1Fields) UnmarshalBinary(b []byte) error {
	var res K8sIoApimachineryPkgApisMetaV1Fields
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
