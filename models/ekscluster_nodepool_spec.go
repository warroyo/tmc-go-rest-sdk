// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EksclusterNodepoolSpec Spec for the cluster nodepool.
//
// swagger:model ekscluster.nodepool.Spec
type EksclusterNodepoolSpec struct {

	// AMI info for the nodepool.
	AmiInfo *EksclusterNodepoolAmiInfo `json:"amiInfo,omitempty"`

	// AMI type.
	AmiType string `json:"amiType,omitempty"`

	// ARN of the nodepool in EKS.
	Arn string `json:"arn,omitempty"`

	// Capacity type.
	CapacityType string `json:"capacityType,omitempty"`

	// Nodepool instance types.
	// The potential values could be found using cluster:options api.
	InstanceTypes []string `json:"instanceTypes"`

	// Launch template for the nodepool.
	LaunchTemplate *EksclusterNodepoolLaunchTemplate `json:"launchTemplate,omitempty"`

	// Kubernetes node labels.
	NodeLabels map[string]string `json:"nodeLabels,omitempty"`

	// Release version of the AMI.
	ReleaseVersion string `json:"releaseVersion,omitempty"`

	// Remote access to worker nodes.
	RemoteAccess *EksclusterNodepoolRemoteAccess `json:"remoteAccess,omitempty"`

	// ARN of the IAM role that provides permissions for the Kubernetes nodepool to make calls to AWS API operations.
	RoleArn string `json:"roleArn,omitempty"`

	// Root disk size in GiB. Defaults to 20 GiB.
	RootDiskSize int32 `json:"rootDiskSize,omitempty"`

	// Nodepool scaling config.
	ScalingConfig *EksclusterNodepoolScalingConfig `json:"scalingConfig,omitempty"`

	// Subnets required for the nodepool.
	SubnetIds []string `json:"subnetIds"`

	// EKS specific tags.
	Tags map[string]string `json:"tags,omitempty"`

	// If specified, the node's taints.
	Taints []*EksclusterNodepoolTaint `json:"taints"`

	// Update config for the nodepool.
	UpdateConfig *EksclusterNodepoolUpdateConfig `json:"updateConfig,omitempty"`
}

// Validate validates this ekscluster nodepool spec
func (m *EksclusterNodepoolSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmiInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLaunchTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScalingConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EksclusterNodepoolSpec) validateAmiInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AmiInfo) { // not required
		return nil
	}

	if m.AmiInfo != nil {
		if err := m.AmiInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amiInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amiInfo")
			}
			return err
		}
	}

	return nil
}

func (m *EksclusterNodepoolSpec) validateLaunchTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.LaunchTemplate) { // not required
		return nil
	}

	if m.LaunchTemplate != nil {
		if err := m.LaunchTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("launchTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("launchTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *EksclusterNodepoolSpec) validateRemoteAccess(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteAccess) { // not required
		return nil
	}

	if m.RemoteAccess != nil {
		if err := m.RemoteAccess.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remoteAccess")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remoteAccess")
			}
			return err
		}
	}

	return nil
}

func (m *EksclusterNodepoolSpec) validateScalingConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ScalingConfig) { // not required
		return nil
	}

	if m.ScalingConfig != nil {
		if err := m.ScalingConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scalingConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scalingConfig")
			}
			return err
		}
	}

	return nil
}

func (m *EksclusterNodepoolSpec) validateTaints(formats strfmt.Registry) error {
	if swag.IsZero(m.Taints) { // not required
		return nil
	}

	for i := 0; i < len(m.Taints); i++ {
		if swag.IsZero(m.Taints[i]) { // not required
			continue
		}

		if m.Taints[i] != nil {
			if err := m.Taints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EksclusterNodepoolSpec) validateUpdateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateConfig) { // not required
		return nil
	}

	if m.UpdateConfig != nil {
		if err := m.UpdateConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ekscluster nodepool spec based on the context it is used
func (m *EksclusterNodepoolSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmiInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLaunchTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemoteAccess(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScalingConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EksclusterNodepoolSpec) contextValidateAmiInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.AmiInfo != nil {
		if err := m.AmiInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amiInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amiInfo")
			}
			return err
		}
	}

	return nil
}

func (m *EksclusterNodepoolSpec) contextValidateLaunchTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.LaunchTemplate != nil {
		if err := m.LaunchTemplate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("launchTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("launchTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *EksclusterNodepoolSpec) contextValidateRemoteAccess(ctx context.Context, formats strfmt.Registry) error {

	if m.RemoteAccess != nil {
		if err := m.RemoteAccess.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remoteAccess")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remoteAccess")
			}
			return err
		}
	}

	return nil
}

func (m *EksclusterNodepoolSpec) contextValidateScalingConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ScalingConfig != nil {
		if err := m.ScalingConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scalingConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scalingConfig")
			}
			return err
		}
	}

	return nil
}

func (m *EksclusterNodepoolSpec) contextValidateTaints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Taints); i++ {

		if m.Taints[i] != nil {
			if err := m.Taints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EksclusterNodepoolSpec) contextValidateUpdateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.UpdateConfig != nil {
		if err := m.UpdateConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EksclusterNodepoolSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EksclusterNodepoolSpec) UnmarshalBinary(b []byte) error {
	var res EksclusterNodepoolSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
