// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AccountCredentialStatusPhase The overall phase of a credential.
//
//   - PHASE_UNSPECIFIED: Unspecified phase.
//   - CREATED: The credential is created and can be used.
//   - VALIDATING: The credential's capabilities are being validated by the intended service.
//
// Credentials can be used even if they have not been validated- this phase
// is set by the intended service if it validates credentials.
//   - VALID: The credential satisfies the intended service's requirements.
//   - INVALID: The credential does not satisfy the intended service's requirements.
//
// Invalid credentials might require user action to fix their permissions- this information
// is provided by the intended service.
//   - ERROR: An error occurred while the credential was being created or validated.
//   - DELETING: The credential clean up has begun.
//   - DELETED: The credential clean up has completed and will be removed from TMC.
//   - UPDATING: The credential update has begun.
//
// swagger:model account.credential.Status.Phase
type AccountCredentialStatusPhase string

func NewAccountCredentialStatusPhase(value AccountCredentialStatusPhase) *AccountCredentialStatusPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AccountCredentialStatusPhase.
func (m AccountCredentialStatusPhase) Pointer() *AccountCredentialStatusPhase {
	return &m
}

const (

	// AccountCredentialStatusPhasePHASEUNSPECIFIED captures enum value "PHASE_UNSPECIFIED"
	AccountCredentialStatusPhasePHASEUNSPECIFIED AccountCredentialStatusPhase = "PHASE_UNSPECIFIED"

	// AccountCredentialStatusPhaseCREATED captures enum value "CREATED"
	AccountCredentialStatusPhaseCREATED AccountCredentialStatusPhase = "CREATED"

	// AccountCredentialStatusPhaseVALIDATING captures enum value "VALIDATING"
	AccountCredentialStatusPhaseVALIDATING AccountCredentialStatusPhase = "VALIDATING"

	// AccountCredentialStatusPhaseVALID captures enum value "VALID"
	AccountCredentialStatusPhaseVALID AccountCredentialStatusPhase = "VALID"

	// AccountCredentialStatusPhaseINVALID captures enum value "INVALID"
	AccountCredentialStatusPhaseINVALID AccountCredentialStatusPhase = "INVALID"

	// AccountCredentialStatusPhaseERROR captures enum value "ERROR"
	AccountCredentialStatusPhaseERROR AccountCredentialStatusPhase = "ERROR"

	// AccountCredentialStatusPhaseDELETING captures enum value "DELETING"
	AccountCredentialStatusPhaseDELETING AccountCredentialStatusPhase = "DELETING"

	// AccountCredentialStatusPhaseDELETED captures enum value "DELETED"
	AccountCredentialStatusPhaseDELETED AccountCredentialStatusPhase = "DELETED"

	// AccountCredentialStatusPhaseUPDATING captures enum value "UPDATING"
	AccountCredentialStatusPhaseUPDATING AccountCredentialStatusPhase = "UPDATING"
)

// for schema
var accountCredentialStatusPhaseEnum []interface{}

func init() {
	var res []AccountCredentialStatusPhase
	if err := json.Unmarshal([]byte(`["PHASE_UNSPECIFIED","CREATED","VALIDATING","VALID","INVALID","ERROR","DELETING","DELETED","UPDATING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountCredentialStatusPhaseEnum = append(accountCredentialStatusPhaseEnum, v)
	}
}

func (m AccountCredentialStatusPhase) validateAccountCredentialStatusPhaseEnum(path, location string, value AccountCredentialStatusPhase) error {
	if err := validate.EnumCase(path, location, value, accountCredentialStatusPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this account credential status phase
func (m AccountCredentialStatusPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAccountCredentialStatusPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this account credential status phase based on context it is used
func (m AccountCredentialStatusPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
