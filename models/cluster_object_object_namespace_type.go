// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterObjectObjectNamespaceType Enum for namespace type.
//
//   - TYPE_UNSPECIFIED: Default namespace type.
//   - MANAGED: MANAGED namespace type.
//   - UNMANAGED: UNMANAGED namespace type.
//
// swagger:model cluster.object.ObjectNamespace.Type
type ClusterObjectObjectNamespaceType string

func NewClusterObjectObjectNamespaceType(value ClusterObjectObjectNamespaceType) *ClusterObjectObjectNamespaceType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClusterObjectObjectNamespaceType.
func (m ClusterObjectObjectNamespaceType) Pointer() *ClusterObjectObjectNamespaceType {
	return &m
}

const (

	// ClusterObjectObjectNamespaceTypeTYPEUNSPECIFIED captures enum value "TYPE_UNSPECIFIED"
	ClusterObjectObjectNamespaceTypeTYPEUNSPECIFIED ClusterObjectObjectNamespaceType = "TYPE_UNSPECIFIED"

	// ClusterObjectObjectNamespaceTypeMANAGED captures enum value "MANAGED"
	ClusterObjectObjectNamespaceTypeMANAGED ClusterObjectObjectNamespaceType = "MANAGED"

	// ClusterObjectObjectNamespaceTypeUNMANAGED captures enum value "UNMANAGED"
	ClusterObjectObjectNamespaceTypeUNMANAGED ClusterObjectObjectNamespaceType = "UNMANAGED"
)

// for schema
var clusterObjectObjectNamespaceTypeEnum []interface{}

func init() {
	var res []ClusterObjectObjectNamespaceType
	if err := json.Unmarshal([]byte(`["TYPE_UNSPECIFIED","MANAGED","UNMANAGED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterObjectObjectNamespaceTypeEnum = append(clusterObjectObjectNamespaceTypeEnum, v)
	}
}

func (m ClusterObjectObjectNamespaceType) validateClusterObjectObjectNamespaceTypeEnum(path, location string, value ClusterObjectObjectNamespaceType) error {
	if err := validate.EnumCase(path, location, value, clusterObjectObjectNamespaceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster object object namespace type
func (m ClusterObjectObjectNamespaceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterObjectObjectNamespaceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cluster object object namespace type based on context it is used
func (m ClusterObjectObjectNamespaceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
