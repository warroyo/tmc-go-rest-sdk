// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PolicyTemplatePolicyUpdateStrategyType PolicyUpdateStrategyType defines strategies for updating policies after a policy template update.
//
//   - POLICY_UPDATE_STRATEGY_TYPE_UNSPECIFIED: UNSPECIFIED policy update strategy (default).
//
// Updates will not be allowed when this strategy is selected.
//   - INPLACE_UPDATE: In-place policy update strategy.
//
// Existing Template will be forcibly updated without creating a new version.
// There will be no changes to the policies using the template.
// Warning: When using this strategy, make sure that the updated template does not
// adversely affect the existing policies.
//
// swagger:model policy.template.PolicyUpdateStrategyType
type PolicyTemplatePolicyUpdateStrategyType string

func NewPolicyTemplatePolicyUpdateStrategyType(value PolicyTemplatePolicyUpdateStrategyType) *PolicyTemplatePolicyUpdateStrategyType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PolicyTemplatePolicyUpdateStrategyType.
func (m PolicyTemplatePolicyUpdateStrategyType) Pointer() *PolicyTemplatePolicyUpdateStrategyType {
	return &m
}

const (

	// PolicyTemplatePolicyUpdateStrategyTypePOLICYUPDATESTRATEGYTYPEUNSPECIFIED captures enum value "POLICY_UPDATE_STRATEGY_TYPE_UNSPECIFIED"
	PolicyTemplatePolicyUpdateStrategyTypePOLICYUPDATESTRATEGYTYPEUNSPECIFIED PolicyTemplatePolicyUpdateStrategyType = "POLICY_UPDATE_STRATEGY_TYPE_UNSPECIFIED"

	// PolicyTemplatePolicyUpdateStrategyTypeINPLACEUPDATE captures enum value "INPLACE_UPDATE"
	PolicyTemplatePolicyUpdateStrategyTypeINPLACEUPDATE PolicyTemplatePolicyUpdateStrategyType = "INPLACE_UPDATE"
)

// for schema
var policyTemplatePolicyUpdateStrategyTypeEnum []interface{}

func init() {
	var res []PolicyTemplatePolicyUpdateStrategyType
	if err := json.Unmarshal([]byte(`["POLICY_UPDATE_STRATEGY_TYPE_UNSPECIFIED","INPLACE_UPDATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyTemplatePolicyUpdateStrategyTypeEnum = append(policyTemplatePolicyUpdateStrategyTypeEnum, v)
	}
}

func (m PolicyTemplatePolicyUpdateStrategyType) validatePolicyTemplatePolicyUpdateStrategyTypeEnum(path, location string, value PolicyTemplatePolicyUpdateStrategyType) error {
	if err := validate.EnumCase(path, location, value, policyTemplatePolicyUpdateStrategyTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this policy template policy update strategy type
func (m PolicyTemplatePolicyUpdateStrategyType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePolicyTemplatePolicyUpdateStrategyTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this policy template policy update strategy type based on context it is used
func (m PolicyTemplatePolicyUpdateStrategyType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
