// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// K8sIoAPICoreV1ContainerStatus ContainerStatus contains details for the current status of this container.
//
// swagger:model k8s.io.api.core.v1.ContainerStatus
type K8sIoAPICoreV1ContainerStatus struct {

	// Container's ID in the format 'docker://<container_id>'.
	// +optional
	ContainerID string `json:"containerID,omitempty"`

	// The image the container is running.
	// More info: https://kubernetes.io/docs/concepts/containers/images
	// TODO(dchen1107): Which image the container is running with?
	Image string `json:"image,omitempty"`

	// ImageID of the container's image.
	ImageID string `json:"imageID,omitempty"`

	// Details about the container's last termination condition.
	// +optional
	LastState *K8sIoAPICoreV1ContainerState `json:"lastState,omitempty"`

	// This must be a DNS_LABEL. Each container in a pod must have a unique name.
	// Cannot be updated.
	Name string `json:"name,omitempty"`

	// Specifies whether the container has passed its readiness probe.
	Ready bool `json:"ready,omitempty"`

	// The number of times the container has been restarted, currently based on
	// the number of dead containers that have not yet been removed.
	// Note that this is calculated from dead containers. But those containers are subject to
	// garbage collection. This value will get capped at 5 by GC.
	RestartCount int32 `json:"restartCount,omitempty"`

	// Details about the container's current condition.
	// +optional
	State *K8sIoAPICoreV1ContainerState `json:"state,omitempty"`
}

// Validate validates this k8s io api core v1 container status
func (m *K8sIoAPICoreV1ContainerStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *K8sIoAPICoreV1ContainerStatus) validateLastState(formats strfmt.Registry) error {
	if swag.IsZero(m.LastState) { // not required
		return nil
	}

	if m.LastState != nil {
		if err := m.LastState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastState")
			}
			return err
		}
	}

	return nil
}

func (m *K8sIoAPICoreV1ContainerStatus) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this k8s io api core v1 container status based on the context it is used
func (m *K8sIoAPICoreV1ContainerStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLastState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *K8sIoAPICoreV1ContainerStatus) contextValidateLastState(ctx context.Context, formats strfmt.Registry) error {

	if m.LastState != nil {
		if err := m.LastState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastState")
			}
			return err
		}
	}

	return nil
}

func (m *K8sIoAPICoreV1ContainerStatus) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {
		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *K8sIoAPICoreV1ContainerStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *K8sIoAPICoreV1ContainerStatus) UnmarshalBinary(b []byte) error {
	var res K8sIoAPICoreV1ContainerStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
