// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// K8sIoAPICoreV1PortworxVolumeSource PortworxVolumeSource represents a Portworx volume resource.
//
// swagger:model k8s.io.api.core.v1.PortworxVolumeSource
type K8sIoAPICoreV1PortworxVolumeSource struct {

	// FSType represents the filesystem type to mount
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
	FsType string `json:"fsType,omitempty"`

	// Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	// +optional
	ReadOnly bool `json:"readOnly,omitempty"`

	// VolumeID uniquely identifies a Portworx volume
	VolumeID string `json:"volumeID,omitempty"`
}

// Validate validates this k8s io api core v1 portworx volume source
func (m *K8sIoAPICoreV1PortworxVolumeSource) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this k8s io api core v1 portworx volume source based on context it is used
func (m *K8sIoAPICoreV1PortworxVolumeSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *K8sIoAPICoreV1PortworxVolumeSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *K8sIoAPICoreV1PortworxVolumeSource) UnmarshalBinary(b []byte) error {
	var res K8sIoAPICoreV1PortworxVolumeSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
