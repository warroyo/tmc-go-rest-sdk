// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonClusterHealthInfo Health information about cluster components healths.
//
// swagger:model common.cluster.HealthInfo
type CommonClusterHealthInfo struct {

	// Controller manager's health status.
	ControllerManagerHealth *CommonClusterComponentHealth `json:"controllerManagerHealth,omitempty"`

	// ETCD's health status.
	EtcdHealth []*CommonClusterComponentHealth `json:"etcdHealth"`

	// Message providing overall health details.
	Message string `json:"message,omitempty"`

	// Scheduler's health status.
	SchedulerHealth *CommonClusterComponentHealth `json:"schedulerHealth,omitempty"`

	// Timestamp of the record.
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this common cluster health info
func (m *CommonClusterHealthInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControllerManagerHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEtcdHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedulerHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonClusterHealthInfo) validateControllerManagerHealth(formats strfmt.Registry) error {
	if swag.IsZero(m.ControllerManagerHealth) { // not required
		return nil
	}

	if m.ControllerManagerHealth != nil {
		if err := m.ControllerManagerHealth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controllerManagerHealth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controllerManagerHealth")
			}
			return err
		}
	}

	return nil
}

func (m *CommonClusterHealthInfo) validateEtcdHealth(formats strfmt.Registry) error {
	if swag.IsZero(m.EtcdHealth) { // not required
		return nil
	}

	for i := 0; i < len(m.EtcdHealth); i++ {
		if swag.IsZero(m.EtcdHealth[i]) { // not required
			continue
		}

		if m.EtcdHealth[i] != nil {
			if err := m.EtcdHealth[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("etcdHealth" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("etcdHealth" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonClusterHealthInfo) validateSchedulerHealth(formats strfmt.Registry) error {
	if swag.IsZero(m.SchedulerHealth) { // not required
		return nil
	}

	if m.SchedulerHealth != nil {
		if err := m.SchedulerHealth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedulerHealth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedulerHealth")
			}
			return err
		}
	}

	return nil
}

func (m *CommonClusterHealthInfo) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this common cluster health info based on the context it is used
func (m *CommonClusterHealthInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateControllerManagerHealth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEtcdHealth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchedulerHealth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonClusterHealthInfo) contextValidateControllerManagerHealth(ctx context.Context, formats strfmt.Registry) error {

	if m.ControllerManagerHealth != nil {
		if err := m.ControllerManagerHealth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controllerManagerHealth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controllerManagerHealth")
			}
			return err
		}
	}

	return nil
}

func (m *CommonClusterHealthInfo) contextValidateEtcdHealth(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EtcdHealth); i++ {

		if m.EtcdHealth[i] != nil {
			if err := m.EtcdHealth[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("etcdHealth" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("etcdHealth" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonClusterHealthInfo) contextValidateSchedulerHealth(ctx context.Context, formats strfmt.Registry) error {

	if m.SchedulerHealth != nil {
		if err := m.SchedulerHealth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedulerHealth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schedulerHealth")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonClusterHealthInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonClusterHealthInfo) UnmarshalBinary(b []byte) error {
	var res CommonClusterHealthInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
