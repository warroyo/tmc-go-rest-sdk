// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// K8sIoAPICoreV1Affinity Affinity is a group of affinity scheduling rules.
//
// swagger:model k8s.io.api.core.v1.Affinity
type K8sIoAPICoreV1Affinity struct {

	// Describes node affinity scheduling rules for the pod.
	// +optional
	NodeAffinity *K8sIoAPICoreV1NodeAffinity `json:"nodeAffinity,omitempty"`

	// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
	// +optional
	PodAffinity *K8sIoAPICoreV1PodAffinity `json:"podAffinity,omitempty"`

	// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
	// +optional
	PodAntiAffinity *K8sIoAPICoreV1PodAntiAffinity `json:"podAntiAffinity,omitempty"`
}

// Validate validates this k8s io api core v1 affinity
func (m *K8sIoAPICoreV1Affinity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodeAffinity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodAffinity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodAntiAffinity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *K8sIoAPICoreV1Affinity) validateNodeAffinity(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeAffinity) { // not required
		return nil
	}

	if m.NodeAffinity != nil {
		if err := m.NodeAffinity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeAffinity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodeAffinity")
			}
			return err
		}
	}

	return nil
}

func (m *K8sIoAPICoreV1Affinity) validatePodAffinity(formats strfmt.Registry) error {
	if swag.IsZero(m.PodAffinity) { // not required
		return nil
	}

	if m.PodAffinity != nil {
		if err := m.PodAffinity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("podAffinity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("podAffinity")
			}
			return err
		}
	}

	return nil
}

func (m *K8sIoAPICoreV1Affinity) validatePodAntiAffinity(formats strfmt.Registry) error {
	if swag.IsZero(m.PodAntiAffinity) { // not required
		return nil
	}

	if m.PodAntiAffinity != nil {
		if err := m.PodAntiAffinity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("podAntiAffinity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("podAntiAffinity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this k8s io api core v1 affinity based on the context it is used
func (m *K8sIoAPICoreV1Affinity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNodeAffinity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePodAffinity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePodAntiAffinity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *K8sIoAPICoreV1Affinity) contextValidateNodeAffinity(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeAffinity != nil {
		if err := m.NodeAffinity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeAffinity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodeAffinity")
			}
			return err
		}
	}

	return nil
}

func (m *K8sIoAPICoreV1Affinity) contextValidatePodAffinity(ctx context.Context, formats strfmt.Registry) error {

	if m.PodAffinity != nil {
		if err := m.PodAffinity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("podAffinity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("podAffinity")
			}
			return err
		}
	}

	return nil
}

func (m *K8sIoAPICoreV1Affinity) contextValidatePodAntiAffinity(ctx context.Context, formats strfmt.Registry) error {

	if m.PodAntiAffinity != nil {
		if err := m.PodAntiAffinity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("podAntiAffinity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("podAntiAffinity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *K8sIoAPICoreV1Affinity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *K8sIoAPICoreV1Affinity) UnmarshalBinary(b []byte) error {
	var res K8sIoAPICoreV1Affinity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
