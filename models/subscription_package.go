// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SubscriptionPackage The Package purchased by the customer - Standalone purchase, Tanzu Standard, Tanzu Advanced.
//
//   - PACKAGE_UNSPECIFIED: UNSPECIFIED Package.
//   - TANZU_MISSION_CONTROL: Tanzu Mission Control.
//   - TANZU_STANDARD: Tanzu Standard.
//   - TANZU_ADVANCED: Tanzu Advanced.
//   - STANDALONE: Standalone.
//
// swagger:model subscription.Package
type SubscriptionPackage string

func NewSubscriptionPackage(value SubscriptionPackage) *SubscriptionPackage {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SubscriptionPackage.
func (m SubscriptionPackage) Pointer() *SubscriptionPackage {
	return &m
}

const (

	// SubscriptionPackagePACKAGEUNSPECIFIED captures enum value "PACKAGE_UNSPECIFIED"
	SubscriptionPackagePACKAGEUNSPECIFIED SubscriptionPackage = "PACKAGE_UNSPECIFIED"

	// SubscriptionPackageTANZUMISSIONCONTROL captures enum value "TANZU_MISSION_CONTROL"
	SubscriptionPackageTANZUMISSIONCONTROL SubscriptionPackage = "TANZU_MISSION_CONTROL"

	// SubscriptionPackageTANZUSTANDARD captures enum value "TANZU_STANDARD"
	SubscriptionPackageTANZUSTANDARD SubscriptionPackage = "TANZU_STANDARD"

	// SubscriptionPackageTANZUADVANCED captures enum value "TANZU_ADVANCED"
	SubscriptionPackageTANZUADVANCED SubscriptionPackage = "TANZU_ADVANCED"

	// SubscriptionPackageSTANDALONE captures enum value "STANDALONE"
	SubscriptionPackageSTANDALONE SubscriptionPackage = "STANDALONE"
)

// for schema
var subscriptionPackageEnum []interface{}

func init() {
	var res []SubscriptionPackage
	if err := json.Unmarshal([]byte(`["PACKAGE_UNSPECIFIED","TANZU_MISSION_CONTROL","TANZU_STANDARD","TANZU_ADVANCED","STANDALONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscriptionPackageEnum = append(subscriptionPackageEnum, v)
	}
}

func (m SubscriptionPackage) validateSubscriptionPackageEnum(path, location string, value SubscriptionPackage) error {
	if err := validate.EnumCase(path, location, value, subscriptionPackageEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this subscription package
func (m SubscriptionPackage) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSubscriptionPackageEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this subscription package based on context it is used
func (m SubscriptionPackage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
