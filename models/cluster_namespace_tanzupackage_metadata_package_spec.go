// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterNamespaceTanzupackageMetadataPackageSpec Spec of the Package.
//
// swagger:model cluster.namespace.tanzupackage.metadata.package.Spec
type ClusterNamespaceTanzupackageMetadataPackageSpec struct {

	// Minimum capacity requirements to install Package on a cluster.
	CapacityRequirementsDescription string `json:"capacityRequirementsDescription,omitempty"`

	// Licenses under which Package is released.
	Licenses []string `json:"licenses"`

	// Release notes of Package.
	ReleaseNotes string `json:"releaseNotes,omitempty"`

	// Date on which Package is released.
	// Format: date-time
	ReleasedAt strfmt.DateTime `json:"releasedAt,omitempty"`

	// Name of package repository to which this package belongs.
	RepositoryName string `json:"repositoryName,omitempty"`

	// Values schema is used to show template values that can be configured by users.
	ValuesSchema *ClusterNamespaceTanzupackageMetadataPackageValuesSchema `json:"valuesSchema,omitempty"`
}

// Validate validates this cluster namespace tanzupackage metadata package spec
func (m *ClusterNamespaceTanzupackageMetadataPackageSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReleasedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValuesSchema(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNamespaceTanzupackageMetadataPackageSpec) validateReleasedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ReleasedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("releasedAt", "body", "date-time", m.ReleasedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ClusterNamespaceTanzupackageMetadataPackageSpec) validateValuesSchema(formats strfmt.Registry) error {
	if swag.IsZero(m.ValuesSchema) { // not required
		return nil
	}

	if m.ValuesSchema != nil {
		if err := m.ValuesSchema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("valuesSchema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("valuesSchema")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster namespace tanzupackage metadata package spec based on the context it is used
func (m *ClusterNamespaceTanzupackageMetadataPackageSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateValuesSchema(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNamespaceTanzupackageMetadataPackageSpec) contextValidateValuesSchema(ctx context.Context, formats strfmt.Registry) error {

	if m.ValuesSchema != nil {
		if err := m.ValuesSchema.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("valuesSchema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("valuesSchema")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterNamespaceTanzupackageMetadataPackageSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterNamespaceTanzupackageMetadataPackageSpec) UnmarshalBinary(b []byte) error {
	var res ClusterNamespaceTanzupackageMetadataPackageSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
