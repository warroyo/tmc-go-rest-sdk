// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EksclusterPhase Phase of the cluster resource.
//
//   - PHASE_UNSPECIFIED: Unspecified phase.
//   - PENDING: Resource is pending processing.
//   - CREATING: Resource is being created.
//   - READY: Resource is ready state.
//   - DELETING: Resource is being deleted.
//   - ERROR: Error in processing.
//   - UPDATING: This phase is used to reflect the UPDATING state of EKS cluster.
//   - OVER_LIMIT: This phase indicates cluster has crossed resource limits set for the organization.
//
// For such cluster we no longer sync data back to TMC.
//   - UPGRADING: This phase indicates kubernetes version is being upgraded for the cluster.
//   - PENDING_MANAGE: This phase indicates the cluster is in the process of being managed by TMC.
//   - PENDING_UNMANAGE: This phase indicates the cluster is in the process of being unmanaged by TMC.
//
// swagger:model ekscluster.Phase
type EksclusterPhase string

func NewEksclusterPhase(value EksclusterPhase) *EksclusterPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EksclusterPhase.
func (m EksclusterPhase) Pointer() *EksclusterPhase {
	return &m
}

const (

	// EksclusterPhasePHASEUNSPECIFIED captures enum value "PHASE_UNSPECIFIED"
	EksclusterPhasePHASEUNSPECIFIED EksclusterPhase = "PHASE_UNSPECIFIED"

	// EksclusterPhasePENDING captures enum value "PENDING"
	EksclusterPhasePENDING EksclusterPhase = "PENDING"

	// EksclusterPhaseCREATING captures enum value "CREATING"
	EksclusterPhaseCREATING EksclusterPhase = "CREATING"

	// EksclusterPhaseREADY captures enum value "READY"
	EksclusterPhaseREADY EksclusterPhase = "READY"

	// EksclusterPhaseDELETING captures enum value "DELETING"
	EksclusterPhaseDELETING EksclusterPhase = "DELETING"

	// EksclusterPhaseERROR captures enum value "ERROR"
	EksclusterPhaseERROR EksclusterPhase = "ERROR"

	// EksclusterPhaseUPDATING captures enum value "UPDATING"
	EksclusterPhaseUPDATING EksclusterPhase = "UPDATING"

	// EksclusterPhaseOVERLIMIT captures enum value "OVER_LIMIT"
	EksclusterPhaseOVERLIMIT EksclusterPhase = "OVER_LIMIT"

	// EksclusterPhaseUPGRADING captures enum value "UPGRADING"
	EksclusterPhaseUPGRADING EksclusterPhase = "UPGRADING"

	// EksclusterPhasePENDINGMANAGE captures enum value "PENDING_MANAGE"
	EksclusterPhasePENDINGMANAGE EksclusterPhase = "PENDING_MANAGE"

	// EksclusterPhasePENDINGUNMANAGE captures enum value "PENDING_UNMANAGE"
	EksclusterPhasePENDINGUNMANAGE EksclusterPhase = "PENDING_UNMANAGE"
)

// for schema
var eksclusterPhaseEnum []interface{}

func init() {
	var res []EksclusterPhase
	if err := json.Unmarshal([]byte(`["PHASE_UNSPECIFIED","PENDING","CREATING","READY","DELETING","ERROR","UPDATING","OVER_LIMIT","UPGRADING","PENDING_MANAGE","PENDING_UNMANAGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eksclusterPhaseEnum = append(eksclusterPhaseEnum, v)
	}
}

func (m EksclusterPhase) validateEksclusterPhaseEnum(path, location string, value EksclusterPhase) error {
	if err := validate.EnumCase(path, location, value, eksclusterPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this ekscluster phase
func (m EksclusterPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEksclusterPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this ekscluster phase based on context it is used
func (m EksclusterPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
