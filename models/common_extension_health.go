// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CommonExtensionHealth Health status of the deployed extension.
//
//   - HEALTH_UNSPECIFIED: Unknown.
//   - HEALTHY: Healthy.
//   - UNHEALTHY: Unhealthy.
//
// swagger:model common.extension.Health
type CommonExtensionHealth string

func NewCommonExtensionHealth(value CommonExtensionHealth) *CommonExtensionHealth {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CommonExtensionHealth.
func (m CommonExtensionHealth) Pointer() *CommonExtensionHealth {
	return &m
}

const (

	// CommonExtensionHealthHEALTHUNSPECIFIED captures enum value "HEALTH_UNSPECIFIED"
	CommonExtensionHealthHEALTHUNSPECIFIED CommonExtensionHealth = "HEALTH_UNSPECIFIED"

	// CommonExtensionHealthHEALTHY captures enum value "HEALTHY"
	CommonExtensionHealthHEALTHY CommonExtensionHealth = "HEALTHY"

	// CommonExtensionHealthUNHEALTHY captures enum value "UNHEALTHY"
	CommonExtensionHealthUNHEALTHY CommonExtensionHealth = "UNHEALTHY"
)

// for schema
var commonExtensionHealthEnum []interface{}

func init() {
	var res []CommonExtensionHealth
	if err := json.Unmarshal([]byte(`["HEALTH_UNSPECIFIED","HEALTHY","UNHEALTHY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonExtensionHealthEnum = append(commonExtensionHealthEnum, v)
	}
}

func (m CommonExtensionHealth) validateCommonExtensionHealthEnum(path, location string, value CommonExtensionHealth) error {
	if err := validate.EnumCase(path, location, value, commonExtensionHealthEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this common extension health
func (m CommonExtensionHealth) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCommonExtensionHealthEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this common extension health based on context it is used
func (m CommonExtensionHealth) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
