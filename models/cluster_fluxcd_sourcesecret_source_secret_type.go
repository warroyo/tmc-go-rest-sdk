// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterFluxcdSourcesecretSourceSecretType Source Secret Type represents the type of the secret.
//
//   - UNSPECIFIED: Unspecified type for forward compatibility.
//   - USERNAME_PASSWORD: Username Password type.
//   - SSH: SSH type.
//
// swagger:model cluster.fluxcd.sourcesecret.SourceSecretType
type ClusterFluxcdSourcesecretSourceSecretType string

func NewClusterFluxcdSourcesecretSourceSecretType(value ClusterFluxcdSourcesecretSourceSecretType) *ClusterFluxcdSourcesecretSourceSecretType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClusterFluxcdSourcesecretSourceSecretType.
func (m ClusterFluxcdSourcesecretSourceSecretType) Pointer() *ClusterFluxcdSourcesecretSourceSecretType {
	return &m
}

const (

	// ClusterFluxcdSourcesecretSourceSecretTypeUNSPECIFIED captures enum value "UNSPECIFIED"
	ClusterFluxcdSourcesecretSourceSecretTypeUNSPECIFIED ClusterFluxcdSourcesecretSourceSecretType = "UNSPECIFIED"

	// ClusterFluxcdSourcesecretSourceSecretTypeUSERNAMEPASSWORD captures enum value "USERNAME_PASSWORD"
	ClusterFluxcdSourcesecretSourceSecretTypeUSERNAMEPASSWORD ClusterFluxcdSourcesecretSourceSecretType = "USERNAME_PASSWORD"

	// ClusterFluxcdSourcesecretSourceSecretTypeSSH captures enum value "SSH"
	ClusterFluxcdSourcesecretSourceSecretTypeSSH ClusterFluxcdSourcesecretSourceSecretType = "SSH"
)

// for schema
var clusterFluxcdSourcesecretSourceSecretTypeEnum []interface{}

func init() {
	var res []ClusterFluxcdSourcesecretSourceSecretType
	if err := json.Unmarshal([]byte(`["UNSPECIFIED","USERNAME_PASSWORD","SSH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterFluxcdSourcesecretSourceSecretTypeEnum = append(clusterFluxcdSourcesecretSourceSecretTypeEnum, v)
	}
}

func (m ClusterFluxcdSourcesecretSourceSecretType) validateClusterFluxcdSourcesecretSourceSecretTypeEnum(path, location string, value ClusterFluxcdSourcesecretSourceSecretType) error {
	if err := validate.EnumCase(path, location, value, clusterFluxcdSourcesecretSourceSecretTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster fluxcd sourcesecret source secret type
func (m ClusterFluxcdSourcesecretSourceSecretType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterFluxcdSourcesecretSourceSecretTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cluster fluxcd sourcesecret source secret type based on context it is used
func (m ClusterFluxcdSourcesecretSourceSecretType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
