// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterListClusterOptionsResponse Response from listing cluster options.
//
// swagger:model cluster.ListClusterOptionsResponse
type ClusterListClusterOptionsResponse struct {

	// AWS specific cluster options.
	AwsOptions *CommonClusterAWSProviderOptions `json:"awsOptions,omitempty"`

	// Network specific cluster options.
	NetworkOptions *CommonClusterNetworkOptions `json:"networkOptions,omitempty"`

	// TKG on azure specific cluster options.
	TkgAzureOptions *CommonClusterTKGAzureOptions `json:"tkgAzureOptions,omitempty"`

	// TKG service vsphere specific cluster options.
	TkgServiceVsphereOptions *CommonClusterTKGServiceVsphereOptions `json:"tkgServiceVsphereOptions,omitempty"`

	// TKG on vSphere specific cluster options.
	TkgVsphereOptions *CommonClusterTKGVsphereOptions `json:"tkgVsphereOptions,omitempty"`
}

// Validate validates this cluster list cluster options response
func (m *ClusterListClusterOptionsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTkgAzureOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTkgServiceVsphereOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTkgVsphereOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterListClusterOptionsResponse) validateAwsOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsOptions) { // not required
		return nil
	}

	if m.AwsOptions != nil {
		if err := m.AwsOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsOptions")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterListClusterOptionsResponse) validateNetworkOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkOptions) { // not required
		return nil
	}

	if m.NetworkOptions != nil {
		if err := m.NetworkOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkOptions")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterListClusterOptionsResponse) validateTkgAzureOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.TkgAzureOptions) { // not required
		return nil
	}

	if m.TkgAzureOptions != nil {
		if err := m.TkgAzureOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tkgAzureOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tkgAzureOptions")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterListClusterOptionsResponse) validateTkgServiceVsphereOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.TkgServiceVsphereOptions) { // not required
		return nil
	}

	if m.TkgServiceVsphereOptions != nil {
		if err := m.TkgServiceVsphereOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tkgServiceVsphereOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tkgServiceVsphereOptions")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterListClusterOptionsResponse) validateTkgVsphereOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.TkgVsphereOptions) { // not required
		return nil
	}

	if m.TkgVsphereOptions != nil {
		if err := m.TkgVsphereOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tkgVsphereOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tkgVsphereOptions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster list cluster options response based on the context it is used
func (m *ClusterListClusterOptionsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTkgAzureOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTkgServiceVsphereOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTkgVsphereOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterListClusterOptionsResponse) contextValidateAwsOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsOptions != nil {
		if err := m.AwsOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsOptions")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterListClusterOptionsResponse) contextValidateNetworkOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkOptions != nil {
		if err := m.NetworkOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkOptions")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterListClusterOptionsResponse) contextValidateTkgAzureOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.TkgAzureOptions != nil {
		if err := m.TkgAzureOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tkgAzureOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tkgAzureOptions")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterListClusterOptionsResponse) contextValidateTkgServiceVsphereOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.TkgServiceVsphereOptions != nil {
		if err := m.TkgServiceVsphereOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tkgServiceVsphereOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tkgServiceVsphereOptions")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterListClusterOptionsResponse) contextValidateTkgVsphereOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.TkgVsphereOptions != nil {
		if err := m.TkgVsphereOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tkgVsphereOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tkgVsphereOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterListClusterOptionsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterListClusterOptionsResponse) UnmarshalBinary(b []byte) error {
	var res ClusterListClusterOptionsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
