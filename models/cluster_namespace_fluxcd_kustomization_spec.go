// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterNamespaceFluxcdKustomizationSpec Spec of the Kustomization.
//
// swagger:model cluster.namespace.fluxcd.kustomization.Spec
type ClusterNamespaceFluxcdKustomizationSpec struct {

	// Interval defines the interval at which to reconcile kustomization.
	Interval string `json:"interval,omitempty"`

	// Path within the source from which configurations will be applied.
	Path string `json:"path,omitempty"`

	// If true, the workloads will be deleted when the kustomization CR is deleted.
	Prune bool `json:"prune,omitempty"`

	// Reference to the source from which the configurations will be applied.
	Source *ClusterNamespaceFluxcdKustomizationRepositoryReference `json:"source,omitempty"`

	// TargetNamespace sets or overrides the namespaces of resources/kustomization yaml while applying on cluster.
	// Namespace specified here must exist on cluster. It won't be created as a result of specifying here.
	TargetNamespace string `json:"targetNamespace,omitempty"`
}

// Validate validates this cluster namespace fluxcd kustomization spec
func (m *ClusterNamespaceFluxcdKustomizationSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNamespaceFluxcdKustomizationSpec) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster namespace fluxcd kustomization spec based on the context it is used
func (m *ClusterNamespaceFluxcdKustomizationSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNamespaceFluxcdKustomizationSpec) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {
		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterNamespaceFluxcdKustomizationSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterNamespaceFluxcdKustomizationSpec) UnmarshalBinary(b []byte) error {
	var res ClusterNamespaceFluxcdKustomizationSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
