// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CommonPolicySpec The policy spec.
//
// swagger:model common.policy.Spec
type CommonPolicySpec struct {

	// Inputs needed for the selected policy recipe.
	// To find the required inputs, check the input schema of the selected policy recipe.
	Input interface{} `json:"input,omitempty"`

	// Label based Namespace Selector for the policy.
	NamespaceSelector *CommonPolicyLabelSelector `json:"namespaceSelector,omitempty"`

	// Name of the policy recipe (helper) used for creating a policy.
	// Use PolicyRecipe API to find the list of available recipe in each type.
	Recipe string `json:"recipe,omitempty"`

	// The version of the recipe used for the policy.
	// The latest version will be selected by default (if left empty).
	// Use PolicyRecipeVersion API to find the list of versions in each recipe.
	RecipeVersion string `json:"recipeVersion,omitempty"`

	// Generated yaml based policy resources (read-only).
	// These will only be seen when viewing effective policies on a cluster or namespace.
	Resources []string `json:"resources"`

	// Type of the policy object.
	// Use PolicyTypes API to find the list of available policy types.
	Type string `json:"type,omitempty"`
}

// Validate validates this common policy spec
func (m *CommonPolicySpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNamespaceSelector(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonPolicySpec) validateNamespaceSelector(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespaceSelector) { // not required
		return nil
	}

	if m.NamespaceSelector != nil {
		if err := m.NamespaceSelector.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaceSelector")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaceSelector")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this common policy spec based on the context it is used
func (m *CommonPolicySpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNamespaceSelector(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonPolicySpec) contextValidateNamespaceSelector(ctx context.Context, formats strfmt.Registry) error {

	if m.NamespaceSelector != nil {
		if err := m.NamespaceSelector.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namespaceSelector")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namespaceSelector")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonPolicySpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonPolicySpec) UnmarshalBinary(b []byte) error {
	var res CommonPolicySpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
