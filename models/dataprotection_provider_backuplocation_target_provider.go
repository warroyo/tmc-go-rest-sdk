// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DataprotectionProviderBackuplocationTargetProvider Available target provider for back up locations.
//
//   - TARGET_PROVIDER_UNSPECIFIED: Unspecified target provider.
//   - AWS: AWS.
//   - AZURE: AZURE.
//
// swagger:model dataprotection.provider.backuplocation.TargetProvider
type DataprotectionProviderBackuplocationTargetProvider string

func NewDataprotectionProviderBackuplocationTargetProvider(value DataprotectionProviderBackuplocationTargetProvider) *DataprotectionProviderBackuplocationTargetProvider {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DataprotectionProviderBackuplocationTargetProvider.
func (m DataprotectionProviderBackuplocationTargetProvider) Pointer() *DataprotectionProviderBackuplocationTargetProvider {
	return &m
}

const (

	// DataprotectionProviderBackuplocationTargetProviderTARGETPROVIDERUNSPECIFIED captures enum value "TARGET_PROVIDER_UNSPECIFIED"
	DataprotectionProviderBackuplocationTargetProviderTARGETPROVIDERUNSPECIFIED DataprotectionProviderBackuplocationTargetProvider = "TARGET_PROVIDER_UNSPECIFIED"

	// DataprotectionProviderBackuplocationTargetProviderAWS captures enum value "AWS"
	DataprotectionProviderBackuplocationTargetProviderAWS DataprotectionProviderBackuplocationTargetProvider = "AWS"

	// DataprotectionProviderBackuplocationTargetProviderAZURE captures enum value "AZURE"
	DataprotectionProviderBackuplocationTargetProviderAZURE DataprotectionProviderBackuplocationTargetProvider = "AZURE"
)

// for schema
var dataprotectionProviderBackuplocationTargetProviderEnum []interface{}

func init() {
	var res []DataprotectionProviderBackuplocationTargetProvider
	if err := json.Unmarshal([]byte(`["TARGET_PROVIDER_UNSPECIFIED","AWS","AZURE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataprotectionProviderBackuplocationTargetProviderEnum = append(dataprotectionProviderBackuplocationTargetProviderEnum, v)
	}
}

func (m DataprotectionProviderBackuplocationTargetProvider) validateDataprotectionProviderBackuplocationTargetProviderEnum(path, location string, value DataprotectionProviderBackuplocationTargetProvider) error {
	if err := validate.EnumCase(path, location, value, dataprotectionProviderBackuplocationTargetProviderEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this dataprotection provider backuplocation target provider
func (m DataprotectionProviderBackuplocationTargetProvider) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDataprotectionProviderBackuplocationTargetProviderEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this dataprotection provider backuplocation target provider based on context it is used
func (m DataprotectionProviderBackuplocationTargetProvider) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
