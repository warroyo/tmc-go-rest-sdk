// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PolicyEffectiveStatusPhase Phase of a policy.
//
//   - PHASE_UNSPECIFIED: Phase Unspecified phase is the default state set when an effective policy is first created/updated.
//   - APPLYING: Applying state is set when we are working on applying the policy.
//   - APPLIED: Applied state is set when we have successfully applied the policy.
//   - ERROR: Error state is set when there was a failure while applying the policy.
//   - DELAYED: Delayed state is set when we are unable to apply the policy for a long time.
//
// swagger:model policy.effective.Status.Phase
type PolicyEffectiveStatusPhase string

func NewPolicyEffectiveStatusPhase(value PolicyEffectiveStatusPhase) *PolicyEffectiveStatusPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PolicyEffectiveStatusPhase.
func (m PolicyEffectiveStatusPhase) Pointer() *PolicyEffectiveStatusPhase {
	return &m
}

const (

	// PolicyEffectiveStatusPhasePHASEUNSPECIFIED captures enum value "PHASE_UNSPECIFIED"
	PolicyEffectiveStatusPhasePHASEUNSPECIFIED PolicyEffectiveStatusPhase = "PHASE_UNSPECIFIED"

	// PolicyEffectiveStatusPhaseAPPLYING captures enum value "APPLYING"
	PolicyEffectiveStatusPhaseAPPLYING PolicyEffectiveStatusPhase = "APPLYING"

	// PolicyEffectiveStatusPhaseAPPLIED captures enum value "APPLIED"
	PolicyEffectiveStatusPhaseAPPLIED PolicyEffectiveStatusPhase = "APPLIED"

	// PolicyEffectiveStatusPhaseERROR captures enum value "ERROR"
	PolicyEffectiveStatusPhaseERROR PolicyEffectiveStatusPhase = "ERROR"

	// PolicyEffectiveStatusPhaseDELAYED captures enum value "DELAYED"
	PolicyEffectiveStatusPhaseDELAYED PolicyEffectiveStatusPhase = "DELAYED"
)

// for schema
var policyEffectiveStatusPhaseEnum []interface{}

func init() {
	var res []PolicyEffectiveStatusPhase
	if err := json.Unmarshal([]byte(`["PHASE_UNSPECIFIED","APPLYING","APPLIED","ERROR","DELAYED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyEffectiveStatusPhaseEnum = append(policyEffectiveStatusPhaseEnum, v)
	}
}

func (m PolicyEffectiveStatusPhase) validatePolicyEffectiveStatusPhaseEnum(path, location string, value PolicyEffectiveStatusPhase) error {
	if err := validate.EnumCase(path, location, value, policyEffectiveStatusPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this policy effective status phase
func (m PolicyEffectiveStatusPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePolicyEffectiveStatusPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this policy effective status phase based on context it is used
func (m PolicyEffectiveStatusPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
