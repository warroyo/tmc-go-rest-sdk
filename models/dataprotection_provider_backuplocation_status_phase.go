// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DataprotectionProviderBackuplocationStatusPhase Available phases for backup location object.
//
//   - PHASE_UNSPECIFIED: Phase_unspecified is the default phase.
//   - PENDING: Pending phase is set when the backup location object is being processed by the service (TMC).
//   - CREATING: Creating phase is set when backup location is being created by the service.
//   - PENDING_DELETE: Pending delete is set when the backup location delete is being processed by the service.
//   - DELETING: Deleting the set when the backup location delete is in progress.
//   - READY: Ready phase is set when the backup location is successfully created.
//   - ERROR: Error phase is set when there was a failure while creating/deleting backup location.
//   - UPDATING: Updating the set when the backup location is being updated.
//
// swagger:model dataprotection.provider.backuplocation.Status.Phase
type DataprotectionProviderBackuplocationStatusPhase string

func NewDataprotectionProviderBackuplocationStatusPhase(value DataprotectionProviderBackuplocationStatusPhase) *DataprotectionProviderBackuplocationStatusPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DataprotectionProviderBackuplocationStatusPhase.
func (m DataprotectionProviderBackuplocationStatusPhase) Pointer() *DataprotectionProviderBackuplocationStatusPhase {
	return &m
}

const (

	// DataprotectionProviderBackuplocationStatusPhasePHASEUNSPECIFIED captures enum value "PHASE_UNSPECIFIED"
	DataprotectionProviderBackuplocationStatusPhasePHASEUNSPECIFIED DataprotectionProviderBackuplocationStatusPhase = "PHASE_UNSPECIFIED"

	// DataprotectionProviderBackuplocationStatusPhasePENDING captures enum value "PENDING"
	DataprotectionProviderBackuplocationStatusPhasePENDING DataprotectionProviderBackuplocationStatusPhase = "PENDING"

	// DataprotectionProviderBackuplocationStatusPhaseCREATING captures enum value "CREATING"
	DataprotectionProviderBackuplocationStatusPhaseCREATING DataprotectionProviderBackuplocationStatusPhase = "CREATING"

	// DataprotectionProviderBackuplocationStatusPhasePENDINGDELETE captures enum value "PENDING_DELETE"
	DataprotectionProviderBackuplocationStatusPhasePENDINGDELETE DataprotectionProviderBackuplocationStatusPhase = "PENDING_DELETE"

	// DataprotectionProviderBackuplocationStatusPhaseDELETING captures enum value "DELETING"
	DataprotectionProviderBackuplocationStatusPhaseDELETING DataprotectionProviderBackuplocationStatusPhase = "DELETING"

	// DataprotectionProviderBackuplocationStatusPhaseREADY captures enum value "READY"
	DataprotectionProviderBackuplocationStatusPhaseREADY DataprotectionProviderBackuplocationStatusPhase = "READY"

	// DataprotectionProviderBackuplocationStatusPhaseERROR captures enum value "ERROR"
	DataprotectionProviderBackuplocationStatusPhaseERROR DataprotectionProviderBackuplocationStatusPhase = "ERROR"

	// DataprotectionProviderBackuplocationStatusPhaseUPDATING captures enum value "UPDATING"
	DataprotectionProviderBackuplocationStatusPhaseUPDATING DataprotectionProviderBackuplocationStatusPhase = "UPDATING"
)

// for schema
var dataprotectionProviderBackuplocationStatusPhaseEnum []interface{}

func init() {
	var res []DataprotectionProviderBackuplocationStatusPhase
	if err := json.Unmarshal([]byte(`["PHASE_UNSPECIFIED","PENDING","CREATING","PENDING_DELETE","DELETING","READY","ERROR","UPDATING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataprotectionProviderBackuplocationStatusPhaseEnum = append(dataprotectionProviderBackuplocationStatusPhaseEnum, v)
	}
}

func (m DataprotectionProviderBackuplocationStatusPhase) validateDataprotectionProviderBackuplocationStatusPhaseEnum(path, location string, value DataprotectionProviderBackuplocationStatusPhase) error {
	if err := validate.EnumCase(path, location, value, dataprotectionProviderBackuplocationStatusPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this dataprotection provider backuplocation status phase
func (m DataprotectionProviderBackuplocationStatusPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDataprotectionProviderBackuplocationStatusPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this dataprotection provider backuplocation status phase based on context it is used
func (m DataprotectionProviderBackuplocationStatusPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
