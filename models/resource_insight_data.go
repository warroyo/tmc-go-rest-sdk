// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResourceInsightData Data of the insight.
//
// swagger:model resource.insight.Data
type ResourceInsightData struct {

	// Reference of the impacted cluster.
	Cluster *VmwareTanzuCoreV1alpha1ObjectReference `json:"cluster,omitempty"`

	// Details about the insight.
	Details string `json:"details,omitempty"`

	// Reference of the source resource (eg. integration, gitrepository, helm, policy-settings).
	SourceResource *VmwareTanzuCoreV1alpha1ObjectReference `json:"sourceResource,omitempty"`

	// Kind of the source resource (eg. integration, gitrepository, helm, policy-settings).
	SourceResourceKind string `json:"sourceResourceKind,omitempty"`

	// Reference of the source scope (eg. organization, clustergroup, cluster).
	SourceScope *VmwareTanzuCoreV1alpha1ObjectReference `json:"sourceScope,omitempty"`

	// Source scope type (eg. org, cg, c).
	SourceScopeType string `json:"sourceScopeType,omitempty"`

	// Type of insight.
	Type *ResourceInsightType `json:"type,omitempty"`
}

// Validate validates this resource insight data
func (m *ResourceInsightData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceInsightData) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceInsightData) validateSourceResource(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceResource) { // not required
		return nil
	}

	if m.SourceResource != nil {
		if err := m.SourceResource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceResource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceResource")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceInsightData) validateSourceScope(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceScope) { // not required
		return nil
	}

	if m.SourceScope != nil {
		if err := m.SourceScope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceScope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceScope")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceInsightData) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this resource insight data based on the context it is used
func (m *ResourceInsightData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceInsightData) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceInsightData) contextValidateSourceResource(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceResource != nil {
		if err := m.SourceResource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceResource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceResource")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceInsightData) contextValidateSourceScope(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceScope != nil {
		if err := m.SourceScope.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceScope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceScope")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceInsightData) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceInsightData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceInsightData) UnmarshalBinary(b []byte) error {
	var res ResourceInsightData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
