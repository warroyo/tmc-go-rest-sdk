// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AksclusterChannel Channel options of auto upgrade config.
//
//   - CHANNEL_UNSPECIFIED: Unspecified channel.
//   - NONE: Disables auto-upgrades and keeps the cluster at its current version of Kubernetes.
//   - PATCH: Automatically upgrades the cluster to the latest supported patch version when it becomes available while keeping the minor version the same.
//   - STABLE: Automatically upgrades the cluster to the latest supported patch release on minor version N-1, where N is the latest supported minor version.
//   - RAPID: Automatically upgrades the cluster to the latest supported patch release on the latest supported minor version.
//   - NODE_IMAGE: Automatically upgrades the node image to the latest version available.
//
// swagger:model akscluster.Channel
type AksclusterChannel string

func NewAksclusterChannel(value AksclusterChannel) *AksclusterChannel {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AksclusterChannel.
func (m AksclusterChannel) Pointer() *AksclusterChannel {
	return &m
}

const (

	// AksclusterChannelCHANNELUNSPECIFIED captures enum value "CHANNEL_UNSPECIFIED"
	AksclusterChannelCHANNELUNSPECIFIED AksclusterChannel = "CHANNEL_UNSPECIFIED"

	// AksclusterChannelNONE captures enum value "NONE"
	AksclusterChannelNONE AksclusterChannel = "NONE"

	// AksclusterChannelPATCH captures enum value "PATCH"
	AksclusterChannelPATCH AksclusterChannel = "PATCH"

	// AksclusterChannelSTABLE captures enum value "STABLE"
	AksclusterChannelSTABLE AksclusterChannel = "STABLE"

	// AksclusterChannelRAPID captures enum value "RAPID"
	AksclusterChannelRAPID AksclusterChannel = "RAPID"

	// AksclusterChannelNODEIMAGE captures enum value "NODE_IMAGE"
	AksclusterChannelNODEIMAGE AksclusterChannel = "NODE_IMAGE"
)

// for schema
var aksclusterChannelEnum []interface{}

func init() {
	var res []AksclusterChannel
	if err := json.Unmarshal([]byte(`["CHANNEL_UNSPECIFIED","NONE","PATCH","STABLE","RAPID","NODE_IMAGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		aksclusterChannelEnum = append(aksclusterChannelEnum, v)
	}
}

func (m AksclusterChannel) validateAksclusterChannelEnum(path, location string, value AksclusterChannel) error {
	if err := validate.EnumCase(path, location, value, aksclusterChannelEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this akscluster channel
func (m AksclusterChannel) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAksclusterChannelEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this akscluster channel based on context it is used
func (m AksclusterChannel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
