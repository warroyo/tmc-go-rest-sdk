// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VmwareTanzuCoreV1alpha1StatusCondition Condition describes the status of resource.
// Each resource should provide meaningful set of conditions.
// For Tanzu, each resource must support 'Ready' and 'Scheduled' conditions
// Here is meaning of base conditions and their states:
// Condition 'Ready' with Status 'True' means user action has reached the desired state
// Condition 'Ready' with Status 'False' means user action failed to reach desired state.
// Condition 'Scheduled' with Status 'False' means user action can not be scheduled due to some reason
// Condition 'Scheduled' with Status 'True', Ready unknown means job is scheduled and system is working/will work on reaching to desires state
// Condition 'Scheduled' with Status 'Unknown' means system does not know the status of the action
//
// swagger:model vmware.tanzu.core.v1alpha1.status.Condition
type VmwareTanzuCoreV1alpha1StatusCondition struct {

	// Last time the condition transit from one status to another.
	// Format: date-time
	LastTransitionTime strfmt.DateTime `json:"lastTransitionTime,omitempty"`

	// Human readable message indicating details about last transition.
	Message string `json:"message,omitempty"`

	// One-word reason for the condition's last transition.
	Reason string `json:"reason,omitempty"`

	// Severity of condition, one of Error, Warning, Info.
	// Default is Error.
	Severity *VmwareTanzuCoreV1alpha1StatusConditionSeverity `json:"severity,omitempty"`

	// Status of the condition, one of True, False, Unknown.
	// Default is Unknown.
	Status *VmwareTanzuCoreV1alpha1StatusConditionStatus `json:"status,omitempty"`

	// Type of condition.
	Type string `json:"type,omitempty"`
}

// Validate validates this vmware tanzu core v1alpha1 status condition
func (m *VmwareTanzuCoreV1alpha1StatusCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastTransitionTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareTanzuCoreV1alpha1StatusCondition) validateLastTransitionTime(formats strfmt.Registry) error {
	if swag.IsZero(m.LastTransitionTime) { // not required
		return nil
	}

	if err := validate.FormatOf("lastTransitionTime", "body", "date-time", m.LastTransitionTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VmwareTanzuCoreV1alpha1StatusCondition) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	if m.Severity != nil {
		if err := m.Severity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("severity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("severity")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareTanzuCoreV1alpha1StatusCondition) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vmware tanzu core v1alpha1 status condition based on the context it is used
func (m *VmwareTanzuCoreV1alpha1StatusCondition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSeverity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareTanzuCoreV1alpha1StatusCondition) contextValidateSeverity(ctx context.Context, formats strfmt.Registry) error {

	if m.Severity != nil {
		if err := m.Severity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("severity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("severity")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareTanzuCoreV1alpha1StatusCondition) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VmwareTanzuCoreV1alpha1StatusCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareTanzuCoreV1alpha1StatusCondition) UnmarshalBinary(b []byte) error {
	var res VmwareTanzuCoreV1alpha1StatusCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
