// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterNamespaceFluxcdGitrepositoryReference Reference specifies git reference to resolve and checkout.
//
// swagger:model cluster.namespace.fluxcd.gitrepository.Reference
type ClusterNamespaceFluxcdGitrepositoryReference struct {

	// Branch from git to checkout.
	Branch string `json:"branch,omitempty"`

	// Commit SHA to checkout. Takes precedence over all other reference fields.
	// When GitRepository.spec.git_implementation is `go-git`, this can be combined
	// with branch to shallow clone branch in which the commit is expected to exist.
	Commit string `json:"commit,omitempty"`

	// SemVer expression to checkout from git tags. Takes precendence over tag.
	Semver string `json:"semver,omitempty"`

	// Tag from git to checkout. Takes precedence over branch.
	Tag string `json:"tag,omitempty"`
}

// Validate validates this cluster namespace fluxcd gitrepository reference
func (m *ClusterNamespaceFluxcdGitrepositoryReference) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cluster namespace fluxcd gitrepository reference based on context it is used
func (m *ClusterNamespaceFluxcdGitrepositoryReference) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterNamespaceFluxcdGitrepositoryReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterNamespaceFluxcdGitrepositoryReference) UnmarshalBinary(b []byte) error {
	var res ClusterNamespaceFluxcdGitrepositoryReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
