// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SubscriptionUnitOfMeasure The Unit of Measure for the contract - cores or CPUs.
//
//   - UOM_UNSPECIFIED: UNSPECIFIED UnitOfMeasure.
//   - CORES: Cores.
//   - CPUS: CPUs.
//   - VCPUS: VCPUs.
//
// swagger:model subscription.UnitOfMeasure
type SubscriptionUnitOfMeasure string

func NewSubscriptionUnitOfMeasure(value SubscriptionUnitOfMeasure) *SubscriptionUnitOfMeasure {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SubscriptionUnitOfMeasure.
func (m SubscriptionUnitOfMeasure) Pointer() *SubscriptionUnitOfMeasure {
	return &m
}

const (

	// SubscriptionUnitOfMeasureUOMUNSPECIFIED captures enum value "UOM_UNSPECIFIED"
	SubscriptionUnitOfMeasureUOMUNSPECIFIED SubscriptionUnitOfMeasure = "UOM_UNSPECIFIED"

	// SubscriptionUnitOfMeasureCORES captures enum value "CORES"
	SubscriptionUnitOfMeasureCORES SubscriptionUnitOfMeasure = "CORES"

	// SubscriptionUnitOfMeasureCPUS captures enum value "CPUS"
	SubscriptionUnitOfMeasureCPUS SubscriptionUnitOfMeasure = "CPUS"

	// SubscriptionUnitOfMeasureVCPUS captures enum value "VCPUS"
	SubscriptionUnitOfMeasureVCPUS SubscriptionUnitOfMeasure = "VCPUS"
)

// for schema
var subscriptionUnitOfMeasureEnum []interface{}

func init() {
	var res []SubscriptionUnitOfMeasure
	if err := json.Unmarshal([]byte(`["UOM_UNSPECIFIED","CORES","CPUS","VCPUS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscriptionUnitOfMeasureEnum = append(subscriptionUnitOfMeasureEnum, v)
	}
}

func (m SubscriptionUnitOfMeasure) validateSubscriptionUnitOfMeasureEnum(path, location string, value SubscriptionUnitOfMeasure) error {
	if err := validate.EnumCase(path, location, value, subscriptionUnitOfMeasureEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this subscription unit of measure
func (m SubscriptionUnitOfMeasure) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSubscriptionUnitOfMeasureEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this subscription unit of measure based on context it is used
func (m SubscriptionUnitOfMeasure) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
