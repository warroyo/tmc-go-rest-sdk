// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterNetworkAntreaAntreacontrollerinfoGetAntreaControllerInfoResponse Response from getting an AntreaControllerInfo.
//
// swagger:model cluster.network.antrea.antreacontrollerinfo.GetAntreaControllerInfoResponse
type ClusterNetworkAntreaAntreacontrollerinfoGetAntreaControllerInfoResponse struct {

	// AntreaControllerInfo returned.
	AntreaControllerInfo *ClusterNetworkAntreaAntreacontrollerinfoAntreaControllerInfo `json:"antreaControllerInfo,omitempty"`
}

// Validate validates this cluster network antrea antreacontrollerinfo get antrea controller info response
func (m *ClusterNetworkAntreaAntreacontrollerinfoGetAntreaControllerInfoResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAntreaControllerInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNetworkAntreaAntreacontrollerinfoGetAntreaControllerInfoResponse) validateAntreaControllerInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AntreaControllerInfo) { // not required
		return nil
	}

	if m.AntreaControllerInfo != nil {
		if err := m.AntreaControllerInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("antreaControllerInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("antreaControllerInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster network antrea antreacontrollerinfo get antrea controller info response based on the context it is used
func (m *ClusterNetworkAntreaAntreacontrollerinfoGetAntreaControllerInfoResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAntreaControllerInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNetworkAntreaAntreacontrollerinfoGetAntreaControllerInfoResponse) contextValidateAntreaControllerInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.AntreaControllerInfo != nil {
		if err := m.AntreaControllerInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("antreaControllerInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("antreaControllerInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterNetworkAntreaAntreacontrollerinfoGetAntreaControllerInfoResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterNetworkAntreaAntreacontrollerinfoGetAntreaControllerInfoResponse) UnmarshalBinary(b []byte) error {
	var res ClusterNetworkAntreaAntreacontrollerinfoGetAntreaControllerInfoResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
