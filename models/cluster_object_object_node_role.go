// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterObjectObjectNodeRole Enum for node role.
//
//   - ROLE_UNSPECIFIED: Default node role.
//   - MASTER: MASTER node role.
//   - WORKER: WORKER node role.
//
// swagger:model cluster.object.ObjectNode.Role
type ClusterObjectObjectNodeRole string

func NewClusterObjectObjectNodeRole(value ClusterObjectObjectNodeRole) *ClusterObjectObjectNodeRole {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClusterObjectObjectNodeRole.
func (m ClusterObjectObjectNodeRole) Pointer() *ClusterObjectObjectNodeRole {
	return &m
}

const (

	// ClusterObjectObjectNodeRoleROLEUNSPECIFIED captures enum value "ROLE_UNSPECIFIED"
	ClusterObjectObjectNodeRoleROLEUNSPECIFIED ClusterObjectObjectNodeRole = "ROLE_UNSPECIFIED"

	// ClusterObjectObjectNodeRoleMASTER captures enum value "MASTER"
	ClusterObjectObjectNodeRoleMASTER ClusterObjectObjectNodeRole = "MASTER"

	// ClusterObjectObjectNodeRoleWORKER captures enum value "WORKER"
	ClusterObjectObjectNodeRoleWORKER ClusterObjectObjectNodeRole = "WORKER"
)

// for schema
var clusterObjectObjectNodeRoleEnum []interface{}

func init() {
	var res []ClusterObjectObjectNodeRole
	if err := json.Unmarshal([]byte(`["ROLE_UNSPECIFIED","MASTER","WORKER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterObjectObjectNodeRoleEnum = append(clusterObjectObjectNodeRoleEnum, v)
	}
}

func (m ClusterObjectObjectNodeRole) validateClusterObjectObjectNodeRoleEnum(path, location string, value ClusterObjectObjectNodeRole) error {
	if err := validate.EnumCase(path, location, value, clusterObjectObjectNodeRoleEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster object object node role
func (m ClusterObjectObjectNodeRole) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterObjectObjectNodeRoleEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cluster object object node role based on context it is used
func (m ClusterObjectObjectNodeRole) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
