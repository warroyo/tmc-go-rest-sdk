// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TanzupackageTapSolutionPhase Phase of the profile and individual cluster packages.
//
//   - PHASE_UNSPECIFIED: Unspecified phase.
//   - PENDING: Pending phase.
//   - APPLIED: Applied phase.
//   - ERROR: Error phase.
//   - DELETING: Deleting phase.
//
// swagger:model tanzupackage.tap.solution.Phase
type TanzupackageTapSolutionPhase string

func NewTanzupackageTapSolutionPhase(value TanzupackageTapSolutionPhase) *TanzupackageTapSolutionPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TanzupackageTapSolutionPhase.
func (m TanzupackageTapSolutionPhase) Pointer() *TanzupackageTapSolutionPhase {
	return &m
}

const (

	// TanzupackageTapSolutionPhasePHASEUNSPECIFIED captures enum value "PHASE_UNSPECIFIED"
	TanzupackageTapSolutionPhasePHASEUNSPECIFIED TanzupackageTapSolutionPhase = "PHASE_UNSPECIFIED"

	// TanzupackageTapSolutionPhasePENDING captures enum value "PENDING"
	TanzupackageTapSolutionPhasePENDING TanzupackageTapSolutionPhase = "PENDING"

	// TanzupackageTapSolutionPhaseAPPLIED captures enum value "APPLIED"
	TanzupackageTapSolutionPhaseAPPLIED TanzupackageTapSolutionPhase = "APPLIED"

	// TanzupackageTapSolutionPhaseERROR captures enum value "ERROR"
	TanzupackageTapSolutionPhaseERROR TanzupackageTapSolutionPhase = "ERROR"

	// TanzupackageTapSolutionPhaseDELETING captures enum value "DELETING"
	TanzupackageTapSolutionPhaseDELETING TanzupackageTapSolutionPhase = "DELETING"
)

// for schema
var tanzupackageTapSolutionPhaseEnum []interface{}

func init() {
	var res []TanzupackageTapSolutionPhase
	if err := json.Unmarshal([]byte(`["PHASE_UNSPECIFIED","PENDING","APPLIED","ERROR","DELETING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tanzupackageTapSolutionPhaseEnum = append(tanzupackageTapSolutionPhaseEnum, v)
	}
}

func (m TanzupackageTapSolutionPhase) validateTanzupackageTapSolutionPhaseEnum(path, location string, value TanzupackageTapSolutionPhase) error {
	if err := validate.EnumCase(path, location, value, tanzupackageTapSolutionPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this tanzupackage tap solution phase
func (m TanzupackageTapSolutionPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTanzupackageTapSolutionPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this tanzupackage tap solution phase based on context it is used
func (m TanzupackageTapSolutionPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
