// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterNamespaceFluxcdGitrepositoryGitImplementation GitImplementation specifies which client library implementation to use.
//
//   - GO_GIT: GO_GIT specifies go-git library to use.
//   - LIB_GIT2: LIB_GIT2 specifies libgit2 library to use which supports git v2 protocol.
//
// swagger:model cluster.namespace.fluxcd.gitrepository.GitImplementation
type ClusterNamespaceFluxcdGitrepositoryGitImplementation string

func NewClusterNamespaceFluxcdGitrepositoryGitImplementation(value ClusterNamespaceFluxcdGitrepositoryGitImplementation) *ClusterNamespaceFluxcdGitrepositoryGitImplementation {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClusterNamespaceFluxcdGitrepositoryGitImplementation.
func (m ClusterNamespaceFluxcdGitrepositoryGitImplementation) Pointer() *ClusterNamespaceFluxcdGitrepositoryGitImplementation {
	return &m
}

const (

	// ClusterNamespaceFluxcdGitrepositoryGitImplementationGOGIT captures enum value "GO_GIT"
	ClusterNamespaceFluxcdGitrepositoryGitImplementationGOGIT ClusterNamespaceFluxcdGitrepositoryGitImplementation = "GO_GIT"

	// ClusterNamespaceFluxcdGitrepositoryGitImplementationLIBGIT2 captures enum value "LIB_GIT2"
	ClusterNamespaceFluxcdGitrepositoryGitImplementationLIBGIT2 ClusterNamespaceFluxcdGitrepositoryGitImplementation = "LIB_GIT2"
)

// for schema
var clusterNamespaceFluxcdGitrepositoryGitImplementationEnum []interface{}

func init() {
	var res []ClusterNamespaceFluxcdGitrepositoryGitImplementation
	if err := json.Unmarshal([]byte(`["GO_GIT","LIB_GIT2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterNamespaceFluxcdGitrepositoryGitImplementationEnum = append(clusterNamespaceFluxcdGitrepositoryGitImplementationEnum, v)
	}
}

func (m ClusterNamespaceFluxcdGitrepositoryGitImplementation) validateClusterNamespaceFluxcdGitrepositoryGitImplementationEnum(path, location string, value ClusterNamespaceFluxcdGitrepositoryGitImplementation) error {
	if err := validate.EnumCase(path, location, value, clusterNamespaceFluxcdGitrepositoryGitImplementationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster namespace fluxcd gitrepository git implementation
func (m ClusterNamespaceFluxcdGitrepositoryGitImplementation) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterNamespaceFluxcdGitrepositoryGitImplementationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cluster namespace fluxcd gitrepository git implementation based on context it is used
func (m ClusterNamespaceFluxcdGitrepositoryGitImplementation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
