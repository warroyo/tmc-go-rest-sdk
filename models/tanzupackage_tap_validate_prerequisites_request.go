// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TanzupackageTapValidatePrerequisitesRequest Request to validate whether cluster meets the pre-requisites for the specified TAP package.
//
// swagger:model tanzupackage.tap.ValidatePrerequisitesRequest
type TanzupackageTapValidatePrerequisitesRequest struct {

	// Full name of the cluster.
	FullName *ClusterFullName `json:"fullName,omitempty"`

	// Package ref for which pre-requisites need to be validated.
	PackageFullName *TanzupackageMetadataPackageFullName `json:"packageFullName,omitempty"`

	// TAP profile.
	Profile string `json:"profile,omitempty"`
}

// Validate validates this tanzupackage tap validate prerequisites request
func (m *TanzupackageTapValidatePrerequisitesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFullName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageFullName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TanzupackageTapValidatePrerequisitesRequest) validateFullName(formats strfmt.Registry) error {
	if swag.IsZero(m.FullName) { // not required
		return nil
	}

	if m.FullName != nil {
		if err := m.FullName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fullName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fullName")
			}
			return err
		}
	}

	return nil
}

func (m *TanzupackageTapValidatePrerequisitesRequest) validatePackageFullName(formats strfmt.Registry) error {
	if swag.IsZero(m.PackageFullName) { // not required
		return nil
	}

	if m.PackageFullName != nil {
		if err := m.PackageFullName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageFullName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageFullName")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tanzupackage tap validate prerequisites request based on the context it is used
func (m *TanzupackageTapValidatePrerequisitesRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFullName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackageFullName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TanzupackageTapValidatePrerequisitesRequest) contextValidateFullName(ctx context.Context, formats strfmt.Registry) error {

	if m.FullName != nil {
		if err := m.FullName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fullName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fullName")
			}
			return err
		}
	}

	return nil
}

func (m *TanzupackageTapValidatePrerequisitesRequest) contextValidatePackageFullName(ctx context.Context, formats strfmt.Registry) error {

	if m.PackageFullName != nil {
		if err := m.PackageFullName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageFullName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageFullName")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TanzupackageTapValidatePrerequisitesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TanzupackageTapValidatePrerequisitesRequest) UnmarshalBinary(b []byte) error {
	var res TanzupackageTapValidatePrerequisitesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
