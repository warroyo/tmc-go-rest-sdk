// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterKubeconfigCliType CliType will help identify the appropriate kubeconfig to be returned for CLI application.
//
//   - TMC_CLI: TMC_CLI platform.
//   - TANZU_CLI: TANZU_CLI platform.
//
// swagger:model cluster.kubeconfig.CliType
type ClusterKubeconfigCliType string

func NewClusterKubeconfigCliType(value ClusterKubeconfigCliType) *ClusterKubeconfigCliType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClusterKubeconfigCliType.
func (m ClusterKubeconfigCliType) Pointer() *ClusterKubeconfigCliType {
	return &m
}

const (

	// ClusterKubeconfigCliTypeTMCCLI captures enum value "TMC_CLI"
	ClusterKubeconfigCliTypeTMCCLI ClusterKubeconfigCliType = "TMC_CLI"

	// ClusterKubeconfigCliTypeTANZUCLI captures enum value "TANZU_CLI"
	ClusterKubeconfigCliTypeTANZUCLI ClusterKubeconfigCliType = "TANZU_CLI"
)

// for schema
var clusterKubeconfigCliTypeEnum []interface{}

func init() {
	var res []ClusterKubeconfigCliType
	if err := json.Unmarshal([]byte(`["TMC_CLI","TANZU_CLI"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterKubeconfigCliTypeEnum = append(clusterKubeconfigCliTypeEnum, v)
	}
}

func (m ClusterKubeconfigCliType) validateClusterKubeconfigCliTypeEnum(path, location string, value ClusterKubeconfigCliType) error {
	if err := validate.EnumCase(path, location, value, clusterKubeconfigCliTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster kubeconfig cli type
func (m ClusterKubeconfigCliType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterKubeconfigCliTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cluster kubeconfig cli type based on context it is used
func (m ClusterKubeconfigCliType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
