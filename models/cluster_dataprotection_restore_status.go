// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterDataprotectionRestoreStatus Status of the restore resource.
//
// swagger:model cluster.dataprotection.restore.Status
type ClusterDataprotectionRestoreStatus struct {

	// A list of available phases for restore object.
	AvailablePhases []*ClusterDataprotectionRestoreStatusPhase `json:"availablePhases"`

	// The timestamp when a restore was completed.
	// Format: date-time
	CompletionTime strfmt.DateTime `json:"completionTime,omitempty"`

	// The conditions attached to this backup object.
	// The description of the conditions is as follows:
	// - "Scheduled" with status 'Unknown' indicates the restore request has not been applied to the cluster yet
	// - "Scheduled" with status 'False' indicates the request could not be forwarded to the cluster (e.g. intent generation failure)
	// - "Scheduled" with status 'True' and "Ready" with status 'Unknown' indicates the restore create / delete intent has been applied / deleted but not yet acted upon
	// - "Ready" with status 'True' indicates the the creation of restore is complete
	// - "Ready" with status 'False' indicates the the creation of restore is in error state.
	Conditions map[string]VmwareTanzuCoreV1alpha1StatusCondition `json:"conditions,omitempty"`

	// The count of all error messages that were generated during execution of the restore.
	// The actual errors are stored in object storage.
	Errors int32 `json:"errors,omitempty"`

	// An error that caused the entire restore to fail.
	FailureReason string `json:"failureReason,omitempty"`

	// This holds the status of the action to collect restore resources which is triggered on the cluster once the restore completes.
	GatherRestoreResourcesStatus *ClusterDataprotectionRestoreGatherRestoreResourcesStatus `json:"gatherRestoreResourcesStatus,omitempty"`

	// The resource generation the current status applies to.
	ObservedGeneration string `json:"observedGeneration,omitempty"`

	// The current state of the Restore.
	Phase *ClusterDataprotectionRestoreStatusPhase `json:"phase,omitempty"`

	// Additional info about the phase.
	PhaseInfo string `json:"phaseInfo,omitempty"`

	// The restore progress so far.
	Progress *ClusterDataprotectionRestoreProgress `json:"progress,omitempty"`

	// The URL to download the restore logs.
	RestoreLogsURL string `json:"restoreLogsUrl,omitempty"`

	// The URL to download the restore results.
	RestoreResultsURL string `json:"restoreResultsUrl,omitempty"`

	// The list all validation errors (if applicable).
	ValidationErrors []string `json:"validationErrors"`

	// Information about volumes restored.
	VolumeRestores []*ClusterDataprotectionRestoreVolumeRestore `json:"volumeRestores"`

	// The count of all warning messages that were generated during execution of the restore.
	// The actual warnings are stored in object storage.
	Warnings int32 `json:"warnings,omitempty"`
}

// Validate validates this cluster dataprotection restore status
func (m *ClusterDataprotectionRestoreStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailablePhases(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompletionTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatherRestoreResourcesStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeRestores(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDataprotectionRestoreStatus) validateAvailablePhases(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailablePhases) { // not required
		return nil
	}

	for i := 0; i < len(m.AvailablePhases); i++ {
		if swag.IsZero(m.AvailablePhases[i]) { // not required
			continue
		}

		if m.AvailablePhases[i] != nil {
			if err := m.AvailablePhases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("availablePhases" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("availablePhases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterDataprotectionRestoreStatus) validateCompletionTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CompletionTime) { // not required
		return nil
	}

	if err := validate.FormatOf("completionTime", "body", "date-time", m.CompletionTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ClusterDataprotectionRestoreStatus) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for k := range m.Conditions {

		if err := validate.Required("conditions"+"."+k, "body", m.Conditions[k]); err != nil {
			return err
		}
		if val, ok := m.Conditions[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterDataprotectionRestoreStatus) validateGatherRestoreResourcesStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.GatherRestoreResourcesStatus) { // not required
		return nil
	}

	if m.GatherRestoreResourcesStatus != nil {
		if err := m.GatherRestoreResourcesStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gatherRestoreResourcesStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gatherRestoreResourcesStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDataprotectionRestoreStatus) validatePhase(formats strfmt.Registry) error {
	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	if m.Phase != nil {
		if err := m.Phase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDataprotectionRestoreStatus) validateProgress(formats strfmt.Registry) error {
	if swag.IsZero(m.Progress) { // not required
		return nil
	}

	if m.Progress != nil {
		if err := m.Progress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("progress")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDataprotectionRestoreStatus) validateVolumeRestores(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeRestores) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumeRestores); i++ {
		if swag.IsZero(m.VolumeRestores[i]) { // not required
			continue
		}

		if m.VolumeRestores[i] != nil {
			if err := m.VolumeRestores[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeRestores" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeRestores" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cluster dataprotection restore status based on the context it is used
func (m *ClusterDataprotectionRestoreStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvailablePhases(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGatherRestoreResourcesStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProgress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumeRestores(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDataprotectionRestoreStatus) contextValidateAvailablePhases(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AvailablePhases); i++ {

		if m.AvailablePhases[i] != nil {
			if err := m.AvailablePhases[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("availablePhases" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("availablePhases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterDataprotectionRestoreStatus) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Conditions {

		if val, ok := m.Conditions[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ClusterDataprotectionRestoreStatus) contextValidateGatherRestoreResourcesStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.GatherRestoreResourcesStatus != nil {
		if err := m.GatherRestoreResourcesStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gatherRestoreResourcesStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gatherRestoreResourcesStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDataprotectionRestoreStatus) contextValidatePhase(ctx context.Context, formats strfmt.Registry) error {

	if m.Phase != nil {
		if err := m.Phase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDataprotectionRestoreStatus) contextValidateProgress(ctx context.Context, formats strfmt.Registry) error {

	if m.Progress != nil {
		if err := m.Progress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("progress")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDataprotectionRestoreStatus) contextValidateVolumeRestores(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VolumeRestores); i++ {

		if m.VolumeRestores[i] != nil {
			if err := m.VolumeRestores[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeRestores" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeRestores" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterDataprotectionRestoreStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterDataprotectionRestoreStatus) UnmarshalBinary(b []byte) error {
	var res ClusterDataprotectionRestoreStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
