// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OrganizationIntegrationPhase Integration Lifecycle Phase.
//
//   - UNSPECIFIED: Unspecified  phase.
//   - ENABLING: Enabling phase when process for enabling integration for an organization is started.
//   - REGISTERED: Registered phase when communication between inter product services is completed successfully for enabling integration.
//   - ENABLED: Enabled phase when integration is enabled for an organization.
//   - INITIATION_ERROR: Initiation Error phase when there is any issue during enablement of the integration.
//   - DISABLING: Disabling phase when process for removing integration from organization is started.
//   - UNREGISTERED: Unregistered phase when communication between inter product services is completed successfully
//
// for disabling integration.
//   - TERMINATION_ERROR: Termination Error phase when there is any issue during disablement of the integration.
//   - DISABLED: Disabled phase when integration is disabled from org / yet to be enabled.
//
// swagger:model organization.integration.Phase
type OrganizationIntegrationPhase string

func NewOrganizationIntegrationPhase(value OrganizationIntegrationPhase) *OrganizationIntegrationPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OrganizationIntegrationPhase.
func (m OrganizationIntegrationPhase) Pointer() *OrganizationIntegrationPhase {
	return &m
}

const (

	// OrganizationIntegrationPhaseUNSPECIFIED captures enum value "UNSPECIFIED"
	OrganizationIntegrationPhaseUNSPECIFIED OrganizationIntegrationPhase = "UNSPECIFIED"

	// OrganizationIntegrationPhaseENABLING captures enum value "ENABLING"
	OrganizationIntegrationPhaseENABLING OrganizationIntegrationPhase = "ENABLING"

	// OrganizationIntegrationPhaseREGISTERED captures enum value "REGISTERED"
	OrganizationIntegrationPhaseREGISTERED OrganizationIntegrationPhase = "REGISTERED"

	// OrganizationIntegrationPhaseENABLED captures enum value "ENABLED"
	OrganizationIntegrationPhaseENABLED OrganizationIntegrationPhase = "ENABLED"

	// OrganizationIntegrationPhaseINITIATIONERROR captures enum value "INITIATION_ERROR"
	OrganizationIntegrationPhaseINITIATIONERROR OrganizationIntegrationPhase = "INITIATION_ERROR"

	// OrganizationIntegrationPhaseDISABLING captures enum value "DISABLING"
	OrganizationIntegrationPhaseDISABLING OrganizationIntegrationPhase = "DISABLING"

	// OrganizationIntegrationPhaseUNREGISTERED captures enum value "UNREGISTERED"
	OrganizationIntegrationPhaseUNREGISTERED OrganizationIntegrationPhase = "UNREGISTERED"

	// OrganizationIntegrationPhaseTERMINATIONERROR captures enum value "TERMINATION_ERROR"
	OrganizationIntegrationPhaseTERMINATIONERROR OrganizationIntegrationPhase = "TERMINATION_ERROR"

	// OrganizationIntegrationPhaseDISABLED captures enum value "DISABLED"
	OrganizationIntegrationPhaseDISABLED OrganizationIntegrationPhase = "DISABLED"
)

// for schema
var organizationIntegrationPhaseEnum []interface{}

func init() {
	var res []OrganizationIntegrationPhase
	if err := json.Unmarshal([]byte(`["UNSPECIFIED","ENABLING","REGISTERED","ENABLED","INITIATION_ERROR","DISABLING","UNREGISTERED","TERMINATION_ERROR","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		organizationIntegrationPhaseEnum = append(organizationIntegrationPhaseEnum, v)
	}
}

func (m OrganizationIntegrationPhase) validateOrganizationIntegrationPhaseEnum(path, location string, value OrganizationIntegrationPhase) error {
	if err := validate.EnumCase(path, location, value, organizationIntegrationPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this organization integration phase
func (m OrganizationIntegrationPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrganizationIntegrationPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this organization integration phase based on context it is used
func (m OrganizationIntegrationPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
