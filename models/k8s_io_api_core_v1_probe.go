// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// K8sIoAPICoreV1Probe Probe describes a health check to be performed against a container to determine whether it is
// alive or ready to receive traffic.
//
// swagger:model k8s.io.api.core.v1.Probe
type K8sIoAPICoreV1Probe struct {

	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	// Defaults to 3. Minimum value is 1.
	// +optional
	FailureThreshold int32 `json:"failureThreshold,omitempty"`

	// The action taken to determine the health of a container
	Handler *K8sIoAPICoreV1Handler `json:"handler,omitempty"`

	// Number of seconds after the container has started before liveness probes are initiated.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	// +optional
	InitialDelaySeconds int32 `json:"initialDelaySeconds,omitempty"`

	// How often (in seconds) to perform the probe.
	// Default to 10 seconds. Minimum value is 1.
	// +optional
	PeriodSeconds int32 `json:"periodSeconds,omitempty"`

	// Minimum consecutive successes for the probe to be considered successful after having failed.
	// Defaults to 1. Must be 1 for liveness. Minimum value is 1.
	// +optional
	SuccessThreshold int32 `json:"successThreshold,omitempty"`

	// Number of seconds after which the probe times out.
	// Defaults to 1 second. Minimum value is 1.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	// +optional
	TimeoutSeconds int32 `json:"timeoutSeconds,omitempty"`
}

// Validate validates this k8s io api core v1 probe
func (m *K8sIoAPICoreV1Probe) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHandler(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *K8sIoAPICoreV1Probe) validateHandler(formats strfmt.Registry) error {
	if swag.IsZero(m.Handler) { // not required
		return nil
	}

	if m.Handler != nil {
		if err := m.Handler.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("handler")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("handler")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this k8s io api core v1 probe based on the context it is used
func (m *K8sIoAPICoreV1Probe) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHandler(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *K8sIoAPICoreV1Probe) contextValidateHandler(ctx context.Context, formats strfmt.Registry) error {

	if m.Handler != nil {
		if err := m.Handler.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("handler")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("handler")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *K8sIoAPICoreV1Probe) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *K8sIoAPICoreV1Probe) UnmarshalBinary(b []byte) error {
	var res K8sIoAPICoreV1Probe
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
