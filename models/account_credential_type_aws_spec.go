// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AccountCredentialTypeAwsSpec AWS credential spec.
//
// swagger:model account.credential.type.aws.Spec
type AccountCredentialTypeAwsSpec struct {

	// AWS access key ID and secret access key.
	AccessKey *AccountCredentialTypeAwsAccessKey `json:"accessKey,omitempty"`

	// Account ID of the AWS credential.
	AccountID string `json:"accountId,omitempty"`

	// Generic credential.
	GenericCredential string `json:"genericCredential,omitempty"`

	// AWS IAM role ARN and external ID.
	IamRole *AccountCredentialTypeAwsIAMRole `json:"iamRole,omitempty"`
}

// Validate validates this account credential type aws spec
func (m *AccountCredentialTypeAwsSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIamRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountCredentialTypeAwsSpec) validateAccessKey(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessKey) { // not required
		return nil
	}

	if m.AccessKey != nil {
		if err := m.AccessKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessKey")
			}
			return err
		}
	}

	return nil
}

func (m *AccountCredentialTypeAwsSpec) validateIamRole(formats strfmt.Registry) error {
	if swag.IsZero(m.IamRole) { // not required
		return nil
	}

	if m.IamRole != nil {
		if err := m.IamRole.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iamRole")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iamRole")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this account credential type aws spec based on the context it is used
func (m *AccountCredentialTypeAwsSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIamRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountCredentialTypeAwsSpec) contextValidateAccessKey(ctx context.Context, formats strfmt.Registry) error {

	if m.AccessKey != nil {
		if err := m.AccessKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessKey")
			}
			return err
		}
	}

	return nil
}

func (m *AccountCredentialTypeAwsSpec) contextValidateIamRole(ctx context.Context, formats strfmt.Registry) error {

	if m.IamRole != nil {
		if err := m.IamRole.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iamRole")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("iamRole")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountCredentialTypeAwsSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountCredentialTypeAwsSpec) UnmarshalBinary(b []byte) error {
	var res AccountCredentialTypeAwsSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
