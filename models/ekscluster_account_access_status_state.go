// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EksclusterAccountAccessStatusState The state of our access to the AWS account.
//
//   - STATE_UNSPECIFIED: Unspecified state.
//   - PENDING: Still in the process of accessing the customer's AWS account.
//   - SUCCEEDED: Successfully accessed customer's AWS account.
//   - FAILED: Failed to access customer's AWS account.
//   - INVALID: Invalid access definition for the AWS account.
//
// swagger:model ekscluster.AccountAccessStatus.State
type EksclusterAccountAccessStatusState string

func NewEksclusterAccountAccessStatusState(value EksclusterAccountAccessStatusState) *EksclusterAccountAccessStatusState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EksclusterAccountAccessStatusState.
func (m EksclusterAccountAccessStatusState) Pointer() *EksclusterAccountAccessStatusState {
	return &m
}

const (

	// EksclusterAccountAccessStatusStateSTATEUNSPECIFIED captures enum value "STATE_UNSPECIFIED"
	EksclusterAccountAccessStatusStateSTATEUNSPECIFIED EksclusterAccountAccessStatusState = "STATE_UNSPECIFIED"

	// EksclusterAccountAccessStatusStatePENDING captures enum value "PENDING"
	EksclusterAccountAccessStatusStatePENDING EksclusterAccountAccessStatusState = "PENDING"

	// EksclusterAccountAccessStatusStateSUCCEEDED captures enum value "SUCCEEDED"
	EksclusterAccountAccessStatusStateSUCCEEDED EksclusterAccountAccessStatusState = "SUCCEEDED"

	// EksclusterAccountAccessStatusStateFAILED captures enum value "FAILED"
	EksclusterAccountAccessStatusStateFAILED EksclusterAccountAccessStatusState = "FAILED"

	// EksclusterAccountAccessStatusStateINVALID captures enum value "INVALID"
	EksclusterAccountAccessStatusStateINVALID EksclusterAccountAccessStatusState = "INVALID"
)

// for schema
var eksclusterAccountAccessStatusStateEnum []interface{}

func init() {
	var res []EksclusterAccountAccessStatusState
	if err := json.Unmarshal([]byte(`["STATE_UNSPECIFIED","PENDING","SUCCEEDED","FAILED","INVALID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eksclusterAccountAccessStatusStateEnum = append(eksclusterAccountAccessStatusStateEnum, v)
	}
}

func (m EksclusterAccountAccessStatusState) validateEksclusterAccountAccessStatusStateEnum(path, location string, value EksclusterAccountAccessStatusState) error {
	if err := validate.EnumCase(path, location, value, eksclusterAccountAccessStatusStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this ekscluster account access status state
func (m EksclusterAccountAccessStatusState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEksclusterAccountAccessStatusStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this ekscluster account access status state based on context it is used
func (m EksclusterAccountAccessStatusState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
