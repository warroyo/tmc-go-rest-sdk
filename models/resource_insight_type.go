// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResourceInsightType Type specifies the different types of insights.
//
//   - TYPE_UNSPECIFIED: Unknown type.
//   - ERROR: Insight about an error scenario.
//   - OVERRIDE: Insight about override.
//
// For example: source resource on organization was overridden on cluster or cluster group by another resource.
//
// swagger:model resource.insight.Type
type ResourceInsightType string

func NewResourceInsightType(value ResourceInsightType) *ResourceInsightType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ResourceInsightType.
func (m ResourceInsightType) Pointer() *ResourceInsightType {
	return &m
}

const (

	// ResourceInsightTypeTYPEUNSPECIFIED captures enum value "TYPE_UNSPECIFIED"
	ResourceInsightTypeTYPEUNSPECIFIED ResourceInsightType = "TYPE_UNSPECIFIED"

	// ResourceInsightTypeERROR captures enum value "ERROR"
	ResourceInsightTypeERROR ResourceInsightType = "ERROR"

	// ResourceInsightTypeOVERRIDE captures enum value "OVERRIDE"
	ResourceInsightTypeOVERRIDE ResourceInsightType = "OVERRIDE"
)

// for schema
var resourceInsightTypeEnum []interface{}

func init() {
	var res []ResourceInsightType
	if err := json.Unmarshal([]byte(`["TYPE_UNSPECIFIED","ERROR","OVERRIDE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceInsightTypeEnum = append(resourceInsightTypeEnum, v)
	}
}

func (m ResourceInsightType) validateResourceInsightTypeEnum(path, location string, value ResourceInsightType) error {
	if err := validate.EnumCase(path, location, value, resourceInsightTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this resource insight type
func (m ResourceInsightType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResourceInsightTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this resource insight type based on context it is used
func (m ResourceInsightType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
