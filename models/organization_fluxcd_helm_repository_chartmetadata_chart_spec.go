// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrganizationFluxcdHelmRepositoryChartmetadataChartSpec Spec of the helm chart.
//
// swagger:model organization.fluxcd.helm.repository.chartmetadata.chart.Spec
type OrganizationFluxcdHelmRepositoryChartmetadataChartSpec struct {

	// The chart API version.
	APIVersion string `json:"apiVersion,omitempty"`

	// Application version of the chart.
	AppVersion string `json:"appVersion,omitempty"`

	// List of the chart requirements.
	Dependencies []*OrganizationFluxcdHelmRepositoryChartmetadataChartDependency `json:"dependencies"`

	// Whether this chart is deprecated.
	Deprecated bool `json:"deprecated,omitempty"`

	// A SemVer range of compatible Kubernetes versions.
	KubeVersion string `json:"kubeVersion,omitempty"`

	// Date on which helm chart is released.
	// Format: date-time
	ReleasedAt strfmt.DateTime `json:"releasedAt,omitempty"`

	// List of URLs to source code for this project.
	Sources []string `json:"sources"`

	// List of URLs to download helm chart bundle.
	Urls []string `json:"urls"`

	// Default configuration values for this chart.
	ValuesConfig string `json:"valuesConfig,omitempty"`

	// JSON Schema for imposing a structure on the values.yaml file.
	ValuesSchema interface{} `json:"valuesSchema,omitempty"`
}

// Validate validates this organization fluxcd helm repository chartmetadata chart spec
func (m *OrganizationFluxcdHelmRepositoryChartmetadataChartSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleasedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationFluxcdHelmRepositoryChartmetadataChartSpec) validateDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.Dependencies) { // not required
		return nil
	}

	for i := 0; i < len(m.Dependencies); i++ {
		if swag.IsZero(m.Dependencies[i]) { // not required
			continue
		}

		if m.Dependencies[i] != nil {
			if err := m.Dependencies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependencies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dependencies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrganizationFluxcdHelmRepositoryChartmetadataChartSpec) validateReleasedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ReleasedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("releasedAt", "body", "date-time", m.ReleasedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this organization fluxcd helm repository chartmetadata chart spec based on the context it is used
func (m *OrganizationFluxcdHelmRepositoryChartmetadataChartSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationFluxcdHelmRepositoryChartmetadataChartSpec) contextValidateDependencies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Dependencies); i++ {

		if m.Dependencies[i] != nil {
			if err := m.Dependencies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependencies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dependencies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrganizationFluxcdHelmRepositoryChartmetadataChartSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrganizationFluxcdHelmRepositoryChartmetadataChartSpec) UnmarshalBinary(b []byte) error {
	var res OrganizationFluxcdHelmRepositoryChartmetadataChartSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
