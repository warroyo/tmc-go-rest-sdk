// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterNamespaceTanzupackageInstallRoleBindingScope Enumeration defining possible scope of role binding.
//
//   - UNSPECIFIED: Default Role Binding scope. Behaviour is undefined and clients shouldn't use it.
//   - CLUSTER: Role Binding is cluster scoped on the cluster.
//   - NAMESPACE: Role Binding is namespace scoped on the cluster.
//
// swagger:model cluster.namespace.tanzupackage.install.RoleBindingScope
type ClusterNamespaceTanzupackageInstallRoleBindingScope string

func NewClusterNamespaceTanzupackageInstallRoleBindingScope(value ClusterNamespaceTanzupackageInstallRoleBindingScope) *ClusterNamespaceTanzupackageInstallRoleBindingScope {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClusterNamespaceTanzupackageInstallRoleBindingScope.
func (m ClusterNamespaceTanzupackageInstallRoleBindingScope) Pointer() *ClusterNamespaceTanzupackageInstallRoleBindingScope {
	return &m
}

const (

	// ClusterNamespaceTanzupackageInstallRoleBindingScopeUNSPECIFIED captures enum value "UNSPECIFIED"
	ClusterNamespaceTanzupackageInstallRoleBindingScopeUNSPECIFIED ClusterNamespaceTanzupackageInstallRoleBindingScope = "UNSPECIFIED"

	// ClusterNamespaceTanzupackageInstallRoleBindingScopeCLUSTER captures enum value "CLUSTER"
	ClusterNamespaceTanzupackageInstallRoleBindingScopeCLUSTER ClusterNamespaceTanzupackageInstallRoleBindingScope = "CLUSTER"

	// ClusterNamespaceTanzupackageInstallRoleBindingScopeNAMESPACE captures enum value "NAMESPACE"
	ClusterNamespaceTanzupackageInstallRoleBindingScopeNAMESPACE ClusterNamespaceTanzupackageInstallRoleBindingScope = "NAMESPACE"
)

// for schema
var clusterNamespaceTanzupackageInstallRoleBindingScopeEnum []interface{}

func init() {
	var res []ClusterNamespaceTanzupackageInstallRoleBindingScope
	if err := json.Unmarshal([]byte(`["UNSPECIFIED","CLUSTER","NAMESPACE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterNamespaceTanzupackageInstallRoleBindingScopeEnum = append(clusterNamespaceTanzupackageInstallRoleBindingScopeEnum, v)
	}
}

func (m ClusterNamespaceTanzupackageInstallRoleBindingScope) validateClusterNamespaceTanzupackageInstallRoleBindingScopeEnum(path, location string, value ClusterNamespaceTanzupackageInstallRoleBindingScope) error {
	if err := validate.EnumCase(path, location, value, clusterNamespaceTanzupackageInstallRoleBindingScopeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster namespace tanzupackage install role binding scope
func (m ClusterNamespaceTanzupackageInstallRoleBindingScope) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterNamespaceTanzupackageInstallRoleBindingScopeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cluster namespace tanzupackage install role binding scope based on context it is used
func (m ClusterNamespaceTanzupackageInstallRoleBindingScope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
