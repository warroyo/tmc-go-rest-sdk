// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterDataprotectionStatusPhase Available phases for data protection object.
//
//   - PHASE_UNSPECIFIED: Phase_unspecified is the default phase.
//   - PENDING: Pending phase is set when the data protection object is being processed by the service (TMC).
//   - CREATING: Creating phase is set when data protection is being enabled on the cluster.
//   - PENDING_DELETE: Pending delete is set when the data protection delete is being processed by the service.
//   - DELETING: Deleting the set when the data protection delete is in progress on the the cluster.
//   - READY: Ready phase is set when the data protection is successfully enabled.
//   - ERROR: Error phase is set when there was a failure while creating/deleting data protection.
//   - UPDATING: Updating is set when the data protection is being updated.
//
// swagger:model cluster.dataprotection.Status.Phase
type ClusterDataprotectionStatusPhase string

func NewClusterDataprotectionStatusPhase(value ClusterDataprotectionStatusPhase) *ClusterDataprotectionStatusPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClusterDataprotectionStatusPhase.
func (m ClusterDataprotectionStatusPhase) Pointer() *ClusterDataprotectionStatusPhase {
	return &m
}

const (

	// ClusterDataprotectionStatusPhasePHASEUNSPECIFIED captures enum value "PHASE_UNSPECIFIED"
	ClusterDataprotectionStatusPhasePHASEUNSPECIFIED ClusterDataprotectionStatusPhase = "PHASE_UNSPECIFIED"

	// ClusterDataprotectionStatusPhasePENDING captures enum value "PENDING"
	ClusterDataprotectionStatusPhasePENDING ClusterDataprotectionStatusPhase = "PENDING"

	// ClusterDataprotectionStatusPhaseCREATING captures enum value "CREATING"
	ClusterDataprotectionStatusPhaseCREATING ClusterDataprotectionStatusPhase = "CREATING"

	// ClusterDataprotectionStatusPhasePENDINGDELETE captures enum value "PENDING_DELETE"
	ClusterDataprotectionStatusPhasePENDINGDELETE ClusterDataprotectionStatusPhase = "PENDING_DELETE"

	// ClusterDataprotectionStatusPhaseDELETING captures enum value "DELETING"
	ClusterDataprotectionStatusPhaseDELETING ClusterDataprotectionStatusPhase = "DELETING"

	// ClusterDataprotectionStatusPhaseREADY captures enum value "READY"
	ClusterDataprotectionStatusPhaseREADY ClusterDataprotectionStatusPhase = "READY"

	// ClusterDataprotectionStatusPhaseERROR captures enum value "ERROR"
	ClusterDataprotectionStatusPhaseERROR ClusterDataprotectionStatusPhase = "ERROR"

	// ClusterDataprotectionStatusPhaseUPDATING captures enum value "UPDATING"
	ClusterDataprotectionStatusPhaseUPDATING ClusterDataprotectionStatusPhase = "UPDATING"
)

// for schema
var clusterDataprotectionStatusPhaseEnum []interface{}

func init() {
	var res []ClusterDataprotectionStatusPhase
	if err := json.Unmarshal([]byte(`["PHASE_UNSPECIFIED","PENDING","CREATING","PENDING_DELETE","DELETING","READY","ERROR","UPDATING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterDataprotectionStatusPhaseEnum = append(clusterDataprotectionStatusPhaseEnum, v)
	}
}

func (m ClusterDataprotectionStatusPhase) validateClusterDataprotectionStatusPhaseEnum(path, location string, value ClusterDataprotectionStatusPhase) error {
	if err := validate.EnumCase(path, location, value, clusterDataprotectionStatusPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster dataprotection status phase
func (m ClusterDataprotectionStatusPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterDataprotectionStatusPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cluster dataprotection status phase based on context it is used
func (m ClusterDataprotectionStatusPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
