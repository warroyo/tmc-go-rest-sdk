// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AntreaIoAntreaPkgApisCrdV1alpha1TransportHeader TransportHeader describes spec of a TransportHeader.
//
// swagger:model antrea_io.antrea.pkg.apis.crd.v1alpha1.TransportHeader
type AntreaIoAntreaPkgApisCrdV1alpha1TransportHeader struct {

	// icmp
	Icmp *AntreaIoAntreaPkgApisCrdV1alpha1ICMPEchoRequestHeader `json:"icmp,omitempty"`

	// tcp
	TCP *AntreaIoAntreaPkgApisCrdV1alpha1TCPHeader `json:"tcp,omitempty"`

	// udp
	UDP *AntreaIoAntreaPkgApisCrdV1alpha1UDPHeader `json:"udp,omitempty"`
}

// Validate validates this antrea io antrea pkg apis crd v1alpha1 transport header
func (m *AntreaIoAntreaPkgApisCrdV1alpha1TransportHeader) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIcmp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTCP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUDP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1alpha1TransportHeader) validateIcmp(formats strfmt.Registry) error {
	if swag.IsZero(m.Icmp) { // not required
		return nil
	}

	if m.Icmp != nil {
		if err := m.Icmp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("icmp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("icmp")
			}
			return err
		}
	}

	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1alpha1TransportHeader) validateTCP(formats strfmt.Registry) error {
	if swag.IsZero(m.TCP) { // not required
		return nil
	}

	if m.TCP != nil {
		if err := m.TCP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tcp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tcp")
			}
			return err
		}
	}

	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1alpha1TransportHeader) validateUDP(formats strfmt.Registry) error {
	if swag.IsZero(m.UDP) { // not required
		return nil
	}

	if m.UDP != nil {
		if err := m.UDP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udp")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this antrea io antrea pkg apis crd v1alpha1 transport header based on the context it is used
func (m *AntreaIoAntreaPkgApisCrdV1alpha1TransportHeader) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIcmp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTCP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUDP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1alpha1TransportHeader) contextValidateIcmp(ctx context.Context, formats strfmt.Registry) error {

	if m.Icmp != nil {
		if err := m.Icmp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("icmp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("icmp")
			}
			return err
		}
	}

	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1alpha1TransportHeader) contextValidateTCP(ctx context.Context, formats strfmt.Registry) error {

	if m.TCP != nil {
		if err := m.TCP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tcp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tcp")
			}
			return err
		}
	}

	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1alpha1TransportHeader) contextValidateUDP(ctx context.Context, formats strfmt.Registry) error {

	if m.UDP != nil {
		if err := m.UDP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AntreaIoAntreaPkgApisCrdV1alpha1TransportHeader) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AntreaIoAntreaPkgApisCrdV1alpha1TransportHeader) UnmarshalBinary(b []byte) error {
	var res AntreaIoAntreaPkgApisCrdV1alpha1TransportHeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
