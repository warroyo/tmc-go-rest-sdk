// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AksclusterNodepoolOsDiskType The OS disk type of the nodepool.
//
//   - OS_DISK_TYPE_UNSPECIFIED: Unspecified OS disk type.
//   - EPHEMERAL: Ephemeral OS disks are stored only on the host machine, just like a temporary disk. This provides lower read/write latency, along with faster node scaling and cluster upgrades.
//   - MANAGED: Azure replicates the operating system disk for a virtual machine to Azure storage to avoid data loss should the VM need to be relocated to another host
//
// swagger:model akscluster.nodepool.OsDiskType
type AksclusterNodepoolOsDiskType string

func NewAksclusterNodepoolOsDiskType(value AksclusterNodepoolOsDiskType) *AksclusterNodepoolOsDiskType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AksclusterNodepoolOsDiskType.
func (m AksclusterNodepoolOsDiskType) Pointer() *AksclusterNodepoolOsDiskType {
	return &m
}

const (

	// AksclusterNodepoolOsDiskTypeOSDISKTYPEUNSPECIFIED captures enum value "OS_DISK_TYPE_UNSPECIFIED"
	AksclusterNodepoolOsDiskTypeOSDISKTYPEUNSPECIFIED AksclusterNodepoolOsDiskType = "OS_DISK_TYPE_UNSPECIFIED"

	// AksclusterNodepoolOsDiskTypeEPHEMERAL captures enum value "EPHEMERAL"
	AksclusterNodepoolOsDiskTypeEPHEMERAL AksclusterNodepoolOsDiskType = "EPHEMERAL"

	// AksclusterNodepoolOsDiskTypeMANAGED captures enum value "MANAGED"
	AksclusterNodepoolOsDiskTypeMANAGED AksclusterNodepoolOsDiskType = "MANAGED"
)

// for schema
var aksclusterNodepoolOsDiskTypeEnum []interface{}

func init() {
	var res []AksclusterNodepoolOsDiskType
	if err := json.Unmarshal([]byte(`["OS_DISK_TYPE_UNSPECIFIED","EPHEMERAL","MANAGED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		aksclusterNodepoolOsDiskTypeEnum = append(aksclusterNodepoolOsDiskTypeEnum, v)
	}
}

func (m AksclusterNodepoolOsDiskType) validateAksclusterNodepoolOsDiskTypeEnum(path, location string, value AksclusterNodepoolOsDiskType) error {
	if err := validate.EnumCase(path, location, value, aksclusterNodepoolOsDiskTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this akscluster nodepool os disk type
func (m AksclusterNodepoolOsDiskType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAksclusterNodepoolOsDiskTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this akscluster nodepool os disk type based on context it is used
func (m AksclusterNodepoolOsDiskType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
