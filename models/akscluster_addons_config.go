// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AksclusterAddonsConfig The addons config.
//
// swagger:model akscluster.AddonsConfig
type AksclusterAddonsConfig struct {

	// The azure-keyvault-secrets-provider addon config.
	AzureKeyvaultSecretsProviderConfig *AksclusterAzureKeyvaultSecretsProviderAddonConfig `json:"azureKeyvaultSecretsProviderConfig,omitempty"`

	// The azure-policy addon config.
	AzurePolicyConfig *AksclusterAzurePolicyAddonConfig `json:"azurePolicyConfig,omitempty"`

	// The monitoring config.
	MonitoringConfig *AksclusterMonitoringAddonConfig `json:"monitoringConfig,omitempty"`
}

// Validate validates this akscluster addons config
func (m *AksclusterAddonsConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAzureKeyvaultSecretsProviderConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzurePolicyConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitoringConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AksclusterAddonsConfig) validateAzureKeyvaultSecretsProviderConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureKeyvaultSecretsProviderConfig) { // not required
		return nil
	}

	if m.AzureKeyvaultSecretsProviderConfig != nil {
		if err := m.AzureKeyvaultSecretsProviderConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureKeyvaultSecretsProviderConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureKeyvaultSecretsProviderConfig")
			}
			return err
		}
	}

	return nil
}

func (m *AksclusterAddonsConfig) validateAzurePolicyConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.AzurePolicyConfig) { // not required
		return nil
	}

	if m.AzurePolicyConfig != nil {
		if err := m.AzurePolicyConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azurePolicyConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azurePolicyConfig")
			}
			return err
		}
	}

	return nil
}

func (m *AksclusterAddonsConfig) validateMonitoringConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.MonitoringConfig) { // not required
		return nil
	}

	if m.MonitoringConfig != nil {
		if err := m.MonitoringConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitoringConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitoringConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this akscluster addons config based on the context it is used
func (m *AksclusterAddonsConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAzureKeyvaultSecretsProviderConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzurePolicyConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMonitoringConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AksclusterAddonsConfig) contextValidateAzureKeyvaultSecretsProviderConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureKeyvaultSecretsProviderConfig != nil {
		if err := m.AzureKeyvaultSecretsProviderConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureKeyvaultSecretsProviderConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureKeyvaultSecretsProviderConfig")
			}
			return err
		}
	}

	return nil
}

func (m *AksclusterAddonsConfig) contextValidateAzurePolicyConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.AzurePolicyConfig != nil {
		if err := m.AzurePolicyConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azurePolicyConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azurePolicyConfig")
			}
			return err
		}
	}

	return nil
}

func (m *AksclusterAddonsConfig) contextValidateMonitoringConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.MonitoringConfig != nil {
		if err := m.MonitoringConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitoringConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitoringConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AksclusterAddonsConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AksclusterAddonsConfig) UnmarshalBinary(b []byte) error {
	var res AksclusterAddonsConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
