// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VmwareTanzuCoreV1alpha1PolicyIAMPolicy Representation of an iam policy.
//
// swagger:model vmware.tanzu.core.v1alpha1.policy.IAMPolicy
type VmwareTanzuCoreV1alpha1PolicyIAMPolicy struct {

	// Metadata for this policy.
	Meta *VmwareTanzuCoreV1alpha1ObjectMeta `json:"meta,omitempty"`

	// List of role bindings associated with the policy.
	RoleBindings []*VmwareTanzuCoreV1alpha1PolicyRoleBinding `json:"roleBindings"`
}

// Validate validates this vmware tanzu core v1alpha1 policy i a m policy
func (m *VmwareTanzuCoreV1alpha1PolicyIAMPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleBindings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareTanzuCoreV1alpha1PolicyIAMPolicy) validateMeta(formats strfmt.Registry) error {
	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareTanzuCoreV1alpha1PolicyIAMPolicy) validateRoleBindings(formats strfmt.Registry) error {
	if swag.IsZero(m.RoleBindings) { // not required
		return nil
	}

	for i := 0; i < len(m.RoleBindings); i++ {
		if swag.IsZero(m.RoleBindings[i]) { // not required
			continue
		}

		if m.RoleBindings[i] != nil {
			if err := m.RoleBindings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roleBindings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("roleBindings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this vmware tanzu core v1alpha1 policy i a m policy based on the context it is used
func (m *VmwareTanzuCoreV1alpha1PolicyIAMPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoleBindings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareTanzuCoreV1alpha1PolicyIAMPolicy) contextValidateMeta(ctx context.Context, formats strfmt.Registry) error {

	if m.Meta != nil {
		if err := m.Meta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareTanzuCoreV1alpha1PolicyIAMPolicy) contextValidateRoleBindings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RoleBindings); i++ {

		if m.RoleBindings[i] != nil {
			if err := m.RoleBindings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roleBindings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("roleBindings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VmwareTanzuCoreV1alpha1PolicyIAMPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareTanzuCoreV1alpha1PolicyIAMPolicy) UnmarshalBinary(b []byte) error {
	var res VmwareTanzuCoreV1alpha1PolicyIAMPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
