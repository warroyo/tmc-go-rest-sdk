// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ManagementclusterPhase Phase of a resource.
//
//   - PHASE_UNSPECIFIED: Unspecified phase.
//   - PENDING: Resource is pending processing.
//   - PROCESSING: Processing the resource.
//   - CREATING: Resource is being created.
//   - READY: Resource is ready state.
//   - DELETING: Resource is being deleted.
//   - ERROR: Error in processing.
//   - DETACHING: Resource is being detached.
//   - READY_TO_ATTACH: Resource is ready to be attached.
//   - ATTACH_COMPLETE: Attach resource has been applied on the cluster.
//
// swagger:model managementcluster.Phase
type ManagementclusterPhase string

func NewManagementclusterPhase(value ManagementclusterPhase) *ManagementclusterPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ManagementclusterPhase.
func (m ManagementclusterPhase) Pointer() *ManagementclusterPhase {
	return &m
}

const (

	// ManagementclusterPhasePHASEUNSPECIFIED captures enum value "PHASE_UNSPECIFIED"
	ManagementclusterPhasePHASEUNSPECIFIED ManagementclusterPhase = "PHASE_UNSPECIFIED"

	// ManagementclusterPhasePENDING captures enum value "PENDING"
	ManagementclusterPhasePENDING ManagementclusterPhase = "PENDING"

	// ManagementclusterPhasePROCESSING captures enum value "PROCESSING"
	ManagementclusterPhasePROCESSING ManagementclusterPhase = "PROCESSING"

	// ManagementclusterPhaseCREATING captures enum value "CREATING"
	ManagementclusterPhaseCREATING ManagementclusterPhase = "CREATING"

	// ManagementclusterPhaseREADY captures enum value "READY"
	ManagementclusterPhaseREADY ManagementclusterPhase = "READY"

	// ManagementclusterPhaseDELETING captures enum value "DELETING"
	ManagementclusterPhaseDELETING ManagementclusterPhase = "DELETING"

	// ManagementclusterPhaseERROR captures enum value "ERROR"
	ManagementclusterPhaseERROR ManagementclusterPhase = "ERROR"

	// ManagementclusterPhaseDETACHING captures enum value "DETACHING"
	ManagementclusterPhaseDETACHING ManagementclusterPhase = "DETACHING"

	// ManagementclusterPhaseREADYTOATTACH captures enum value "READY_TO_ATTACH"
	ManagementclusterPhaseREADYTOATTACH ManagementclusterPhase = "READY_TO_ATTACH"

	// ManagementclusterPhaseATTACHCOMPLETE captures enum value "ATTACH_COMPLETE"
	ManagementclusterPhaseATTACHCOMPLETE ManagementclusterPhase = "ATTACH_COMPLETE"
)

// for schema
var managementclusterPhaseEnum []interface{}

func init() {
	var res []ManagementclusterPhase
	if err := json.Unmarshal([]byte(`["PHASE_UNSPECIFIED","PENDING","PROCESSING","CREATING","READY","DELETING","ERROR","DETACHING","READY_TO_ATTACH","ATTACH_COMPLETE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		managementclusterPhaseEnum = append(managementclusterPhaseEnum, v)
	}
}

func (m ManagementclusterPhase) validateManagementclusterPhaseEnum(path, location string, value ManagementclusterPhase) error {
	if err := validate.EnumCase(path, location, value, managementclusterPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this managementcluster phase
func (m ManagementclusterPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateManagementclusterPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this managementcluster phase based on context it is used
func (m ManagementclusterPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
