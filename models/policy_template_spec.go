// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PolicyTemplateSpec Spec of policy template.
//
// swagger:model policy.template.Spec
type PolicyTemplateSpec struct {

	// DataInventory is a list of Kubernetes api-resource kinds that need to be synced/replicated
	// in Gatekeeper in order to enforce policy rules on those resources.
	// Note: This is used for OPAGatekeeper based templates, and should be used if the policy
	// enforcement logic in Rego code uses cached data using "data.inventory" fields.
	DataInventory []*K8sIoApimachineryPkgApisMetaV1GroupVersionKind `json:"dataInventory"`

	// Deprecated specifies whether this version (latest version) of the policy template is deprecated.
	// Updating a policy template deprecates the previous versions. To view all versions, use Versions API.
	Deprecated bool `json:"deprecated,omitempty"`

	// Object is a yaml-formatted Kubernetes resource.
	// The Kubernetes object has to be of the type defined in ObjectType ('ConstraintTemplate').
	// The object name must match the name of the wrapping policy template.
	// This will be applied on the cluster after a policy is created using this version of the template.
	// This contains the latest version of the object. For previous versions, check Versions API.
	Object string `json:"object,omitempty"`

	// ObjectType is the type of Kubernetes resource encoded in Object.
	// Currently, we only support OPAGatekeeper based 'ConstraintTemplate' object.
	ObjectType string `json:"objectType,omitempty"`

	// PolicyUpdateStrategy on how to handle policies after a policy template update.
	PolicyUpdateStrategy *PolicyTemplatePolicyUpdateStrategy `json:"policyUpdateStrategy,omitempty"`

	// TemplateType is the type of policy template.
	// Currently, we only support 'OPAGatekeeper' based policy templates.
	TemplateType string `json:"templateType,omitempty"`
}

// Validate validates this policy template spec
func (m *PolicyTemplateSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDataInventory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyUpdateStrategy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyTemplateSpec) validateDataInventory(formats strfmt.Registry) error {
	if swag.IsZero(m.DataInventory) { // not required
		return nil
	}

	for i := 0; i < len(m.DataInventory); i++ {
		if swag.IsZero(m.DataInventory[i]) { // not required
			continue
		}

		if m.DataInventory[i] != nil {
			if err := m.DataInventory[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataInventory" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataInventory" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyTemplateSpec) validatePolicyUpdateStrategy(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyUpdateStrategy) { // not required
		return nil
	}

	if m.PolicyUpdateStrategy != nil {
		if err := m.PolicyUpdateStrategy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policyUpdateStrategy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policyUpdateStrategy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this policy template spec based on the context it is used
func (m *PolicyTemplateSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDataInventory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyUpdateStrategy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyTemplateSpec) contextValidateDataInventory(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DataInventory); i++ {

		if m.DataInventory[i] != nil {
			if err := m.DataInventory[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dataInventory" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dataInventory" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyTemplateSpec) contextValidatePolicyUpdateStrategy(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicyUpdateStrategy != nil {
		if err := m.PolicyUpdateStrategy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policyUpdateStrategy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policyUpdateStrategy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyTemplateSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyTemplateSpec) UnmarshalBinary(b []byte) error {
	var res PolicyTemplateSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
