// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TanzupackageTapEulaData tanzupackage tap eula data
//
// swagger:model tanzupackage.tap.eula.Data
type TanzupackageTapEulaData struct {

	// Identifies whether this user has accepted the EULA terms.
	Accepted bool `json:"accepted,omitempty"`

	// URL at which this end user license agreement can be found.
	EulaURL string `json:"eulaUrl,omitempty"`

	// Time when this EULA version was released.
	// Format: date-time
	ReleasedAt strfmt.DateTime `json:"releasedAt,omitempty"`

	// User email identifier.
	User string `json:"user,omitempty"`
}

// Validate validates this tanzupackage tap eula data
func (m *TanzupackageTapEulaData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReleasedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TanzupackageTapEulaData) validateReleasedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ReleasedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("releasedAt", "body", "date-time", m.ReleasedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tanzupackage tap eula data based on context it is used
func (m *TanzupackageTapEulaData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TanzupackageTapEulaData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TanzupackageTapEulaData) UnmarshalBinary(b []byte) error {
	var res TanzupackageTapEulaData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
