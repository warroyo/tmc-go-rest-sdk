// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterInspectionScheduleSpec Spec for the inspection schedule.
//
// swagger:model cluster.inspection.schedule.Spec
type ClusterInspectionScheduleSpec struct {

	// Inspection definition to create an inspection schedule.
	InspectionSpec *ClusterInspectionScanSpec `json:"inspectionSpec,omitempty"`

	// Rate at which the inspection schedule is run.
	Rate *CommonScheduleSchedule `json:"rate,omitempty"`
}

// Validate validates this cluster inspection schedule spec
func (m *ClusterInspectionScheduleSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInspectionSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterInspectionScheduleSpec) validateInspectionSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.InspectionSpec) { // not required
		return nil
	}

	if m.InspectionSpec != nil {
		if err := m.InspectionSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inspectionSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inspectionSpec")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterInspectionScheduleSpec) validateRate(formats strfmt.Registry) error {
	if swag.IsZero(m.Rate) { // not required
		return nil
	}

	if m.Rate != nil {
		if err := m.Rate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rate")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster inspection schedule spec based on the context it is used
func (m *ClusterInspectionScheduleSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInspectionSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterInspectionScheduleSpec) contextValidateInspectionSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.InspectionSpec != nil {
		if err := m.InspectionSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inspectionSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inspectionSpec")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterInspectionScheduleSpec) contextValidateRate(ctx context.Context, formats strfmt.Registry) error {

	if m.Rate != nil {
		if err := m.Rate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterInspectionScheduleSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterInspectionScheduleSpec) UnmarshalBinary(b []byte) error {
	var res ClusterInspectionScheduleSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
