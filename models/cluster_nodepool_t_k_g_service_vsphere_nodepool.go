// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterNodepoolTKGServiceVsphereNodepool TKGServiceVsphereNodepool is the nodepool spec for TKG service vsphere cluster.
// The values will flow via cluster:options api.
//
// swagger:model cluster.nodepool.TKGServiceVsphereNodepool
type ClusterNodepoolTKGServiceVsphereNodepool struct {

	// Nodepool instance type.
	// The potential values could be found using cluster:options api.
	Class string `json:"class,omitempty"`

	// Configure the failure domain of nodepool.
	// The potenial values could be found using cluster:options api.
	// This parameter will be ignored by the backend if the TKG service vsphere cluster doesn't support.
	FailureDomain string `json:"failureDomain,omitempty"`

	// Storage Class to be used for storage of the disks which store the root filesystem of the nodes.
	// The potential values could be found using cluster:options api.
	StorageClass string `json:"storageClass,omitempty"`

	// Configure volumes for node pool nodes.
	Volumes []*CommonClusterTKGServiceVsphereVolume `json:"volumes"`
}

// Validate validates this cluster nodepool t k g service vsphere nodepool
func (m *ClusterNodepoolTKGServiceVsphereNodepool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVolumes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNodepoolTKGServiceVsphereNodepool) validateVolumes(formats strfmt.Registry) error {
	if swag.IsZero(m.Volumes) { // not required
		return nil
	}

	for i := 0; i < len(m.Volumes); i++ {
		if swag.IsZero(m.Volumes[i]) { // not required
			continue
		}

		if m.Volumes[i] != nil {
			if err := m.Volumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cluster nodepool t k g service vsphere nodepool based on the context it is used
func (m *ClusterNodepoolTKGServiceVsphereNodepool) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVolumes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNodepoolTKGServiceVsphereNodepool) contextValidateVolumes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Volumes); i++ {

		if m.Volumes[i] != nil {
			if err := m.Volumes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterNodepoolTKGServiceVsphereNodepool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterNodepoolTKGServiceVsphereNodepool) UnmarshalBinary(b []byte) error {
	var res ClusterNodepoolTKGServiceVsphereNodepool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
