// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CommonClusterInfrastructureProvider InfrastructureProvider definition - indicates the cluster infrastructure provider.
//
//   - INFRASTRUCTURE_PROVIDER_UNSPECIFIED: Unspecified infrastructure provider (default).
//   - INFRASTRUCTURE_PROVIDER_NONE: No cloud provider (likely bare metal).
//   - AWS_EC2: AmazonWeb Services EC2.
//   - GCP_GCE: Google Cloud.
//   - AZURE_COMPUTE: Azure Compute.
//   - VMWARE_VSPHERE: VMWare vSphere.
//   - OPENSHIFT: OpenShift.
//
// swagger:model common.cluster.InfrastructureProvider
type CommonClusterInfrastructureProvider string

func NewCommonClusterInfrastructureProvider(value CommonClusterInfrastructureProvider) *CommonClusterInfrastructureProvider {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CommonClusterInfrastructureProvider.
func (m CommonClusterInfrastructureProvider) Pointer() *CommonClusterInfrastructureProvider {
	return &m
}

const (

	// CommonClusterInfrastructureProviderINFRASTRUCTUREPROVIDERUNSPECIFIED captures enum value "INFRASTRUCTURE_PROVIDER_UNSPECIFIED"
	CommonClusterInfrastructureProviderINFRASTRUCTUREPROVIDERUNSPECIFIED CommonClusterInfrastructureProvider = "INFRASTRUCTURE_PROVIDER_UNSPECIFIED"

	// CommonClusterInfrastructureProviderINFRASTRUCTUREPROVIDERNONE captures enum value "INFRASTRUCTURE_PROVIDER_NONE"
	CommonClusterInfrastructureProviderINFRASTRUCTUREPROVIDERNONE CommonClusterInfrastructureProvider = "INFRASTRUCTURE_PROVIDER_NONE"

	// CommonClusterInfrastructureProviderAWSEC2 captures enum value "AWS_EC2"
	CommonClusterInfrastructureProviderAWSEC2 CommonClusterInfrastructureProvider = "AWS_EC2"

	// CommonClusterInfrastructureProviderGCPGCE captures enum value "GCP_GCE"
	CommonClusterInfrastructureProviderGCPGCE CommonClusterInfrastructureProvider = "GCP_GCE"

	// CommonClusterInfrastructureProviderAZURECOMPUTE captures enum value "AZURE_COMPUTE"
	CommonClusterInfrastructureProviderAZURECOMPUTE CommonClusterInfrastructureProvider = "AZURE_COMPUTE"

	// CommonClusterInfrastructureProviderVMWAREVSPHERE captures enum value "VMWARE_VSPHERE"
	CommonClusterInfrastructureProviderVMWAREVSPHERE CommonClusterInfrastructureProvider = "VMWARE_VSPHERE"

	// CommonClusterInfrastructureProviderOPENSHIFT captures enum value "OPENSHIFT"
	CommonClusterInfrastructureProviderOPENSHIFT CommonClusterInfrastructureProvider = "OPENSHIFT"
)

// for schema
var commonClusterInfrastructureProviderEnum []interface{}

func init() {
	var res []CommonClusterInfrastructureProvider
	if err := json.Unmarshal([]byte(`["INFRASTRUCTURE_PROVIDER_UNSPECIFIED","INFRASTRUCTURE_PROVIDER_NONE","AWS_EC2","GCP_GCE","AZURE_COMPUTE","VMWARE_VSPHERE","OPENSHIFT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonClusterInfrastructureProviderEnum = append(commonClusterInfrastructureProviderEnum, v)
	}
}

func (m CommonClusterInfrastructureProvider) validateCommonClusterInfrastructureProviderEnum(path, location string, value CommonClusterInfrastructureProvider) error {
	if err := validate.EnumCase(path, location, value, commonClusterInfrastructureProviderEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this common cluster infrastructure provider
func (m CommonClusterInfrastructureProvider) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCommonClusterInfrastructureProviderEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this common cluster infrastructure provider based on context it is used
func (m CommonClusterInfrastructureProvider) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
