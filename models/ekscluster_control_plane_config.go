// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EksclusterControlPlaneConfig The EKS cluster config.
//
// swagger:model ekscluster.ControlPlaneConfig
type EksclusterControlPlaneConfig struct {

	// Kubernetes Network Config.
	KubernetesNetworkConfig *EksclusterKubernetesNetworkConfig `json:"kubernetesNetworkConfig,omitempty"`

	// EKS logging configuration.
	Logging *EksclusterLogging `json:"logging,omitempty"`

	// ARN of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations.
	RoleArn string `json:"roleArn,omitempty"`

	// The metadata to apply to the cluster to assist with categorization and organization.
	Tags map[string]string `json:"tags,omitempty"`

	// Kubernetes version of the cluster.
	Version string `json:"version,omitempty"`

	// VPC config.
	Vpc *EksclusterVPCConfig `json:"vpc,omitempty"`
}

// Validate validates this ekscluster control plane config
func (m *EksclusterControlPlaneConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKubernetesNetworkConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogging(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EksclusterControlPlaneConfig) validateKubernetesNetworkConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesNetworkConfig) { // not required
		return nil
	}

	if m.KubernetesNetworkConfig != nil {
		if err := m.KubernetesNetworkConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesNetworkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesNetworkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *EksclusterControlPlaneConfig) validateLogging(formats strfmt.Registry) error {
	if swag.IsZero(m.Logging) { // not required
		return nil
	}

	if m.Logging != nil {
		if err := m.Logging.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logging")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logging")
			}
			return err
		}
	}

	return nil
}

func (m *EksclusterControlPlaneConfig) validateVpc(formats strfmt.Registry) error {
	if swag.IsZero(m.Vpc) { // not required
		return nil
	}

	if m.Vpc != nil {
		if err := m.Vpc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ekscluster control plane config based on the context it is used
func (m *EksclusterControlPlaneConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKubernetesNetworkConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogging(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVpc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EksclusterControlPlaneConfig) contextValidateKubernetesNetworkConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.KubernetesNetworkConfig != nil {
		if err := m.KubernetesNetworkConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesNetworkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesNetworkConfig")
			}
			return err
		}
	}

	return nil
}

func (m *EksclusterControlPlaneConfig) contextValidateLogging(ctx context.Context, formats strfmt.Registry) error {

	if m.Logging != nil {
		if err := m.Logging.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logging")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logging")
			}
			return err
		}
	}

	return nil
}

func (m *EksclusterControlPlaneConfig) contextValidateVpc(ctx context.Context, formats strfmt.Registry) error {

	if m.Vpc != nil {
		if err := m.Vpc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vpc")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EksclusterControlPlaneConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EksclusterControlPlaneConfig) UnmarshalBinary(b []byte) error {
	var res EksclusterControlPlaneConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
