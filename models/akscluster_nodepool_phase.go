// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AksclusterNodepoolPhase Phase of the nodepool resource.
//
//   - PHASE_UNSPECIFIED: Unspecified phase.
//   - PENDING: Resource is pending processing.
//   - CREATING: Resource is creating processing.
//   - READY: Resource is in ready state.
//   - ERROR: Error in processing.
//   - DELETING: Resource is being deleted.
//   - RESIZING: Resizing state.
//   - UPGRADING: An upgrade is in progress.
//   - UPGRADE_FAILED: An upgrade has failed.
//   - WAITING: Resource is not created yet. so wait till then.
//   - UPDATING: A generic phase for nodepool update.
//   - UPGRADING_NODE_IMAGE: An upgrade node image is in progress.
//
// swagger:model akscluster.nodepool.Phase
type AksclusterNodepoolPhase string

func NewAksclusterNodepoolPhase(value AksclusterNodepoolPhase) *AksclusterNodepoolPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AksclusterNodepoolPhase.
func (m AksclusterNodepoolPhase) Pointer() *AksclusterNodepoolPhase {
	return &m
}

const (

	// AksclusterNodepoolPhasePHASEUNSPECIFIED captures enum value "PHASE_UNSPECIFIED"
	AksclusterNodepoolPhasePHASEUNSPECIFIED AksclusterNodepoolPhase = "PHASE_UNSPECIFIED"

	// AksclusterNodepoolPhasePENDING captures enum value "PENDING"
	AksclusterNodepoolPhasePENDING AksclusterNodepoolPhase = "PENDING"

	// AksclusterNodepoolPhaseCREATING captures enum value "CREATING"
	AksclusterNodepoolPhaseCREATING AksclusterNodepoolPhase = "CREATING"

	// AksclusterNodepoolPhaseREADY captures enum value "READY"
	AksclusterNodepoolPhaseREADY AksclusterNodepoolPhase = "READY"

	// AksclusterNodepoolPhaseERROR captures enum value "ERROR"
	AksclusterNodepoolPhaseERROR AksclusterNodepoolPhase = "ERROR"

	// AksclusterNodepoolPhaseDELETING captures enum value "DELETING"
	AksclusterNodepoolPhaseDELETING AksclusterNodepoolPhase = "DELETING"

	// AksclusterNodepoolPhaseRESIZING captures enum value "RESIZING"
	AksclusterNodepoolPhaseRESIZING AksclusterNodepoolPhase = "RESIZING"

	// AksclusterNodepoolPhaseUPGRADING captures enum value "UPGRADING"
	AksclusterNodepoolPhaseUPGRADING AksclusterNodepoolPhase = "UPGRADING"

	// AksclusterNodepoolPhaseUPGRADEFAILED captures enum value "UPGRADE_FAILED"
	AksclusterNodepoolPhaseUPGRADEFAILED AksclusterNodepoolPhase = "UPGRADE_FAILED"

	// AksclusterNodepoolPhaseWAITING captures enum value "WAITING"
	AksclusterNodepoolPhaseWAITING AksclusterNodepoolPhase = "WAITING"

	// AksclusterNodepoolPhaseUPDATING captures enum value "UPDATING"
	AksclusterNodepoolPhaseUPDATING AksclusterNodepoolPhase = "UPDATING"

	// AksclusterNodepoolPhaseUPGRADINGNODEIMAGE captures enum value "UPGRADING_NODE_IMAGE"
	AksclusterNodepoolPhaseUPGRADINGNODEIMAGE AksclusterNodepoolPhase = "UPGRADING_NODE_IMAGE"
)

// for schema
var aksclusterNodepoolPhaseEnum []interface{}

func init() {
	var res []AksclusterNodepoolPhase
	if err := json.Unmarshal([]byte(`["PHASE_UNSPECIFIED","PENDING","CREATING","READY","ERROR","DELETING","RESIZING","UPGRADING","UPGRADE_FAILED","WAITING","UPDATING","UPGRADING_NODE_IMAGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		aksclusterNodepoolPhaseEnum = append(aksclusterNodepoolPhaseEnum, v)
	}
}

func (m AksclusterNodepoolPhase) validateAksclusterNodepoolPhaseEnum(path, location string, value AksclusterNodepoolPhase) error {
	if err := validate.EnumCase(path, location, value, aksclusterNodepoolPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this akscluster nodepool phase
func (m AksclusterNodepoolPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAksclusterNodepoolPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this akscluster nodepool phase based on context it is used
func (m AksclusterNodepoolPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
