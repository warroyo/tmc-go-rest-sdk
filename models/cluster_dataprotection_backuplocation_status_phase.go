// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterDataprotectionBackuplocationStatusPhase Available phases for backup location object.
//
//   - PHASE_UNSPECIFIED: Phase_unspecified is the default phase.
//   - PENDING: Pending phase is set when the backup location object is being processed by the service (TMC).
//   - CREATING: Creating phase is set when backup location is being created by the service.
//   - AVAILABLE: The location is available to read and write from.
//   - UNAVAILABLE: The location is unavailable for read and write from.
//   - PENDING_DELETE: Pending delete is set when the backup location delete is being processed by the service.
//   - DELETING: Deleting is set when the backup location delete is in progress.
//   - UPDATING: Updating is set when the backup location is being updated.
//
// swagger:model cluster.dataprotection.backuplocation.Status.Phase
type ClusterDataprotectionBackuplocationStatusPhase string

func NewClusterDataprotectionBackuplocationStatusPhase(value ClusterDataprotectionBackuplocationStatusPhase) *ClusterDataprotectionBackuplocationStatusPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClusterDataprotectionBackuplocationStatusPhase.
func (m ClusterDataprotectionBackuplocationStatusPhase) Pointer() *ClusterDataprotectionBackuplocationStatusPhase {
	return &m
}

const (

	// ClusterDataprotectionBackuplocationStatusPhasePHASEUNSPECIFIED captures enum value "PHASE_UNSPECIFIED"
	ClusterDataprotectionBackuplocationStatusPhasePHASEUNSPECIFIED ClusterDataprotectionBackuplocationStatusPhase = "PHASE_UNSPECIFIED"

	// ClusterDataprotectionBackuplocationStatusPhasePENDING captures enum value "PENDING"
	ClusterDataprotectionBackuplocationStatusPhasePENDING ClusterDataprotectionBackuplocationStatusPhase = "PENDING"

	// ClusterDataprotectionBackuplocationStatusPhaseCREATING captures enum value "CREATING"
	ClusterDataprotectionBackuplocationStatusPhaseCREATING ClusterDataprotectionBackuplocationStatusPhase = "CREATING"

	// ClusterDataprotectionBackuplocationStatusPhaseAVAILABLE captures enum value "AVAILABLE"
	ClusterDataprotectionBackuplocationStatusPhaseAVAILABLE ClusterDataprotectionBackuplocationStatusPhase = "AVAILABLE"

	// ClusterDataprotectionBackuplocationStatusPhaseUNAVAILABLE captures enum value "UNAVAILABLE"
	ClusterDataprotectionBackuplocationStatusPhaseUNAVAILABLE ClusterDataprotectionBackuplocationStatusPhase = "UNAVAILABLE"

	// ClusterDataprotectionBackuplocationStatusPhasePENDINGDELETE captures enum value "PENDING_DELETE"
	ClusterDataprotectionBackuplocationStatusPhasePENDINGDELETE ClusterDataprotectionBackuplocationStatusPhase = "PENDING_DELETE"

	// ClusterDataprotectionBackuplocationStatusPhaseDELETING captures enum value "DELETING"
	ClusterDataprotectionBackuplocationStatusPhaseDELETING ClusterDataprotectionBackuplocationStatusPhase = "DELETING"

	// ClusterDataprotectionBackuplocationStatusPhaseUPDATING captures enum value "UPDATING"
	ClusterDataprotectionBackuplocationStatusPhaseUPDATING ClusterDataprotectionBackuplocationStatusPhase = "UPDATING"
)

// for schema
var clusterDataprotectionBackuplocationStatusPhaseEnum []interface{}

func init() {
	var res []ClusterDataprotectionBackuplocationStatusPhase
	if err := json.Unmarshal([]byte(`["PHASE_UNSPECIFIED","PENDING","CREATING","AVAILABLE","UNAVAILABLE","PENDING_DELETE","DELETING","UPDATING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterDataprotectionBackuplocationStatusPhaseEnum = append(clusterDataprotectionBackuplocationStatusPhaseEnum, v)
	}
}

func (m ClusterDataprotectionBackuplocationStatusPhase) validateClusterDataprotectionBackuplocationStatusPhaseEnum(path, location string, value ClusterDataprotectionBackuplocationStatusPhase) error {
	if err := validate.EnumCase(path, location, value, clusterDataprotectionBackuplocationStatusPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster dataprotection backuplocation status phase
func (m ClusterDataprotectionBackuplocationStatusPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterDataprotectionBackuplocationStatusPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cluster dataprotection backuplocation status phase based on context it is used
func (m ClusterDataprotectionBackuplocationStatusPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
