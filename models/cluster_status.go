// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterStatus Status of the cluster.
//
// swagger:model cluster.Status
type ClusterStatus struct {

	// CPU allocation of a cluster.
	AllocatedCPU *CommonClusterResourceAllocation `json:"allocatedCpu,omitempty"`

	// Memory allocation of a cluster.
	AllocatedMemory *CommonClusterResourceAllocation `json:"allocatedMemory,omitempty"`

	// Conditions of the cluster resource.
	Conditions map[string]VmwareTanzuCoreV1alpha1StatusCondition `json:"conditions,omitempty"`

	// Health of a resource.
	Health *CommonClusterHealth `json:"health,omitempty"`

	// Health details of the cluster.
	HealthDetails *CommonClusterHealthInfo `json:"healthDetails,omitempty"`

	// Cluster infrastructure provider.
	InfrastructureProvider *CommonClusterInfrastructureProvider `json:"infrastructureProvider,omitempty"`

	// Cluster infrastructure provider region.
	InfrastructureProviderRegion string `json:"infrastructureProviderRegion,omitempty"`

	// Installer link for TMC related K8s resource manifest.
	// Note: Applicable only for attached clusters.
	// If the cluster is attached with proxy, Get on this
	// URL would need user token with sufficient permission to read the
	// proxy set during the attach. In all other cases, this
	// URL can be fetched without user token.
	InstallerLink string `json:"installerLink,omitempty"`

	// Kubernetes Server Git Version.
	KubeServerVersion string `json:"kubeServerVersion,omitempty"`

	// Kubernetes Provider of the cluster.
	KubernetesProvider *CommonClusterKubernetesProvider `json:"kubernetesProvider,omitempty"`

	// Total number of nodes.
	NodeCount string `json:"nodeCount,omitempty"`

	// Phase of the cluster resource.
	Phase *ClusterPhase `json:"phase,omitempty"`

	// Type of the cluster.
	Type *ClusterType `json:"type,omitempty"`
}

// Validate validates this cluster status
func (m *ClusterStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllocatedCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllocatedMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfrastructureProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterStatus) validateAllocatedCPU(formats strfmt.Registry) error {
	if swag.IsZero(m.AllocatedCPU) { // not required
		return nil
	}

	if m.AllocatedCPU != nil {
		if err := m.AllocatedCPU.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allocatedCpu")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allocatedCpu")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStatus) validateAllocatedMemory(formats strfmt.Registry) error {
	if swag.IsZero(m.AllocatedMemory) { // not required
		return nil
	}

	if m.AllocatedMemory != nil {
		if err := m.AllocatedMemory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allocatedMemory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allocatedMemory")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStatus) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for k := range m.Conditions {

		if err := validate.Required("conditions"+"."+k, "body", m.Conditions[k]); err != nil {
			return err
		}
		if val, ok := m.Conditions[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterStatus) validateHealth(formats strfmt.Registry) error {
	if swag.IsZero(m.Health) { // not required
		return nil
	}

	if m.Health != nil {
		if err := m.Health.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStatus) validateHealthDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthDetails) { // not required
		return nil
	}

	if m.HealthDetails != nil {
		if err := m.HealthDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("healthDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("healthDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStatus) validateInfrastructureProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.InfrastructureProvider) { // not required
		return nil
	}

	if m.InfrastructureProvider != nil {
		if err := m.InfrastructureProvider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("infrastructureProvider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("infrastructureProvider")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStatus) validateKubernetesProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesProvider) { // not required
		return nil
	}

	if m.KubernetesProvider != nil {
		if err := m.KubernetesProvider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesProvider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesProvider")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStatus) validatePhase(formats strfmt.Registry) error {
	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	if m.Phase != nil {
		if err := m.Phase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStatus) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster status based on the context it is used
func (m *ClusterStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllocatedCPU(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAllocatedMemory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealthDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInfrastructureProvider(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetesProvider(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterStatus) contextValidateAllocatedCPU(ctx context.Context, formats strfmt.Registry) error {

	if m.AllocatedCPU != nil {
		if err := m.AllocatedCPU.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allocatedCpu")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allocatedCpu")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStatus) contextValidateAllocatedMemory(ctx context.Context, formats strfmt.Registry) error {

	if m.AllocatedMemory != nil {
		if err := m.AllocatedMemory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allocatedMemory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allocatedMemory")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStatus) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Conditions {

		if val, ok := m.Conditions[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ClusterStatus) contextValidateHealth(ctx context.Context, formats strfmt.Registry) error {

	if m.Health != nil {
		if err := m.Health.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStatus) contextValidateHealthDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.HealthDetails != nil {
		if err := m.HealthDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("healthDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("healthDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStatus) contextValidateInfrastructureProvider(ctx context.Context, formats strfmt.Registry) error {

	if m.InfrastructureProvider != nil {
		if err := m.InfrastructureProvider.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("infrastructureProvider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("infrastructureProvider")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStatus) contextValidateKubernetesProvider(ctx context.Context, formats strfmt.Registry) error {

	if m.KubernetesProvider != nil {
		if err := m.KubernetesProvider.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesProvider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesProvider")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStatus) contextValidatePhase(ctx context.Context, formats strfmt.Registry) error {

	if m.Phase != nil {
		if err := m.Phase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStatus) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterStatus) UnmarshalBinary(b []byte) error {
	var res ClusterStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
