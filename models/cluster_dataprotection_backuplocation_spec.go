// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterDataprotectionBackuplocationSpec The backup location spec.
//
// swagger:model cluster.dataprotection.backuplocation.Spec
type ClusterDataprotectionBackuplocationSpec struct {

	// The bucket to use for object storage.
	Bucket string `json:"bucket,omitempty"`

	// A PEM-encoded certificate bundle to trust while connecting to the storage backend. Optional.
	CaCert string `json:"caCert,omitempty"`

	// Provider-specific configuration fields.
	Config *DataprotectionProviderBackuplocationTargetProviderSpecificConfig `json:"config,omitempty"`

	// The name of secret to be used to access the bucket.
	Credential *AccountCredentialFullName `json:"credential,omitempty"`

	// The prefix of the bucket.  Optional.
	Prefix string `json:"prefix,omitempty"`

	// The region of the bucket origin. Optional.
	Region string `json:"region,omitempty"`

	// The target provider of the backup storage.
	TargetProvider *DataprotectionProviderBackuplocationTargetProvider `json:"targetProvider,omitempty"`
}

// Validate validates this cluster dataprotection backuplocation spec
func (m *ClusterDataprotectionBackuplocationSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredential(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetProvider(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDataprotectionBackuplocationSpec) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDataprotectionBackuplocationSpec) validateCredential(formats strfmt.Registry) error {
	if swag.IsZero(m.Credential) { // not required
		return nil
	}

	if m.Credential != nil {
		if err := m.Credential.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credential")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credential")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDataprotectionBackuplocationSpec) validateTargetProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetProvider) { // not required
		return nil
	}

	if m.TargetProvider != nil {
		if err := m.TargetProvider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetProvider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetProvider")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster dataprotection backuplocation spec based on the context it is used
func (m *ClusterDataprotectionBackuplocationSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCredential(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetProvider(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDataprotectionBackuplocationSpec) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {
		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDataprotectionBackuplocationSpec) contextValidateCredential(ctx context.Context, formats strfmt.Registry) error {

	if m.Credential != nil {
		if err := m.Credential.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credential")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credential")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDataprotectionBackuplocationSpec) contextValidateTargetProvider(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetProvider != nil {
		if err := m.TargetProvider.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetProvider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetProvider")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterDataprotectionBackuplocationSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterDataprotectionBackuplocationSpec) UnmarshalBinary(b []byte) error {
	var res ClusterDataprotectionBackuplocationSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
