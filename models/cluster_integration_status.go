// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterIntegrationStatus Status of the integration configuration.
//
// swagger:model cluster.integration.Status
type ClusterIntegrationStatus struct {

	// Deep link to integration service that shows details for this cluster.
	ClusterViewURL string `json:"clusterViewUrl,omitempty"`

	// Conditions that help identify the phase.
	Conditions map[string]VmwareTanzuCoreV1alpha1StatusCondition `json:"conditions,omitempty"`

	// Integration Workload backed indicator abstracts workload in Status. This indicator indicates the state of
	// the workload deployed by the Integration Partner team. In case of issues with this indicator, Integration Partner
	// team should be able to help resolve the issues related to this indicator.
	IntegrationWorkload *ClusterIntegrationIndicator `json:"integrationWorkload,omitempty"`

	// Status of the Integration Partner's Operator deployed by TMC.
	Operator *ClusterIntegrationOperator `json:"operator,omitempty"`

	// Phase of the integration.
	Phase *ClusterIntegrationPhase `json:"phase,omitempty"`

	// System indicator abstracts Phase and Operator in Status.
	TmcAdapter *ClusterIntegrationIndicator `json:"tmcAdapter,omitempty"`

	// Existing version of the integration.
	Version string `json:"version,omitempty"`

	// Status of the Integration Partner's workloads.
	Workload *ClusterIntegrationWorkload `json:"workload,omitempty"`
}

// Validate validates this cluster integration status
func (m *ClusterIntegrationStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegrationWorkload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTmcAdapter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkload(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterIntegrationStatus) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for k := range m.Conditions {

		if err := validate.Required("conditions"+"."+k, "body", m.Conditions[k]); err != nil {
			return err
		}
		if val, ok := m.Conditions[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterIntegrationStatus) validateIntegrationWorkload(formats strfmt.Registry) error {
	if swag.IsZero(m.IntegrationWorkload) { // not required
		return nil
	}

	if m.IntegrationWorkload != nil {
		if err := m.IntegrationWorkload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("integrationWorkload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("integrationWorkload")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterIntegrationStatus) validateOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	if m.Operator != nil {
		if err := m.Operator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operator")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterIntegrationStatus) validatePhase(formats strfmt.Registry) error {
	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	if m.Phase != nil {
		if err := m.Phase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterIntegrationStatus) validateTmcAdapter(formats strfmt.Registry) error {
	if swag.IsZero(m.TmcAdapter) { // not required
		return nil
	}

	if m.TmcAdapter != nil {
		if err := m.TmcAdapter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tmcAdapter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tmcAdapter")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterIntegrationStatus) validateWorkload(formats strfmt.Registry) error {
	if swag.IsZero(m.Workload) { // not required
		return nil
	}

	if m.Workload != nil {
		if err := m.Workload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workload")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster integration status based on the context it is used
func (m *ClusterIntegrationStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIntegrationWorkload(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTmcAdapter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkload(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterIntegrationStatus) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Conditions {

		if val, ok := m.Conditions[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ClusterIntegrationStatus) contextValidateIntegrationWorkload(ctx context.Context, formats strfmt.Registry) error {

	if m.IntegrationWorkload != nil {
		if err := m.IntegrationWorkload.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("integrationWorkload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("integrationWorkload")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterIntegrationStatus) contextValidateOperator(ctx context.Context, formats strfmt.Registry) error {

	if m.Operator != nil {
		if err := m.Operator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operator")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterIntegrationStatus) contextValidatePhase(ctx context.Context, formats strfmt.Registry) error {

	if m.Phase != nil {
		if err := m.Phase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterIntegrationStatus) contextValidateTmcAdapter(ctx context.Context, formats strfmt.Registry) error {

	if m.TmcAdapter != nil {
		if err := m.TmcAdapter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tmcAdapter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tmcAdapter")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterIntegrationStatus) contextValidateWorkload(ctx context.Context, formats strfmt.Registry) error {

	if m.Workload != nil {
		if err := m.Workload.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workload")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterIntegrationStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterIntegrationStatus) UnmarshalBinary(b []byte) error {
	var res ClusterIntegrationStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
