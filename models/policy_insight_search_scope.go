// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PolicyInsightSearchScope Scope to search by, any fields left empty will be considered all (*).
//
// swagger:model policy.insight.SearchScope
type PolicyInsightSearchScope struct {

	// Filter policy insights by category; supports globbing; default (*).
	Category string `json:"category,omitempty"`

	// Filter policy insights by cluster_group; supports globbing; default (*).
	ClusterGroup string `json:"clusterGroup,omitempty"`

	// Filter policy insights by cluster_name; supports globbing; default (*).
	ClusterName string `json:"clusterName,omitempty"`

	// Filter policy insights by issue_type; supports globbing; default (*).
	IssueType string `json:"issueType,omitempty"`

	// Scope search to the specified name; supports globbing; default (*).
	Name string `json:"name,omitempty"`

	// Filter policy insights by namespace; supports globbing; default (*).
	Namespace string `json:"namespace,omitempty"`

	// Filter policy insights by policy_name; supports globbing; default (*).
	PolicyName string `json:"policyName,omitempty"`

	// Filter policy insights by workspace_name; supports globbing; default (*).
	WorkspaceName string `json:"workspaceName,omitempty"`
}

// Validate validates this policy insight search scope
func (m *PolicyInsightSearchScope) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this policy insight search scope based on context it is used
func (m *PolicyInsightSearchScope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PolicyInsightSearchScope) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyInsightSearchScope) UnmarshalBinary(b []byte) error {
	var res PolicyInsightSearchScope
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
