// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AntreaIoAntreaPkgApisCrdV1beta1AntreaAgentInfo antrea io antrea pkg apis crd v1beta1 antrea agent info
//
// swagger:model antrea_io.antrea.pkg.apis.crd.v1beta1.AntreaAgentInfo
type AntreaIoAntreaPkgApisCrdV1beta1AntreaAgentInfo struct {

	// The number of Pods which the agent is in charge of
	AgentConditions []*AntreaIoAntreaPkgApisCrdV1beta1AgentCondition `json:"agentConditions"`

	// Agent condition contains types like AgentHealthy
	APIPort string `json:"apiPort,omitempty"`

	// Antrea Agent NetworkPolicy information
	LocalPodNum int32 `json:"localPodNum,omitempty"`

	// metadata
	Metadata *K8sIoApimachineryPkgApisMetaV1ObjectMeta `json:"metadata,omitempty"`

	// OVS Information
	NetworkPolicyControllerInfo *AntreaIoAntreaPkgApisCrdV1beta1NetworkPolicyControllerInfo `json:"networkPolicyControllerInfo,omitempty"`

	// The Pod that Antrea Agent is running in
	NodeRef *K8sIoAPICoreV1ObjectReference `json:"nodeRef,omitempty"`

	// The Node that Antrea Agent is running in
	NodeSubnets []string `json:"nodeSubnets"`

	// Node subnets
	OvsInfo *AntreaIoAntreaPkgApisCrdV1beta1OVSInfo `json:"ovsInfo,omitempty"`

	// Antrea binary version
	PodRef *K8sIoAPICoreV1ObjectReference `json:"podRef,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this antrea io antrea pkg apis crd v1beta1 antrea agent info
func (m *AntreaIoAntreaPkgApisCrdV1beta1AntreaAgentInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkPolicyControllerInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOvsInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1beta1AntreaAgentInfo) validateAgentConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentConditions) { // not required
		return nil
	}

	for i := 0; i < len(m.AgentConditions); i++ {
		if swag.IsZero(m.AgentConditions[i]) { // not required
			continue
		}

		if m.AgentConditions[i] != nil {
			if err := m.AgentConditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agentConditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agentConditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1beta1AntreaAgentInfo) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1beta1AntreaAgentInfo) validateNetworkPolicyControllerInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkPolicyControllerInfo) { // not required
		return nil
	}

	if m.NetworkPolicyControllerInfo != nil {
		if err := m.NetworkPolicyControllerInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkPolicyControllerInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkPolicyControllerInfo")
			}
			return err
		}
	}

	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1beta1AntreaAgentInfo) validateNodeRef(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeRef) { // not required
		return nil
	}

	if m.NodeRef != nil {
		if err := m.NodeRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodeRef")
			}
			return err
		}
	}

	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1beta1AntreaAgentInfo) validateOvsInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.OvsInfo) { // not required
		return nil
	}

	if m.OvsInfo != nil {
		if err := m.OvsInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ovsInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ovsInfo")
			}
			return err
		}
	}

	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1beta1AntreaAgentInfo) validatePodRef(formats strfmt.Registry) error {
	if swag.IsZero(m.PodRef) { // not required
		return nil
	}

	if m.PodRef != nil {
		if err := m.PodRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("podRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("podRef")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this antrea io antrea pkg apis crd v1beta1 antrea agent info based on the context it is used
func (m *AntreaIoAntreaPkgApisCrdV1beta1AntreaAgentInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgentConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkPolicyControllerInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOvsInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePodRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1beta1AntreaAgentInfo) contextValidateAgentConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AgentConditions); i++ {

		if m.AgentConditions[i] != nil {
			if err := m.AgentConditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agentConditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agentConditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1beta1AntreaAgentInfo) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1beta1AntreaAgentInfo) contextValidateNetworkPolicyControllerInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkPolicyControllerInfo != nil {
		if err := m.NetworkPolicyControllerInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkPolicyControllerInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkPolicyControllerInfo")
			}
			return err
		}
	}

	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1beta1AntreaAgentInfo) contextValidateNodeRef(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeRef != nil {
		if err := m.NodeRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodeRef")
			}
			return err
		}
	}

	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1beta1AntreaAgentInfo) contextValidateOvsInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.OvsInfo != nil {
		if err := m.OvsInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ovsInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ovsInfo")
			}
			return err
		}
	}

	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1beta1AntreaAgentInfo) contextValidatePodRef(ctx context.Context, formats strfmt.Registry) error {

	if m.PodRef != nil {
		if err := m.PodRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("podRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("podRef")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AntreaIoAntreaPkgApisCrdV1beta1AntreaAgentInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AntreaIoAntreaPkgApisCrdV1beta1AntreaAgentInfo) UnmarshalBinary(b []byte) error {
	var res AntreaIoAntreaPkgApisCrdV1beta1AntreaAgentInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
