// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterInfrastructureTkgvsphereNetworkSettings Network related settings for VSphere cluster.
//
// swagger:model cluster.infrastructure.tkgvsphere.NetworkSettings
type ClusterInfrastructureTkgvsphereNetworkSettings struct {

	// APIServerPort specifies the port address for the cluster (optional).
	// The port value defaults to 6443.
	APIServerPort int32 `json:"apiServerPort,omitempty"`

	// ControlPlaneEndpoint specifies the control plane virtual IP address.
	ControlPlaneEndpoint string `json:"controlPlaneEndpoint,omitempty"`

	// Pod CIDR for Kubernetes pods defaults to 192.168.0.0/16.
	Pods *ClusterInfrastructureTkgvsphereNetworkRanges `json:"pods,omitempty"`

	// Service CIDR for kubernetes services defaults to 10.96.0.0/12.
	Services *ClusterInfrastructureTkgvsphereNetworkRanges `json:"services,omitempty"`
}

// Validate validates this cluster infrastructure tkgvsphere network settings
func (m *ClusterInfrastructureTkgvsphereNetworkSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePods(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterInfrastructureTkgvsphereNetworkSettings) validatePods(formats strfmt.Registry) error {
	if swag.IsZero(m.Pods) { // not required
		return nil
	}

	if m.Pods != nil {
		if err := m.Pods.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pods")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pods")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterInfrastructureTkgvsphereNetworkSettings) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(m.Services) { // not required
		return nil
	}

	if m.Services != nil {
		if err := m.Services.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("services")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("services")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster infrastructure tkgvsphere network settings based on the context it is used
func (m *ClusterInfrastructureTkgvsphereNetworkSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePods(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterInfrastructureTkgvsphereNetworkSettings) contextValidatePods(ctx context.Context, formats strfmt.Registry) error {

	if m.Pods != nil {
		if err := m.Pods.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pods")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pods")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterInfrastructureTkgvsphereNetworkSettings) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {

	if m.Services != nil {
		if err := m.Services.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("services")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("services")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterInfrastructureTkgvsphereNetworkSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterInfrastructureTkgvsphereNetworkSettings) UnmarshalBinary(b []byte) error {
	var res ClusterInfrastructureTkgvsphereNetworkSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
