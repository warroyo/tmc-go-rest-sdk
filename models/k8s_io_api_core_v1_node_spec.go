// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// K8sIoAPICoreV1NodeSpec NodeSpec describes the attributes that a node is created with.
//
// swagger:model k8s.io.api.core.v1.NodeSpec
type K8sIoAPICoreV1NodeSpec struct {

	// If specified, the source to get node configuration from
	// The DynamicKubeletConfig feature gate must be enabled for the Kubelet to use this field
	// +optional
	ConfigSource *K8sIoAPICoreV1NodeConfigSource `json:"configSource,omitempty"`

	// Deprecated. Not all kubelets will set this field. Remove field after 1.13.
	// see: https://issues.k8s.io/61966
	// +optional
	ExternalID string `json:"externalID,omitempty"`

	// PodCIDR represents the pod IP range assigned to the node.
	// +optional
	PodCIDR string `json:"podCIDR,omitempty"`

	// ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
	// +optional
	ProviderID string `json:"providerID,omitempty"`

	// If specified, the node's taints.
	// +optional
	Taints []*K8sIoAPICoreV1Taint `json:"taints"`

	// Unschedulable controls node schedulability of new pods. By default, node is schedulable.
	// More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
	// +optional
	Unschedulable bool `json:"unschedulable,omitempty"`
}

// Validate validates this k8s io api core v1 node spec
func (m *K8sIoAPICoreV1NodeSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaints(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *K8sIoAPICoreV1NodeSpec) validateConfigSource(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigSource) { // not required
		return nil
	}

	if m.ConfigSource != nil {
		if err := m.ConfigSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configSource")
			}
			return err
		}
	}

	return nil
}

func (m *K8sIoAPICoreV1NodeSpec) validateTaints(formats strfmt.Registry) error {
	if swag.IsZero(m.Taints) { // not required
		return nil
	}

	for i := 0; i < len(m.Taints); i++ {
		if swag.IsZero(m.Taints[i]) { // not required
			continue
		}

		if m.Taints[i] != nil {
			if err := m.Taints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this k8s io api core v1 node spec based on the context it is used
func (m *K8sIoAPICoreV1NodeSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfigSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *K8sIoAPICoreV1NodeSpec) contextValidateConfigSource(ctx context.Context, formats strfmt.Registry) error {

	if m.ConfigSource != nil {
		if err := m.ConfigSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configSource")
			}
			return err
		}
	}

	return nil
}

func (m *K8sIoAPICoreV1NodeSpec) contextValidateTaints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Taints); i++ {

		if m.Taints[i] != nil {
			if err := m.Taints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *K8sIoAPICoreV1NodeSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *K8sIoAPICoreV1NodeSpec) UnmarshalBinary(b []byte) error {
	var res K8sIoAPICoreV1NodeSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
