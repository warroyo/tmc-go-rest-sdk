// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AntreaIoAntreaPkgApisCrdV1alpha1NodeResult antrea io antrea pkg apis crd v1alpha1 node result
//
// swagger:model antrea_io.antrea.pkg.apis.crd.v1alpha1.NodeResult
type AntreaIoAntreaPkgApisCrdV1alpha1NodeResult struct {

	// Node is the node of the observation.
	Node string `json:"node,omitempty"`

	// Observations includes all observations from sender nodes, receiver ones, etc.
	Observations []*AntreaIoAntreaPkgApisCrdV1alpha1Observation `json:"observations"`

	// Role of the node like sender, receiver, etc.
	Role string `json:"role,omitempty"`

	// Timestamp is the timestamp of the observations on the node.
	Timestamp string `json:"timestamp,omitempty"`
}

// Validate validates this antrea io antrea pkg apis crd v1alpha1 node result
func (m *AntreaIoAntreaPkgApisCrdV1alpha1NodeResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObservations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1alpha1NodeResult) validateObservations(formats strfmt.Registry) error {
	if swag.IsZero(m.Observations) { // not required
		return nil
	}

	for i := 0; i < len(m.Observations); i++ {
		if swag.IsZero(m.Observations[i]) { // not required
			continue
		}

		if m.Observations[i] != nil {
			if err := m.Observations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("observations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("observations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this antrea io antrea pkg apis crd v1alpha1 node result based on the context it is used
func (m *AntreaIoAntreaPkgApisCrdV1alpha1NodeResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObservations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1alpha1NodeResult) contextValidateObservations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Observations); i++ {

		if m.Observations[i] != nil {
			if err := m.Observations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("observations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("observations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AntreaIoAntreaPkgApisCrdV1alpha1NodeResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AntreaIoAntreaPkgApisCrdV1alpha1NodeResult) UnmarshalBinary(b []byte) error {
	var res AntreaIoAntreaPkgApisCrdV1alpha1NodeResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
