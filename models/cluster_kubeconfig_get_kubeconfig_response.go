// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterKubeconfigGetKubeconfigResponse Response with cluster kubeconfig.
//
// swagger:model cluster.kubeconfig.GetKubeconfigResponse
type ClusterKubeconfigGetKubeconfigResponse struct {

	// Provides the server endpoint used in the kubeconfig.
	Endpoint string `json:"endpoint,omitempty"`

	// Cluster Kubeconfig.
	Kubeconfig string `json:"kubeconfig,omitempty"`

	// Provides the detail message for PENDING/UNAVAILABLE status.
	Msg string `json:"msg,omitempty"`

	// Kubeconfig status.
	Status *ClusterKubeconfigGetKubeconfigResponseStatus `json:"status,omitempty"`
}

// Validate validates this cluster kubeconfig get kubeconfig response
func (m *ClusterKubeconfigGetKubeconfigResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterKubeconfigGetKubeconfigResponse) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster kubeconfig get kubeconfig response based on the context it is used
func (m *ClusterKubeconfigGetKubeconfigResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterKubeconfigGetKubeconfigResponse) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterKubeconfigGetKubeconfigResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterKubeconfigGetKubeconfigResponse) UnmarshalBinary(b []byte) error {
	var res ClusterKubeconfigGetKubeconfigResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
