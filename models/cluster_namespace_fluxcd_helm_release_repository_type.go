// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterNamespaceFluxcdHelmReleaseRepositoryType RepositoryType specifies the type of repository.
//
//   - UNSPECIFIED: Repository type is unspecified.
//   - HELM: Helm repository.
//   - GIT: Git repository.
//
// swagger:model cluster.namespace.fluxcd.helm.release.RepositoryType
type ClusterNamespaceFluxcdHelmReleaseRepositoryType string

func NewClusterNamespaceFluxcdHelmReleaseRepositoryType(value ClusterNamespaceFluxcdHelmReleaseRepositoryType) *ClusterNamespaceFluxcdHelmReleaseRepositoryType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClusterNamespaceFluxcdHelmReleaseRepositoryType.
func (m ClusterNamespaceFluxcdHelmReleaseRepositoryType) Pointer() *ClusterNamespaceFluxcdHelmReleaseRepositoryType {
	return &m
}

const (

	// ClusterNamespaceFluxcdHelmReleaseRepositoryTypeUNSPECIFIED captures enum value "UNSPECIFIED"
	ClusterNamespaceFluxcdHelmReleaseRepositoryTypeUNSPECIFIED ClusterNamespaceFluxcdHelmReleaseRepositoryType = "UNSPECIFIED"

	// ClusterNamespaceFluxcdHelmReleaseRepositoryTypeHELM captures enum value "HELM"
	ClusterNamespaceFluxcdHelmReleaseRepositoryTypeHELM ClusterNamespaceFluxcdHelmReleaseRepositoryType = "HELM"

	// ClusterNamespaceFluxcdHelmReleaseRepositoryTypeGIT captures enum value "GIT"
	ClusterNamespaceFluxcdHelmReleaseRepositoryTypeGIT ClusterNamespaceFluxcdHelmReleaseRepositoryType = "GIT"
)

// for schema
var clusterNamespaceFluxcdHelmReleaseRepositoryTypeEnum []interface{}

func init() {
	var res []ClusterNamespaceFluxcdHelmReleaseRepositoryType
	if err := json.Unmarshal([]byte(`["UNSPECIFIED","HELM","GIT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterNamespaceFluxcdHelmReleaseRepositoryTypeEnum = append(clusterNamespaceFluxcdHelmReleaseRepositoryTypeEnum, v)
	}
}

func (m ClusterNamespaceFluxcdHelmReleaseRepositoryType) validateClusterNamespaceFluxcdHelmReleaseRepositoryTypeEnum(path, location string, value ClusterNamespaceFluxcdHelmReleaseRepositoryType) error {
	if err := validate.EnumCase(path, location, value, clusterNamespaceFluxcdHelmReleaseRepositoryTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster namespace fluxcd helm release repository type
func (m ClusterNamespaceFluxcdHelmReleaseRepositoryType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterNamespaceFluxcdHelmReleaseRepositoryTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cluster namespace fluxcd helm release repository type based on context it is used
func (m ClusterNamespaceFluxcdHelmReleaseRepositoryType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
