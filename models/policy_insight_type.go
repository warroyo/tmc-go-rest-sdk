// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PolicyInsightType Defines policy insight types.
//
//   - TYPE_UNSPECIFIED: Unknown type for policy insight.
//   - VIOLATION: Policy insight which represent policy violation.
//   - SYNC: Policy insight which represent policy sync issue.
//   - THRESHOLD: Policy insight which represent policy threshold exceeded.
//   - HEALTH: Policy insight which represent policy health status.
//
// swagger:model policy.insight.Type
type PolicyInsightType string

func NewPolicyInsightType(value PolicyInsightType) *PolicyInsightType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PolicyInsightType.
func (m PolicyInsightType) Pointer() *PolicyInsightType {
	return &m
}

const (

	// PolicyInsightTypeTYPEUNSPECIFIED captures enum value "TYPE_UNSPECIFIED"
	PolicyInsightTypeTYPEUNSPECIFIED PolicyInsightType = "TYPE_UNSPECIFIED"

	// PolicyInsightTypeVIOLATION captures enum value "VIOLATION"
	PolicyInsightTypeVIOLATION PolicyInsightType = "VIOLATION"

	// PolicyInsightTypeSYNC captures enum value "SYNC"
	PolicyInsightTypeSYNC PolicyInsightType = "SYNC"

	// PolicyInsightTypeTHRESHOLD captures enum value "THRESHOLD"
	PolicyInsightTypeTHRESHOLD PolicyInsightType = "THRESHOLD"

	// PolicyInsightTypeHEALTH captures enum value "HEALTH"
	PolicyInsightTypeHEALTH PolicyInsightType = "HEALTH"
)

// for schema
var policyInsightTypeEnum []interface{}

func init() {
	var res []PolicyInsightType
	if err := json.Unmarshal([]byte(`["TYPE_UNSPECIFIED","VIOLATION","SYNC","THRESHOLD","HEALTH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyInsightTypeEnum = append(policyInsightTypeEnum, v)
	}
}

func (m PolicyInsightType) validatePolicyInsightTypeEnum(path, location string, value PolicyInsightType) error {
	if err := validate.EnumCase(path, location, value, policyInsightTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this policy insight type
func (m PolicyInsightType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePolicyInsightTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this policy insight type based on context it is used
func (m PolicyInsightType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
