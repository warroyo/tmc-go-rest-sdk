// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DataprotectionProviderBackuplocationTargetProviderSpecificConfig Provider specific configuration for backup location (https://github.com/heptio/velero/blob/master/docs/api-types/backupstoragelocation.md).
//
// swagger:model dataprotection.provider.backuplocation.TargetProviderSpecificConfig
type DataprotectionProviderBackuplocationTargetProviderSpecificConfig struct {

	// Azure specific config.
	AzureConfig *DataprotectionProviderBackuplocationAzureStorageConfiguration `json:"azureConfig,omitempty"`

	// S3 and S3-compatible config.
	S3Config *DataprotectionProviderBackuplocationS3Configuration `json:"s3Config,omitempty"`
}

// Validate validates this dataprotection provider backuplocation target provider specific config
func (m *DataprotectionProviderBackuplocationTargetProviderSpecificConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAzureConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3Config(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataprotectionProviderBackuplocationTargetProviderSpecificConfig) validateAzureConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureConfig) { // not required
		return nil
	}

	if m.AzureConfig != nil {
		if err := m.AzureConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureConfig")
			}
			return err
		}
	}

	return nil
}

func (m *DataprotectionProviderBackuplocationTargetProviderSpecificConfig) validateS3Config(formats strfmt.Registry) error {
	if swag.IsZero(m.S3Config) { // not required
		return nil
	}

	if m.S3Config != nil {
		if err := m.S3Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3Config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3Config")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this dataprotection provider backuplocation target provider specific config based on the context it is used
func (m *DataprotectionProviderBackuplocationTargetProviderSpecificConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAzureConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateS3Config(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataprotectionProviderBackuplocationTargetProviderSpecificConfig) contextValidateAzureConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureConfig != nil {
		if err := m.AzureConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureConfig")
			}
			return err
		}
	}

	return nil
}

func (m *DataprotectionProviderBackuplocationTargetProviderSpecificConfig) contextValidateS3Config(ctx context.Context, formats strfmt.Registry) error {

	if m.S3Config != nil {
		if err := m.S3Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3Config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("s3Config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataprotectionProviderBackuplocationTargetProviderSpecificConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataprotectionProviderBackuplocationTargetProviderSpecificConfig) UnmarshalBinary(b []byte) error {
	var res DataprotectionProviderBackuplocationTargetProviderSpecificConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
