// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CommonBatchPhase Phase of the source resource application on its atomic targets.
// Note: The phase can move back to Pending from Applied when there are additions to the list of available atomic targets.
// In such a case, the system will automatically try to apply the changes to the new targets to get back to the Applied state.
//
//   - PHASE_UNSPECIFIED: UNSPECIFIED phase.
//   - PENDING: PENDING phase is set when source resource is currently being applied on at least one atomic target.
//   - APPLIED: APPLIED phase is set when source resource is successfully applied or skipped due to an override on all atomic targets.
//   - ERROR: ERROR phase is set when source resource has failed to apply on at-least one atomic target (not considering overrides).
//   - DELETING: DELETING phase is set when source resource is being deleted (only applicable on some source resource types).
//
// swagger:model common.batch.Phase
type CommonBatchPhase string

func NewCommonBatchPhase(value CommonBatchPhase) *CommonBatchPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CommonBatchPhase.
func (m CommonBatchPhase) Pointer() *CommonBatchPhase {
	return &m
}

const (

	// CommonBatchPhasePHASEUNSPECIFIED captures enum value "PHASE_UNSPECIFIED"
	CommonBatchPhasePHASEUNSPECIFIED CommonBatchPhase = "PHASE_UNSPECIFIED"

	// CommonBatchPhasePENDING captures enum value "PENDING"
	CommonBatchPhasePENDING CommonBatchPhase = "PENDING"

	// CommonBatchPhaseAPPLIED captures enum value "APPLIED"
	CommonBatchPhaseAPPLIED CommonBatchPhase = "APPLIED"

	// CommonBatchPhaseERROR captures enum value "ERROR"
	CommonBatchPhaseERROR CommonBatchPhase = "ERROR"

	// CommonBatchPhaseDELETING captures enum value "DELETING"
	CommonBatchPhaseDELETING CommonBatchPhase = "DELETING"
)

// for schema
var commonBatchPhaseEnum []interface{}

func init() {
	var res []CommonBatchPhase
	if err := json.Unmarshal([]byte(`["PHASE_UNSPECIFIED","PENDING","APPLIED","ERROR","DELETING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonBatchPhaseEnum = append(commonBatchPhaseEnum, v)
	}
}

func (m CommonBatchPhase) validateCommonBatchPhaseEnum(path, location string, value CommonBatchPhase) error {
	if err := validate.EnumCase(path, location, value, commonBatchPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this common batch phase
func (m CommonBatchPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCommonBatchPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this common batch phase based on context it is used
func (m CommonBatchPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
