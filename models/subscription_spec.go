// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubscriptionSpec Spec of the subscription.
//
// swagger:model subscription.Spec
type SubscriptionSpec struct {

	// Full Domain name(DNS Endpoint) of the Org.
	DNSEndpoint string `json:"dnsEndpoint,omitempty"`

	// Expiration date of the contract.
	// Format: date-time
	ExpirationTimestamp strfmt.DateTime `json:"expirationTimestamp,omitempty"`

	// Package purchased by customer.
	Package *SubscriptionPackage `json:"package,omitempty"`

	// Quantity of the unit of measure.
	Quantity int32 `json:"quantity,omitempty"`

	// Region selected by the customer during onboarding.
	Region string `json:"region,omitempty"`

	// Term period of the contract.
	TermPeriodMonths int32 `json:"termPeriodMonths,omitempty"`

	// The tier of TMC that the org signed up for.
	Tier *SubscriptionTier `json:"tier,omitempty"`

	// Contract Type chosen by customer during onboarding.
	Type *SubscriptionType `json:"type,omitempty"`

	// Unit of measure - cores or cpu.
	UnitOfMeasure *SubscriptionUnitOfMeasure `json:"unitOfMeasure,omitempty"`
}

// Validate validates this subscription spec
func (m *SubscriptionSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpirationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitOfMeasure(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubscriptionSpec) validateExpirationTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("expirationTimestamp", "body", "date-time", m.ExpirationTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionSpec) validatePackage(formats strfmt.Registry) error {
	if swag.IsZero(m.Package) { // not required
		return nil
	}

	if m.Package != nil {
		if err := m.Package.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("package")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("package")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionSpec) validateTier(formats strfmt.Registry) error {
	if swag.IsZero(m.Tier) { // not required
		return nil
	}

	if m.Tier != nil {
		if err := m.Tier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tier")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionSpec) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionSpec) validateUnitOfMeasure(formats strfmt.Registry) error {
	if swag.IsZero(m.UnitOfMeasure) { // not required
		return nil
	}

	if m.UnitOfMeasure != nil {
		if err := m.UnitOfMeasure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unitOfMeasure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unitOfMeasure")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this subscription spec based on the context it is used
func (m *SubscriptionSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePackage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnitOfMeasure(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubscriptionSpec) contextValidatePackage(ctx context.Context, formats strfmt.Registry) error {

	if m.Package != nil {
		if err := m.Package.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("package")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("package")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionSpec) contextValidateTier(ctx context.Context, formats strfmt.Registry) error {

	if m.Tier != nil {
		if err := m.Tier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tier")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionSpec) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionSpec) contextValidateUnitOfMeasure(ctx context.Context, formats strfmt.Registry) error {

	if m.UnitOfMeasure != nil {
		if err := m.UnitOfMeasure.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unitOfMeasure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unitOfMeasure")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionSpec) UnmarshalBinary(b []byte) error {
	var res SubscriptionSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
