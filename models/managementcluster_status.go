// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ManagementclusterStatus The ManagementCluster status.
//
// swagger:model managementcluster.Status
type ManagementclusterStatus struct {

	// CPU allocation of a cluster.
	AllocatedCPU *CommonClusterResourceAllocation `json:"allocatedCpu,omitempty"`

	// Memory allocation of a cluster.
	AllocatedMemory *CommonClusterResourceAllocation `json:"allocatedMemory,omitempty"`

	// Conditions of the resource.
	Conditions map[string]VmwareTanzuCoreV1alpha1StatusCondition `json:"conditions,omitempty"`

	// List of the extensions running on the ManagementCluster Management Cluster.
	Extensions []string `json:"extensions"`

	// Health of a resource.
	Health *CommonClusterHealth `json:"health,omitempty"`

	// Health details of the ManagementCluster.
	HealthDetails *CommonClusterHealthInfo `json:"healthDetails,omitempty"`

	// Infrastructure provider.
	InfrastructureProvider *CommonClusterInfrastructureProvider `json:"infrastructureProvider,omitempty"`

	// Kubernetes Server Git Version.
	KubeServerVersion string `json:"kubeServerVersion,omitempty"`

	// Kubernetes Provider which is discovered after registration.
	KubernetesProvider *CommonClusterKubernetesProvider `json:"kubernetesProvider,omitempty"`

	// Timestamp when metadata was last updated on this cluster.
	// Format: date-time
	LastUpdate strfmt.DateTime `json:"lastUpdate,omitempty"`

	// Phase of the resource.
	Phase *ManagementclusterPhase `json:"phase,omitempty"`

	// Region.
	Region string `json:"region,omitempty"`

	// URL to fetch the TMC registration YAML.
	// If the management cluster is registered with proxy, Get on this
	// URL would need user token with sufficient permission to read the
	// proxy set during the registration set. In all other cases, this
	// URL can be fetched without user token.
	RegistrationURL string `json:"registrationUrl,omitempty"`
}

// Validate validates this managementcluster status
func (m *ManagementclusterStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllocatedCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllocatedMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfrastructureProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ManagementclusterStatus) validateAllocatedCPU(formats strfmt.Registry) error {
	if swag.IsZero(m.AllocatedCPU) { // not required
		return nil
	}

	if m.AllocatedCPU != nil {
		if err := m.AllocatedCPU.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allocatedCpu")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allocatedCpu")
			}
			return err
		}
	}

	return nil
}

func (m *ManagementclusterStatus) validateAllocatedMemory(formats strfmt.Registry) error {
	if swag.IsZero(m.AllocatedMemory) { // not required
		return nil
	}

	if m.AllocatedMemory != nil {
		if err := m.AllocatedMemory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allocatedMemory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allocatedMemory")
			}
			return err
		}
	}

	return nil
}

func (m *ManagementclusterStatus) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for k := range m.Conditions {

		if err := validate.Required("conditions"+"."+k, "body", m.Conditions[k]); err != nil {
			return err
		}
		if val, ok := m.Conditions[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *ManagementclusterStatus) validateHealth(formats strfmt.Registry) error {
	if swag.IsZero(m.Health) { // not required
		return nil
	}

	if m.Health != nil {
		if err := m.Health.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health")
			}
			return err
		}
	}

	return nil
}

func (m *ManagementclusterStatus) validateHealthDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthDetails) { // not required
		return nil
	}

	if m.HealthDetails != nil {
		if err := m.HealthDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("healthDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("healthDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ManagementclusterStatus) validateInfrastructureProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.InfrastructureProvider) { // not required
		return nil
	}

	if m.InfrastructureProvider != nil {
		if err := m.InfrastructureProvider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("infrastructureProvider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("infrastructureProvider")
			}
			return err
		}
	}

	return nil
}

func (m *ManagementclusterStatus) validateKubernetesProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesProvider) { // not required
		return nil
	}

	if m.KubernetesProvider != nil {
		if err := m.KubernetesProvider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesProvider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesProvider")
			}
			return err
		}
	}

	return nil
}

func (m *ManagementclusterStatus) validateLastUpdate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdate", "body", "date-time", m.LastUpdate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ManagementclusterStatus) validatePhase(formats strfmt.Registry) error {
	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	if m.Phase != nil {
		if err := m.Phase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this managementcluster status based on the context it is used
func (m *ManagementclusterStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllocatedCPU(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAllocatedMemory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealthDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInfrastructureProvider(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetesProvider(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ManagementclusterStatus) contextValidateAllocatedCPU(ctx context.Context, formats strfmt.Registry) error {

	if m.AllocatedCPU != nil {
		if err := m.AllocatedCPU.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allocatedCpu")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allocatedCpu")
			}
			return err
		}
	}

	return nil
}

func (m *ManagementclusterStatus) contextValidateAllocatedMemory(ctx context.Context, formats strfmt.Registry) error {

	if m.AllocatedMemory != nil {
		if err := m.AllocatedMemory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allocatedMemory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allocatedMemory")
			}
			return err
		}
	}

	return nil
}

func (m *ManagementclusterStatus) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Conditions {

		if val, ok := m.Conditions[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ManagementclusterStatus) contextValidateHealth(ctx context.Context, formats strfmt.Registry) error {

	if m.Health != nil {
		if err := m.Health.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("health")
			}
			return err
		}
	}

	return nil
}

func (m *ManagementclusterStatus) contextValidateHealthDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.HealthDetails != nil {
		if err := m.HealthDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("healthDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("healthDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ManagementclusterStatus) contextValidateInfrastructureProvider(ctx context.Context, formats strfmt.Registry) error {

	if m.InfrastructureProvider != nil {
		if err := m.InfrastructureProvider.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("infrastructureProvider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("infrastructureProvider")
			}
			return err
		}
	}

	return nil
}

func (m *ManagementclusterStatus) contextValidateKubernetesProvider(ctx context.Context, formats strfmt.Registry) error {

	if m.KubernetesProvider != nil {
		if err := m.KubernetesProvider.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesProvider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesProvider")
			}
			return err
		}
	}

	return nil
}

func (m *ManagementclusterStatus) contextValidatePhase(ctx context.Context, formats strfmt.Registry) error {

	if m.Phase != nil {
		if err := m.Phase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ManagementclusterStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ManagementclusterStatus) UnmarshalBinary(b []byte) error {
	var res ManagementclusterStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
