// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AksclusterNodepoolSpec Spec for the cluster nodepool.
//
// swagger:model akscluster.nodepool.Spec
type AksclusterNodepoolSpec struct {

	// Auto scaling config.
	AutoScaling *AksclusterNodepoolAutoScalingConfig `json:"autoScaling,omitempty"`

	// The list of Availability zones to use for nodepool.
	// This can only be specified if the type of the nodepool is AvailabilitySet.
	AvailabilityZones []string `json:"availabilityZones"`

	// Count is the number of nodes.
	Count int32 `json:"count,omitempty"`

	// Whether each node is allocated its own public IP.
	EnableNodePublicIP bool `json:"enableNodePublicIp,omitempty"`

	// The maximum number of pods that can run on a node.
	MaxPods int32 `json:"maxPods,omitempty"`

	// The mode of the nodepool
	// A cluster must have at least one 'System' nodepool at all times.
	Mode *AksclusterNodepoolMode `json:"mode,omitempty"`

	// The node image version of the nodepool.
	NodeImageVersion string `json:"nodeImageVersion,omitempty"`

	// The node labels to be persisted across all nodes in nodepool.
	NodeLabels map[string]string `json:"nodeLabels,omitempty"`

	// The taints added to new nodes during nodepool create and scale.
	NodeTaints []*AksclusterNodepoolTaint `json:"nodeTaints"`

	// OS Disk Size in GB to be used to specify the disk size for every machine in the nodepool.
	// If you specify 0, it will apply the default osDisk size according to the vmSize specified.
	OsDiskSizeGb int32 `json:"osDiskSizeGb,omitempty"`

	// The OS disk type of the nodepool.
	OsDiskType *AksclusterNodepoolOsDiskType `json:"osDiskType,omitempty"`

	// The operation system type of the nodepool.
	OsType *AksclusterNodepoolOsType `json:"osType,omitempty"`

	// The Virtual Machine Scale Set eviction policy to use.
	// This cannot be specified unless the scaleSetPriority is 'Spot'.
	ScaleSetEvictionPolicy *AksclusterNodepoolScaleSetEvictionPolicy `json:"scaleSetEvictionPolicy,omitempty"`

	// The Virtual Machine Scale Set priority.
	ScaleSetPriority *AksclusterNodepoolScaleSetPriority `json:"scaleSetPriority,omitempty"`

	// The max price (in US Dollars) you are willing to pay for spot instances.
	// Possible values are any decimal value greater than zero or -1 which indicates default price to be up-to on-demand.
	SpotMaxPrice float32 `json:"spotMaxPrice,omitempty"`

	// The metadata to apply to the nodepool.
	Tags map[string]string `json:"tags,omitempty"`

	// The type of the nodepool.
	Type *AksclusterNodepoolType `json:"type,omitempty"`

	// The upgrade config.
	UpgradeConfig *AksclusterNodepoolUpgradeConfig `json:"upgradeConfig,omitempty"`

	// The size of the nodepool VMs.
	VMSize string `json:"vmSize,omitempty"`

	// If this is not specified, a VNET and subnet will be generated and used. If no podSubnetID is specified, this applies to
	// nodes and pods, otherwise it applies to just nodes. This is of the form:
	VnetSubnetID string `json:"vnetSubnetId,omitempty"`
}

// Validate validates this akscluster nodepool spec
func (m *AksclusterNodepoolSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoScaling(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeTaints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsDiskType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScaleSetEvictionPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScaleSetPriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AksclusterNodepoolSpec) validateAutoScaling(formats strfmt.Registry) error {
	if swag.IsZero(m.AutoScaling) { // not required
		return nil
	}

	if m.AutoScaling != nil {
		if err := m.AutoScaling.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoScaling")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("autoScaling")
			}
			return err
		}
	}

	return nil
}

func (m *AksclusterNodepoolSpec) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if m.Mode != nil {
		if err := m.Mode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mode")
			}
			return err
		}
	}

	return nil
}

func (m *AksclusterNodepoolSpec) validateNodeTaints(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeTaints) { // not required
		return nil
	}

	for i := 0; i < len(m.NodeTaints); i++ {
		if swag.IsZero(m.NodeTaints[i]) { // not required
			continue
		}

		if m.NodeTaints[i] != nil {
			if err := m.NodeTaints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeTaints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeTaints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AksclusterNodepoolSpec) validateOsDiskType(formats strfmt.Registry) error {
	if swag.IsZero(m.OsDiskType) { // not required
		return nil
	}

	if m.OsDiskType != nil {
		if err := m.OsDiskType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("osDiskType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("osDiskType")
			}
			return err
		}
	}

	return nil
}

func (m *AksclusterNodepoolSpec) validateOsType(formats strfmt.Registry) error {
	if swag.IsZero(m.OsType) { // not required
		return nil
	}

	if m.OsType != nil {
		if err := m.OsType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("osType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("osType")
			}
			return err
		}
	}

	return nil
}

func (m *AksclusterNodepoolSpec) validateScaleSetEvictionPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.ScaleSetEvictionPolicy) { // not required
		return nil
	}

	if m.ScaleSetEvictionPolicy != nil {
		if err := m.ScaleSetEvictionPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scaleSetEvictionPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scaleSetEvictionPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *AksclusterNodepoolSpec) validateScaleSetPriority(formats strfmt.Registry) error {
	if swag.IsZero(m.ScaleSetPriority) { // not required
		return nil
	}

	if m.ScaleSetPriority != nil {
		if err := m.ScaleSetPriority.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scaleSetPriority")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scaleSetPriority")
			}
			return err
		}
	}

	return nil
}

func (m *AksclusterNodepoolSpec) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *AksclusterNodepoolSpec) validateUpgradeConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.UpgradeConfig) { // not required
		return nil
	}

	if m.UpgradeConfig != nil {
		if err := m.UpgradeConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgradeConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgradeConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this akscluster nodepool spec based on the context it is used
func (m *AksclusterNodepoolSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAutoScaling(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeTaints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOsDiskType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOsType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScaleSetEvictionPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScaleSetPriority(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpgradeConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AksclusterNodepoolSpec) contextValidateAutoScaling(ctx context.Context, formats strfmt.Registry) error {

	if m.AutoScaling != nil {
		if err := m.AutoScaling.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoScaling")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("autoScaling")
			}
			return err
		}
	}

	return nil
}

func (m *AksclusterNodepoolSpec) contextValidateMode(ctx context.Context, formats strfmt.Registry) error {

	if m.Mode != nil {
		if err := m.Mode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mode")
			}
			return err
		}
	}

	return nil
}

func (m *AksclusterNodepoolSpec) contextValidateNodeTaints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodeTaints); i++ {

		if m.NodeTaints[i] != nil {
			if err := m.NodeTaints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodeTaints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodeTaints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AksclusterNodepoolSpec) contextValidateOsDiskType(ctx context.Context, formats strfmt.Registry) error {

	if m.OsDiskType != nil {
		if err := m.OsDiskType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("osDiskType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("osDiskType")
			}
			return err
		}
	}

	return nil
}

func (m *AksclusterNodepoolSpec) contextValidateOsType(ctx context.Context, formats strfmt.Registry) error {

	if m.OsType != nil {
		if err := m.OsType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("osType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("osType")
			}
			return err
		}
	}

	return nil
}

func (m *AksclusterNodepoolSpec) contextValidateScaleSetEvictionPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.ScaleSetEvictionPolicy != nil {
		if err := m.ScaleSetEvictionPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scaleSetEvictionPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scaleSetEvictionPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *AksclusterNodepoolSpec) contextValidateScaleSetPriority(ctx context.Context, formats strfmt.Registry) error {

	if m.ScaleSetPriority != nil {
		if err := m.ScaleSetPriority.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scaleSetPriority")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scaleSetPriority")
			}
			return err
		}
	}

	return nil
}

func (m *AksclusterNodepoolSpec) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *AksclusterNodepoolSpec) contextValidateUpgradeConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.UpgradeConfig != nil {
		if err := m.UpgradeConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgradeConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgradeConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AksclusterNodepoolSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AksclusterNodepoolSpec) UnmarshalBinary(b []byte) error {
	var res AksclusterNodepoolSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
