// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EksclusterLaunchTemplateVersionOptions Launch template version related options.
//
// swagger:model ekscluster.LaunchTemplateVersionOptions
type EksclusterLaunchTemplateVersionOptions struct {

	// Defined AMI type in the template.
	AmiType string `json:"amiType,omitempty"`

	// Is IAM instance profile defined in the template.
	IamInstanceProfileDefined bool `json:"iamInstanceProfileDefined,omitempty"`

	// Defined instance type in the template.
	InstanceType string `json:"instanceType,omitempty"`

	// Is atleast one network interface defined in the template.
	NetworkInterfaceDefined bool `json:"networkInterfaceDefined,omitempty"`

	// Defined security groups in the template.
	SecurityGroups []string `json:"securityGroups"`

	// Defined SSH key in the template.
	SSHKey string `json:"sshKey,omitempty"`

	// The version of the launch template.
	Version string `json:"version,omitempty"`
}

// Validate validates this ekscluster launch template version options
func (m *EksclusterLaunchTemplateVersionOptions) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ekscluster launch template version options based on context it is used
func (m *EksclusterLaunchTemplateVersionOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EksclusterLaunchTemplateVersionOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EksclusterLaunchTemplateVersionOptions) UnmarshalBinary(b []byte) error {
	var res EksclusterLaunchTemplateVersionOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
