// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterInfrastructureTkgazureProviderNetwork Azure related network settings for the cluster. Ensure all values are specified for this section.
//
// swagger:model cluster.infrastructure.tkgazure.ProviderNetwork
type ClusterInfrastructureTkgazureProviderNetwork struct {

	// Subnet details of the control plane.
	ControlPlaneSubnet *ClusterInfrastructureTkgazureSubnet `json:"controlPlaneSubnet,omitempty"`

	// Azure VNET configuration for the cluster.
	Vnet *ClusterInfrastructureTkgazureVNET `json:"vnet,omitempty"`

	// Subnet details of the worker nodes.
	WorkerNodeSubnet *ClusterInfrastructureTkgazureSubnet `json:"workerNodeSubnet,omitempty"`
}

// Validate validates this cluster infrastructure tkgazure provider network
func (m *ClusterInfrastructureTkgazureProviderNetwork) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControlPlaneSubnet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVnet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkerNodeSubnet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterInfrastructureTkgazureProviderNetwork) validateControlPlaneSubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.ControlPlaneSubnet) { // not required
		return nil
	}

	if m.ControlPlaneSubnet != nil {
		if err := m.ControlPlaneSubnet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controlPlaneSubnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controlPlaneSubnet")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterInfrastructureTkgazureProviderNetwork) validateVnet(formats strfmt.Registry) error {
	if swag.IsZero(m.Vnet) { // not required
		return nil
	}

	if m.Vnet != nil {
		if err := m.Vnet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vnet")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterInfrastructureTkgazureProviderNetwork) validateWorkerNodeSubnet(formats strfmt.Registry) error {
	if swag.IsZero(m.WorkerNodeSubnet) { // not required
		return nil
	}

	if m.WorkerNodeSubnet != nil {
		if err := m.WorkerNodeSubnet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workerNodeSubnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workerNodeSubnet")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster infrastructure tkgazure provider network based on the context it is used
func (m *ClusterInfrastructureTkgazureProviderNetwork) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateControlPlaneSubnet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVnet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkerNodeSubnet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterInfrastructureTkgazureProviderNetwork) contextValidateControlPlaneSubnet(ctx context.Context, formats strfmt.Registry) error {

	if m.ControlPlaneSubnet != nil {
		if err := m.ControlPlaneSubnet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("controlPlaneSubnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("controlPlaneSubnet")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterInfrastructureTkgazureProviderNetwork) contextValidateVnet(ctx context.Context, formats strfmt.Registry) error {

	if m.Vnet != nil {
		if err := m.Vnet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vnet")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterInfrastructureTkgazureProviderNetwork) contextValidateWorkerNodeSubnet(ctx context.Context, formats strfmt.Registry) error {

	if m.WorkerNodeSubnet != nil {
		if err := m.WorkerNodeSubnet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workerNodeSubnet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workerNodeSubnet")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterInfrastructureTkgazureProviderNetwork) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterInfrastructureTkgazureProviderNetwork) UnmarshalBinary(b []byte) error {
	var res ClusterInfrastructureTkgazureProviderNetwork
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
