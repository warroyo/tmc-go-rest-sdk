// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AksclusterNodepoolScaleSetEvictionPolicy ScaleSetEvictionPolicy of the auto scaling config.
//
//   - SCALE_SET_EVICTION_POLICY_UNSPECIFIED: Unspecified scale set eviction policy.
//   - DELETE: Nodes in the underlying Scale Set of the nodepool are deleted when they're evicted.
//   - DEALLOCATE: Nodes in the underlying Scale Set of the nodepool are set to the stopped-deallocated state upon eviction.
//
// swagger:model akscluster.nodepool.ScaleSetEvictionPolicy
type AksclusterNodepoolScaleSetEvictionPolicy string

func NewAksclusterNodepoolScaleSetEvictionPolicy(value AksclusterNodepoolScaleSetEvictionPolicy) *AksclusterNodepoolScaleSetEvictionPolicy {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AksclusterNodepoolScaleSetEvictionPolicy.
func (m AksclusterNodepoolScaleSetEvictionPolicy) Pointer() *AksclusterNodepoolScaleSetEvictionPolicy {
	return &m
}

const (

	// AksclusterNodepoolScaleSetEvictionPolicySCALESETEVICTIONPOLICYUNSPECIFIED captures enum value "SCALE_SET_EVICTION_POLICY_UNSPECIFIED"
	AksclusterNodepoolScaleSetEvictionPolicySCALESETEVICTIONPOLICYUNSPECIFIED AksclusterNodepoolScaleSetEvictionPolicy = "SCALE_SET_EVICTION_POLICY_UNSPECIFIED"

	// AksclusterNodepoolScaleSetEvictionPolicyDELETE captures enum value "DELETE"
	AksclusterNodepoolScaleSetEvictionPolicyDELETE AksclusterNodepoolScaleSetEvictionPolicy = "DELETE"

	// AksclusterNodepoolScaleSetEvictionPolicyDEALLOCATE captures enum value "DEALLOCATE"
	AksclusterNodepoolScaleSetEvictionPolicyDEALLOCATE AksclusterNodepoolScaleSetEvictionPolicy = "DEALLOCATE"
)

// for schema
var aksclusterNodepoolScaleSetEvictionPolicyEnum []interface{}

func init() {
	var res []AksclusterNodepoolScaleSetEvictionPolicy
	if err := json.Unmarshal([]byte(`["SCALE_SET_EVICTION_POLICY_UNSPECIFIED","DELETE","DEALLOCATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		aksclusterNodepoolScaleSetEvictionPolicyEnum = append(aksclusterNodepoolScaleSetEvictionPolicyEnum, v)
	}
}

func (m AksclusterNodepoolScaleSetEvictionPolicy) validateAksclusterNodepoolScaleSetEvictionPolicyEnum(path, location string, value AksclusterNodepoolScaleSetEvictionPolicy) error {
	if err := validate.EnumCase(path, location, value, aksclusterNodepoolScaleSetEvictionPolicyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this akscluster nodepool scale set eviction policy
func (m AksclusterNodepoolScaleSetEvictionPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAksclusterNodepoolScaleSetEvictionPolicyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this akscluster nodepool scale set eviction policy based on context it is used
func (m AksclusterNodepoolScaleSetEvictionPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
