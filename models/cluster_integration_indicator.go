// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterIntegrationIndicator Indicator is the value of the abstracted statuses.
//
//   - INDICATOR_UNSPECIFIED: Default indicator.
//   - OK: OK indicates everything is good.
//   - ATTENTION_REQUIRED: ATTENTION_REQUIRED indicates something is bad / requires attention of user.
//
// swagger:model cluster.integration.Indicator
type ClusterIntegrationIndicator string

func NewClusterIntegrationIndicator(value ClusterIntegrationIndicator) *ClusterIntegrationIndicator {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClusterIntegrationIndicator.
func (m ClusterIntegrationIndicator) Pointer() *ClusterIntegrationIndicator {
	return &m
}

const (

	// ClusterIntegrationIndicatorINDICATORUNSPECIFIED captures enum value "INDICATOR_UNSPECIFIED"
	ClusterIntegrationIndicatorINDICATORUNSPECIFIED ClusterIntegrationIndicator = "INDICATOR_UNSPECIFIED"

	// ClusterIntegrationIndicatorOK captures enum value "OK"
	ClusterIntegrationIndicatorOK ClusterIntegrationIndicator = "OK"

	// ClusterIntegrationIndicatorATTENTIONREQUIRED captures enum value "ATTENTION_REQUIRED"
	ClusterIntegrationIndicatorATTENTIONREQUIRED ClusterIntegrationIndicator = "ATTENTION_REQUIRED"
)

// for schema
var clusterIntegrationIndicatorEnum []interface{}

func init() {
	var res []ClusterIntegrationIndicator
	if err := json.Unmarshal([]byte(`["INDICATOR_UNSPECIFIED","OK","ATTENTION_REQUIRED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterIntegrationIndicatorEnum = append(clusterIntegrationIndicatorEnum, v)
	}
}

func (m ClusterIntegrationIndicator) validateClusterIntegrationIndicatorEnum(path, location string, value ClusterIntegrationIndicator) error {
	if err := validate.EnumCase(path, location, value, clusterIntegrationIndicatorEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster integration indicator
func (m ClusterIntegrationIndicator) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterIntegrationIndicatorEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cluster integration indicator based on context it is used
func (m ClusterIntegrationIndicator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
