// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TanzupackageTapSolutionClusterPackageStatus Status of each cluster package in the solution.
//
// swagger:model tanzupackage.tap.solution.ClusterPackageStatus
type TanzupackageTapSolutionClusterPackageStatus struct {

	// Cluster identifier.
	ClusterFullName *ClusterFullName `json:"clusterFullName,omitempty"`

	// Conditions of the profile.
	Conditions map[string]VmwareTanzuCoreV1alpha1StatusCondition `json:"conditions,omitempty"`

	// TAP package identifier.
	PackageRef *CommonTanzupackagePackageRef `json:"packageRef,omitempty"`

	// Phase of the profile.
	Phase *TanzupackageTapSolutionPhase `json:"phase,omitempty"`

	// Carvel app label for the TAP package
	// This can be used to identify individual packages installed as part of this TAP Solution.
	TapAppLabel string `json:"tapAppLabel,omitempty"`

	// Name of the TAP profile.
	TapProfile string `json:"tapProfile,omitempty"`
}

// Validate validates this tanzupackage tap solution cluster package status
func (m *TanzupackageTapSolutionClusterPackageStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterFullName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TanzupackageTapSolutionClusterPackageStatus) validateClusterFullName(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterFullName) { // not required
		return nil
	}

	if m.ClusterFullName != nil {
		if err := m.ClusterFullName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterFullName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterFullName")
			}
			return err
		}
	}

	return nil
}

func (m *TanzupackageTapSolutionClusterPackageStatus) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for k := range m.Conditions {

		if err := validate.Required("conditions"+"."+k, "body", m.Conditions[k]); err != nil {
			return err
		}
		if val, ok := m.Conditions[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *TanzupackageTapSolutionClusterPackageStatus) validatePackageRef(formats strfmt.Registry) error {
	if swag.IsZero(m.PackageRef) { // not required
		return nil
	}

	if m.PackageRef != nil {
		if err := m.PackageRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageRef")
			}
			return err
		}
	}

	return nil
}

func (m *TanzupackageTapSolutionClusterPackageStatus) validatePhase(formats strfmt.Registry) error {
	if swag.IsZero(m.Phase) { // not required
		return nil
	}

	if m.Phase != nil {
		if err := m.Phase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tanzupackage tap solution cluster package status based on the context it is used
func (m *TanzupackageTapSolutionClusterPackageStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterFullName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackageRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TanzupackageTapSolutionClusterPackageStatus) contextValidateClusterFullName(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterFullName != nil {
		if err := m.ClusterFullName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterFullName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterFullName")
			}
			return err
		}
	}

	return nil
}

func (m *TanzupackageTapSolutionClusterPackageStatus) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Conditions {

		if val, ok := m.Conditions[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *TanzupackageTapSolutionClusterPackageStatus) contextValidatePackageRef(ctx context.Context, formats strfmt.Registry) error {

	if m.PackageRef != nil {
		if err := m.PackageRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageRef")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageRef")
			}
			return err
		}
	}

	return nil
}

func (m *TanzupackageTapSolutionClusterPackageStatus) contextValidatePhase(ctx context.Context, formats strfmt.Registry) error {

	if m.Phase != nil {
		if err := m.Phase.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phase")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phase")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TanzupackageTapSolutionClusterPackageStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TanzupackageTapSolutionClusterPackageStatus) UnmarshalBinary(b []byte) error {
	var res TanzupackageTapSolutionClusterPackageStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
