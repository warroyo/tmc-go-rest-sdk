// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterObjectObjectNode Node Object containing aggregated resources.
//
// swagger:model cluster.object.ObjectNode
type ClusterObjectObjectNode struct {

	// Node object.
	ResourceNode *K8sIoAPICoreV1Node `json:"resourceNode,omitempty"`

	// Role of the node.
	Role *ClusterObjectObjectNodeRole `json:"role,omitempty"`
}

// Validate validates this cluster object object node
func (m *ClusterObjectObjectNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterObjectObjectNode) validateResourceNode(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceNode) { // not required
		return nil
	}

	if m.ResourceNode != nil {
		if err := m.ResourceNode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceNode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceNode")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectObjectNode) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if m.Role != nil {
		if err := m.Role.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster object object node based on the context it is used
func (m *ClusterObjectObjectNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResourceNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterObjectObjectNode) contextValidateResourceNode(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceNode != nil {
		if err := m.ResourceNode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceNode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resourceNode")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectObjectNode) contextValidateRole(ctx context.Context, formats strfmt.Registry) error {

	if m.Role != nil {
		if err := m.Role.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterObjectObjectNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterObjectObjectNode) UnmarshalBinary(b []byte) error {
	var res ClusterObjectObjectNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
