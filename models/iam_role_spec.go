// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IamRoleSpec Spec for role.
//
// swagger:model iam.role.Spec
type IamRoleSpec struct {

	// AggregationRule.
	AggregationRule *IamRoleAggregationRule `json:"aggregationRule,omitempty"`

	// Flag representing whether role is deprecated.
	IsDeprecated bool `json:"isDeprecated,omitempty"`

	// This flag will help the client identify if this is an inbuilt role.
	IsInbuilt bool `json:"isInbuilt,omitempty"`

	// List of permissions associated with the role eg. resource.get, resource.iam.get etc.
	// Deprecated - use tanzu_permissions instead.
	Permissions []string `json:"permissions"`

	// Relevant resource types for the role.
	// Deprecated - use resources instead.
	ResourceTypes []string `json:"resourceTypes"`

	// Valid resources for this role.
	Resources []*IamPermissionResource `json:"resources"`

	// KubernetesRule.
	Rules []*IamRoleKubernetesRule `json:"rules"`

	// Tanzu-specific permissions for the role.
	TanzuPermissions []string `json:"tanzuPermissions"`
}

// Validate validates this iam role spec
func (m *IamRoleSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregationRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamRoleSpec) validateAggregationRule(formats strfmt.Registry) error {
	if swag.IsZero(m.AggregationRule) { // not required
		return nil
	}

	if m.AggregationRule != nil {
		if err := m.AggregationRule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aggregationRule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aggregationRule")
			}
			return err
		}
	}

	return nil
}

func (m *IamRoleSpec) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	for i := 0; i < len(m.Resources); i++ {
		if swag.IsZero(m.Resources[i]) { // not required
			continue
		}

		if m.Resources[i] != nil {
			if err := m.Resources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IamRoleSpec) validateRules(formats strfmt.Registry) error {
	if swag.IsZero(m.Rules) { // not required
		return nil
	}

	for i := 0; i < len(m.Rules); i++ {
		if swag.IsZero(m.Rules[i]) { // not required
			continue
		}

		if m.Rules[i] != nil {
			if err := m.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this iam role spec based on the context it is used
func (m *IamRoleSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAggregationRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamRoleSpec) contextValidateAggregationRule(ctx context.Context, formats strfmt.Registry) error {

	if m.AggregationRule != nil {
		if err := m.AggregationRule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aggregationRule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aggregationRule")
			}
			return err
		}
	}

	return nil
}

func (m *IamRoleSpec) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Resources); i++ {

		if m.Resources[i] != nil {
			if err := m.Resources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IamRoleSpec) contextValidateRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rules); i++ {

		if m.Rules[i] != nil {
			if err := m.Rules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IamRoleSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamRoleSpec) UnmarshalBinary(b []byte) error {
	var res IamRoleSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
