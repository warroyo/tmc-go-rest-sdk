// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterDataprotectionBackupSpec The backup spec.
//
// swagger:model cluster.dataprotection.backup.Spec
type ClusterDataprotectionBackupSpec struct {

	// Specifies the time used to wait for CSI VolumeSnapshot status turns to ReadyToUse
	// during creation, before returning error as timeout. The default value is 10 minute.
	CsiSnapshotTimeout string `json:"csiSnapshotTimeout,omitempty"`

	// Specifies whether all pod volumes should be backed up via file system backup by default.
	DefaultVolumesToFsBackup bool `json:"defaultVolumesToFsBackup,omitempty"`

	// Specifies whether restic should be used to take a backup of all pod volumes by default.
	// Deprecated - use default_volumes_to_fs_backup instead.
	DefaultVolumesToRestic bool `json:"defaultVolumesToRestic,omitempty"`

	// The namespaces to be excluded in the backup.
	ExcludedNamespaces []string `json:"excludedNamespaces"`

	// The name list for the resources to be excluded in backup.
	ExcludedResources []string `json:"excludedResources"`

	// Hooks represent custom actions that should be executed at different phases of the backup.
	Hooks *ClusterDataprotectionBackupBackupHooks `json:"hooks,omitempty"`

	// A flag which specifies whether cluster-scoped resources should be included for consideration in the backup.
	// If set to true, all cluster-scoped resources will be backed up. If set to false, all cluster-scoped resources
	// will be excluded from the backup. If unset, all cluster-scoped resources are included if and only if all
	// namespaces are included and there are no excluded namespaces.
	// Otherwise, only cluster-scoped resources associated with namespace-scoped resources
	// included in the backup spec are backed up. For example, if a PersistentVolumeClaim is included in the backup,
	// its associated PersistentVolume (which is cluster-scoped) would also be backed up.
	IncludeClusterResources bool `json:"includeClusterResources,omitempty"`

	// The namespace to be included for backup from. If empty, all namespaces are included.
	IncludedNamespaces []string `json:"includedNamespaces"`

	// The name list for the resources to be included into backup. If empty, all resources are included.
	IncludedResources []string `json:"includedResources"`

	// The label selector to selectively adding individual objects to the backup. If empty
	// or nil, all objects are included. Optional.
	LabelSelector *K8sIoApimachineryPkgApisMetaV1LabelSelector `json:"labelSelector,omitempty"`

	// A list of metav1.LabelSelector to filter with when adding individual objects to the backup.
	// If multiple provided they will be joined by the OR operator. LabelSelector as well as
	// OrLabelSelectors cannot co-exist in backup request, only one of them can be used.
	OrLabelSelectors []*K8sIoApimachineryPkgApisMetaV1LabelSelector `json:"orLabelSelectors"`

	// Specifies the backup order of resources of specific Kind. The map key is the Kind name and
	// value is a list of resource names separated by commas. Each resource name has format "namespace/resourcename".
	// For cluster resources, simply use "resourcename".
	OrderedResources map[string]string `json:"orderedResources,omitempty"`

	// A flag which specifies whether to take cloud snapshots of any PV's referenced in the set of objects
	// included in the Backup. If set to true, snapshots will be taken. If set to false, snapshots will be skipped.
	// If left unset, snapshots will be attempted if volume snapshots are configured for the cluster.
	SnapshotVolumes bool `json:"snapshotVolumes,omitempty"`

	// The name of a BackupStorageLocation where the backup should be stored.
	StorageLocation string `json:"storageLocation,omitempty"`

	// The backup retention period.
	TTL string `json:"ttl,omitempty"`

	// A list containing names of VolumeSnapshotLocations associated with this backup.
	VolumeSnapshotLocations []string `json:"volumeSnapshotLocations"`
}

// Validate validates this cluster dataprotection backup spec
func (m *ClusterDataprotectionBackupSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHooks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelSelector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrLabelSelectors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDataprotectionBackupSpec) validateHooks(formats strfmt.Registry) error {
	if swag.IsZero(m.Hooks) { // not required
		return nil
	}

	if m.Hooks != nil {
		if err := m.Hooks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hooks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hooks")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDataprotectionBackupSpec) validateLabelSelector(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelSelector) { // not required
		return nil
	}

	if m.LabelSelector != nil {
		if err := m.LabelSelector.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labelSelector")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labelSelector")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDataprotectionBackupSpec) validateOrLabelSelectors(formats strfmt.Registry) error {
	if swag.IsZero(m.OrLabelSelectors) { // not required
		return nil
	}

	for i := 0; i < len(m.OrLabelSelectors); i++ {
		if swag.IsZero(m.OrLabelSelectors[i]) { // not required
			continue
		}

		if m.OrLabelSelectors[i] != nil {
			if err := m.OrLabelSelectors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orLabelSelectors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("orLabelSelectors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cluster dataprotection backup spec based on the context it is used
func (m *ClusterDataprotectionBackupSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHooks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelSelector(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrLabelSelectors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDataprotectionBackupSpec) contextValidateHooks(ctx context.Context, formats strfmt.Registry) error {

	if m.Hooks != nil {
		if err := m.Hooks.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hooks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hooks")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDataprotectionBackupSpec) contextValidateLabelSelector(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelSelector != nil {
		if err := m.LabelSelector.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labelSelector")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labelSelector")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDataprotectionBackupSpec) contextValidateOrLabelSelectors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OrLabelSelectors); i++ {

		if m.OrLabelSelectors[i] != nil {
			if err := m.OrLabelSelectors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orLabelSelectors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("orLabelSelectors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterDataprotectionBackupSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterDataprotectionBackupSpec) UnmarshalBinary(b []byte) error {
	var res ClusterDataprotectionBackupSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
