// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// K8sIoAPICoreV1Volume Volume represents a named volume in a pod that may be accessed by any container in the pod.
//
// swagger:model k8s.io.api.core.v1.Volume
type K8sIoAPICoreV1Volume struct {

	// Volume's name.
	// Must be a DNS_LABEL and unique within the pod.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `json:"name,omitempty"`

	// VolumeSource represents the location and type of the mounted volume.
	// If not specified, the Volume is implied to be an EmptyDir.
	// This implied behavior is deprecated and will be removed in a future version.
	VolumeSource *K8sIoAPICoreV1VolumeSource `json:"volumeSource,omitempty"`
}

// Validate validates this k8s io api core v1 volume
func (m *K8sIoAPICoreV1Volume) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVolumeSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *K8sIoAPICoreV1Volume) validateVolumeSource(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeSource) { // not required
		return nil
	}

	if m.VolumeSource != nil {
		if err := m.VolumeSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volumeSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volumeSource")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this k8s io api core v1 volume based on the context it is used
func (m *K8sIoAPICoreV1Volume) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVolumeSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *K8sIoAPICoreV1Volume) contextValidateVolumeSource(ctx context.Context, formats strfmt.Registry) error {

	if m.VolumeSource != nil {
		if err := m.VolumeSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volumeSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("volumeSource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *K8sIoAPICoreV1Volume) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *K8sIoAPICoreV1Volume) UnmarshalBinary(b []byte) error {
	var res K8sIoAPICoreV1Volume
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
