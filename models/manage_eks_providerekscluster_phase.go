// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ManageEksProvidereksclusterPhase Phase of the cluster resource.
//
//   - PHASE_UNSPECIFIED: Unspecified phase.
//   - PENDING_UNMANAGE: This phase indicates the cluster is in the process of being unmanaged by TMC.
//   - PENDING_MANAGE: This phase indicates the cluster is in the process of being managed by TMC.
//   - UNMANAGED: This phase indicates the cluster is not managed by TMC.
//   - MANAGED: This phase indicates the cluster is managed by TMC.
//   - ERROR: Error in processing.
//
// swagger:model manage.eks.providerekscluster.Phase
type ManageEksProvidereksclusterPhase string

func NewManageEksProvidereksclusterPhase(value ManageEksProvidereksclusterPhase) *ManageEksProvidereksclusterPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ManageEksProvidereksclusterPhase.
func (m ManageEksProvidereksclusterPhase) Pointer() *ManageEksProvidereksclusterPhase {
	return &m
}

const (

	// ManageEksProvidereksclusterPhasePHASEUNSPECIFIED captures enum value "PHASE_UNSPECIFIED"
	ManageEksProvidereksclusterPhasePHASEUNSPECIFIED ManageEksProvidereksclusterPhase = "PHASE_UNSPECIFIED"

	// ManageEksProvidereksclusterPhasePENDINGUNMANAGE captures enum value "PENDING_UNMANAGE"
	ManageEksProvidereksclusterPhasePENDINGUNMANAGE ManageEksProvidereksclusterPhase = "PENDING_UNMANAGE"

	// ManageEksProvidereksclusterPhasePENDINGMANAGE captures enum value "PENDING_MANAGE"
	ManageEksProvidereksclusterPhasePENDINGMANAGE ManageEksProvidereksclusterPhase = "PENDING_MANAGE"

	// ManageEksProvidereksclusterPhaseUNMANAGED captures enum value "UNMANAGED"
	ManageEksProvidereksclusterPhaseUNMANAGED ManageEksProvidereksclusterPhase = "UNMANAGED"

	// ManageEksProvidereksclusterPhaseMANAGED captures enum value "MANAGED"
	ManageEksProvidereksclusterPhaseMANAGED ManageEksProvidereksclusterPhase = "MANAGED"

	// ManageEksProvidereksclusterPhaseERROR captures enum value "ERROR"
	ManageEksProvidereksclusterPhaseERROR ManageEksProvidereksclusterPhase = "ERROR"
)

// for schema
var manageEksProvidereksclusterPhaseEnum []interface{}

func init() {
	var res []ManageEksProvidereksclusterPhase
	if err := json.Unmarshal([]byte(`["PHASE_UNSPECIFIED","PENDING_UNMANAGE","PENDING_MANAGE","UNMANAGED","MANAGED","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		manageEksProvidereksclusterPhaseEnum = append(manageEksProvidereksclusterPhaseEnum, v)
	}
}

func (m ManageEksProvidereksclusterPhase) validateManageEksProvidereksclusterPhaseEnum(path, location string, value ManageEksProvidereksclusterPhase) error {
	if err := validate.EnumCase(path, location, value, manageEksProvidereksclusterPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this manage eks providerekscluster phase
func (m ManageEksProvidereksclusterPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateManageEksProvidereksclusterPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this manage eks providerekscluster phase based on context it is used
func (m ManageEksProvidereksclusterPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
