// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CommonClusterTKGVsphereInstanceType Predefined TKG Instance Type.
//
// swagger:model common.cluster.TKGVsphereInstanceType
type CommonClusterTKGVsphereInstanceType struct {

	// Name of the t-shirt size associated with this set of resources, if any.
	// Example: small, medium, large
	Name string `json:"name,omitempty"`

	// VM resource configuration for the instance type. e.g. cpu, disk, memory.
	VMConfig *CommonClusterTKGVsphereVMConfig `json:"vmConfig,omitempty"`
}

// Validate validates this common cluster t k g vsphere instance type
func (m *CommonClusterTKGVsphereInstanceType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVMConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonClusterTKGVsphereInstanceType) validateVMConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.VMConfig) { // not required
		return nil
	}

	if m.VMConfig != nil {
		if err := m.VMConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this common cluster t k g vsphere instance type based on the context it is used
func (m *CommonClusterTKGVsphereInstanceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVMConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonClusterTKGVsphereInstanceType) contextValidateVMConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.VMConfig != nil {
		if err := m.VMConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonClusterTKGVsphereInstanceType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonClusterTKGVsphereInstanceType) UnmarshalBinary(b []byte) error {
	var res CommonClusterTKGVsphereInstanceType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
