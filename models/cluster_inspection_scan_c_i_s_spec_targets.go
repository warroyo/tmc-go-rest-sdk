// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterInspectionScanCISSpecTargets Targets is an enumeration of targets that CIS can run against.
//
//   - TARGETS_UNSPECIFIED: Unspecified Target refers to an unspecified target.
//   - LEADER_NODE: Target is the leader Node.
//   - NODE: Target is all nodes apart from the control plane nodes.
//   - ETCD: Target is the ETCD.
//   - CONTROL_PLANE: Target is the control plane components.
//   - POLICIES: Target is the policies on the cluster.
//
// swagger:model cluster.inspection.scan.CISSpec.Targets
type ClusterInspectionScanCISSpecTargets string

func NewClusterInspectionScanCISSpecTargets(value ClusterInspectionScanCISSpecTargets) *ClusterInspectionScanCISSpecTargets {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClusterInspectionScanCISSpecTargets.
func (m ClusterInspectionScanCISSpecTargets) Pointer() *ClusterInspectionScanCISSpecTargets {
	return &m
}

const (

	// ClusterInspectionScanCISSpecTargetsTARGETSUNSPECIFIED captures enum value "TARGETS_UNSPECIFIED"
	ClusterInspectionScanCISSpecTargetsTARGETSUNSPECIFIED ClusterInspectionScanCISSpecTargets = "TARGETS_UNSPECIFIED"

	// ClusterInspectionScanCISSpecTargetsLEADERNODE captures enum value "LEADER_NODE"
	ClusterInspectionScanCISSpecTargetsLEADERNODE ClusterInspectionScanCISSpecTargets = "LEADER_NODE"

	// ClusterInspectionScanCISSpecTargetsNODE captures enum value "NODE"
	ClusterInspectionScanCISSpecTargetsNODE ClusterInspectionScanCISSpecTargets = "NODE"

	// ClusterInspectionScanCISSpecTargetsETCD captures enum value "ETCD"
	ClusterInspectionScanCISSpecTargetsETCD ClusterInspectionScanCISSpecTargets = "ETCD"

	// ClusterInspectionScanCISSpecTargetsCONTROLPLANE captures enum value "CONTROL_PLANE"
	ClusterInspectionScanCISSpecTargetsCONTROLPLANE ClusterInspectionScanCISSpecTargets = "CONTROL_PLANE"

	// ClusterInspectionScanCISSpecTargetsPOLICIES captures enum value "POLICIES"
	ClusterInspectionScanCISSpecTargetsPOLICIES ClusterInspectionScanCISSpecTargets = "POLICIES"
)

// for schema
var clusterInspectionScanCISSpecTargetsEnum []interface{}

func init() {
	var res []ClusterInspectionScanCISSpecTargets
	if err := json.Unmarshal([]byte(`["TARGETS_UNSPECIFIED","LEADER_NODE","NODE","ETCD","CONTROL_PLANE","POLICIES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterInspectionScanCISSpecTargetsEnum = append(clusterInspectionScanCISSpecTargetsEnum, v)
	}
}

func (m ClusterInspectionScanCISSpecTargets) validateClusterInspectionScanCISSpecTargetsEnum(path, location string, value ClusterInspectionScanCISSpecTargets) error {
	if err := validate.EnumCase(path, location, value, clusterInspectionScanCISSpecTargetsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster inspection scan c i s spec targets
func (m ClusterInspectionScanCISSpecTargets) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterInspectionScanCISSpecTargetsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cluster inspection scan c i s spec targets based on context it is used
func (m ClusterInspectionScanCISSpecTargets) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
