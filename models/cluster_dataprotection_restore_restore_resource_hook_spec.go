// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterDataprotectionRestoreRestoreResourceHookSpec RestoreResourceHookSpec defines one or more RestoreResourceHooks that should be executed based on
// the rules defined for namespaces, and labels.
//
// swagger:model cluster.dataprotection.restore.RestoreResourceHookSpec
type ClusterDataprotectionRestoreRestoreResourceHookSpec struct {

	// ExcludedNamespaces specifies the namespaces to which this hook spec does not apply.
	ExcludedNamespaces []string `json:"excludedNamespaces"`

	// IncludedNamespaces specifies the namespaces to which this hook spec applies. If empty, it applies
	// to all namespaces.
	IncludedNamespaces []string `json:"includedNamespaces"`

	// LabelSelector, if specified, filters the resources to which this hook spec applies.
	LabelSelector *K8sIoApimachineryPkgApisMetaV1LabelSelector `json:"labelSelector,omitempty"`

	// Name is the name of this hook.
	Name string `json:"name,omitempty"`

	// PostHooks is a list of RestoreResourceHooks to execute during and after restoring a resource.
	PostHooks []*ClusterDataprotectionRestoreRestoreResourceHook `json:"postHooks"`
}

// Validate validates this cluster dataprotection restore restore resource hook spec
func (m *ClusterDataprotectionRestoreRestoreResourceHookSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabelSelector(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostHooks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDataprotectionRestoreRestoreResourceHookSpec) validateLabelSelector(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelSelector) { // not required
		return nil
	}

	if m.LabelSelector != nil {
		if err := m.LabelSelector.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labelSelector")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labelSelector")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDataprotectionRestoreRestoreResourceHookSpec) validatePostHooks(formats strfmt.Registry) error {
	if swag.IsZero(m.PostHooks) { // not required
		return nil
	}

	for i := 0; i < len(m.PostHooks); i++ {
		if swag.IsZero(m.PostHooks[i]) { // not required
			continue
		}

		if m.PostHooks[i] != nil {
			if err := m.PostHooks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postHooks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postHooks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cluster dataprotection restore restore resource hook spec based on the context it is used
func (m *ClusterDataprotectionRestoreRestoreResourceHookSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLabelSelector(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostHooks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDataprotectionRestoreRestoreResourceHookSpec) contextValidateLabelSelector(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelSelector != nil {
		if err := m.LabelSelector.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labelSelector")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labelSelector")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterDataprotectionRestoreRestoreResourceHookSpec) contextValidatePostHooks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PostHooks); i++ {

		if m.PostHooks[i] != nil {
			if err := m.PostHooks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postHooks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postHooks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterDataprotectionRestoreRestoreResourceHookSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterDataprotectionRestoreRestoreResourceHookSpec) UnmarshalBinary(b []byte) error {
	var res ClusterDataprotectionRestoreRestoreResourceHookSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
