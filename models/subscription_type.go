// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SubscriptionType Type are the available contract types.
//
//   - CONTRACT_TYPE_UNSPECIFIED: UNSPECIFIED contract type.
//   - FREE_TRIAL: FREE_TRIAL contract type.
//   - SUBSCRIPTION_PURCHASE_PROGRAM: SPP contract type.
//   - PURCHASE_ORDER: PURCHASE_ORDER contract type.
//   - DESIGN_PARTNER_PROGRAM: DESIGN_PARTNER_PROGRAM contract type.
//   - TKG_TO_TANZU_STANDARD: TKG_TO_TANZU_STANDARD contract type.
//   - TANZU_STANDARD_SPP: TANZU STANDARD SPP contract type.
//   - ON_DEMAND: ON_DEMAND contract type.
//   - STARTER: STARTER contract type.
//
// swagger:model subscription.Type
type SubscriptionType string

func NewSubscriptionType(value SubscriptionType) *SubscriptionType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SubscriptionType.
func (m SubscriptionType) Pointer() *SubscriptionType {
	return &m
}

const (

	// SubscriptionTypeCONTRACTTYPEUNSPECIFIED captures enum value "CONTRACT_TYPE_UNSPECIFIED"
	SubscriptionTypeCONTRACTTYPEUNSPECIFIED SubscriptionType = "CONTRACT_TYPE_UNSPECIFIED"

	// SubscriptionTypeFREETRIAL captures enum value "FREE_TRIAL"
	SubscriptionTypeFREETRIAL SubscriptionType = "FREE_TRIAL"

	// SubscriptionTypeSUBSCRIPTIONPURCHASEPROGRAM captures enum value "SUBSCRIPTION_PURCHASE_PROGRAM"
	SubscriptionTypeSUBSCRIPTIONPURCHASEPROGRAM SubscriptionType = "SUBSCRIPTION_PURCHASE_PROGRAM"

	// SubscriptionTypePURCHASEORDER captures enum value "PURCHASE_ORDER"
	SubscriptionTypePURCHASEORDER SubscriptionType = "PURCHASE_ORDER"

	// SubscriptionTypeDESIGNPARTNERPROGRAM captures enum value "DESIGN_PARTNER_PROGRAM"
	SubscriptionTypeDESIGNPARTNERPROGRAM SubscriptionType = "DESIGN_PARTNER_PROGRAM"

	// SubscriptionTypeTKGTOTANZUSTANDARD captures enum value "TKG_TO_TANZU_STANDARD"
	SubscriptionTypeTKGTOTANZUSTANDARD SubscriptionType = "TKG_TO_TANZU_STANDARD"

	// SubscriptionTypeTANZUSTANDARDSPP captures enum value "TANZU_STANDARD_SPP"
	SubscriptionTypeTANZUSTANDARDSPP SubscriptionType = "TANZU_STANDARD_SPP"

	// SubscriptionTypeONDEMAND captures enum value "ON_DEMAND"
	SubscriptionTypeONDEMAND SubscriptionType = "ON_DEMAND"

	// SubscriptionTypeSTARTER captures enum value "STARTER"
	SubscriptionTypeSTARTER SubscriptionType = "STARTER"
)

// for schema
var subscriptionTypeEnum []interface{}

func init() {
	var res []SubscriptionType
	if err := json.Unmarshal([]byte(`["CONTRACT_TYPE_UNSPECIFIED","FREE_TRIAL","SUBSCRIPTION_PURCHASE_PROGRAM","PURCHASE_ORDER","DESIGN_PARTNER_PROGRAM","TKG_TO_TANZU_STANDARD","TANZU_STANDARD_SPP","ON_DEMAND","STARTER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscriptionTypeEnum = append(subscriptionTypeEnum, v)
	}
}

func (m SubscriptionType) validateSubscriptionTypeEnum(path, location string, value SubscriptionType) error {
	if err := validate.EnumCase(path, location, value, subscriptionTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this subscription type
func (m SubscriptionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSubscriptionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this subscription type based on context it is used
func (m SubscriptionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
