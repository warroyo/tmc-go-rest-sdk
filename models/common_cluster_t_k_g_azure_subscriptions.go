// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CommonClusterTKGAzureSubscriptions TKG Azure provider subscription options.
//
// swagger:model common.cluster.TKGAzureSubscriptions
type CommonClusterTKGAzureSubscriptions struct {

	// Name of Azure subscription.
	Name string `json:"name,omitempty"`

	// List of regional options for the Azure cloud provider in the subscription.
	RegionalOptions []*CommonClusterTKGAzureRegionalOptions `json:"regionalOptions"`

	// List of TKG releases that can be used in the subscription.
	Releases []*CommonClusterTKGAzureRelease `json:"releases"`

	// ID of Azure subscription.
	SubscriptionID string `json:"subscriptionId,omitempty"`
}

// Validate validates this common cluster t k g azure subscriptions
func (m *CommonClusterTKGAzureSubscriptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRegionalOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReleases(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonClusterTKGAzureSubscriptions) validateRegionalOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.RegionalOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.RegionalOptions); i++ {
		if swag.IsZero(m.RegionalOptions[i]) { // not required
			continue
		}

		if m.RegionalOptions[i] != nil {
			if err := m.RegionalOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regionalOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("regionalOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonClusterTKGAzureSubscriptions) validateReleases(formats strfmt.Registry) error {
	if swag.IsZero(m.Releases) { // not required
		return nil
	}

	for i := 0; i < len(m.Releases); i++ {
		if swag.IsZero(m.Releases[i]) { // not required
			continue
		}

		if m.Releases[i] != nil {
			if err := m.Releases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("releases" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("releases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this common cluster t k g azure subscriptions based on the context it is used
func (m *CommonClusterTKGAzureSubscriptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRegionalOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReleases(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonClusterTKGAzureSubscriptions) contextValidateRegionalOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RegionalOptions); i++ {

		if m.RegionalOptions[i] != nil {
			if err := m.RegionalOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regionalOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("regionalOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonClusterTKGAzureSubscriptions) contextValidateReleases(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Releases); i++ {

		if m.Releases[i] != nil {
			if err := m.Releases[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("releases" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("releases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonClusterTKGAzureSubscriptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonClusterTKGAzureSubscriptions) UnmarshalBinary(b []byte) error {
	var res CommonClusterTKGAzureSubscriptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
