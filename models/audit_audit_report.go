// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuditAuditReport Encapsulates the data for a audit run.
//
// swagger:model audit.AuditReport
type AuditAuditReport struct {

	// Download URL for the final file with complete audit logs.
	DownloadURL string `json:"downloadUrl,omitempty"`

	// Date and time when audit file expires.
	// Format: date-time
	ExpiryDatetime strfmt.DateTime `json:"expiryDatetime,omitempty"`

	// Internal ID of the audit run.
	ReportID string `json:"reportId,omitempty"`

	// Date and time of the audit run.
	// Format: date-time
	RunDatetime strfmt.DateTime `json:"runDatetime,omitempty"`
}

// Validate validates this audit audit report
func (m *AuditAuditReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiryDatetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunDatetime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditAuditReport) validateExpiryDatetime(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpiryDatetime) { // not required
		return nil
	}

	if err := validate.FormatOf("expiryDatetime", "body", "date-time", m.ExpiryDatetime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AuditAuditReport) validateRunDatetime(formats strfmt.Registry) error {
	if swag.IsZero(m.RunDatetime) { // not required
		return nil
	}

	if err := validate.FormatOf("runDatetime", "body", "date-time", m.RunDatetime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this audit audit report based on context it is used
func (m *AuditAuditReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AuditAuditReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditAuditReport) UnmarshalBinary(b []byte) error {
	var res AuditAuditReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
