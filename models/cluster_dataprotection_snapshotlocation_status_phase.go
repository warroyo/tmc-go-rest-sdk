// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterDataprotectionSnapshotlocationStatusPhase The lifecycle phase of a snapshot location.
//
//   - PHASE_UNSPECIFIED: Phase_unspecified is the default phase.
//   - PENDING: Pending phase is set when the snapshot location object is being processed by the service (TMC).
//   - CREATING: Creating phase is set when snapshot location is being created on the cluster.
//   - AVAILABLE: The location is available to read and write from.
//   - UNAVAILABLE: The location is unavailable for read and write from.
//   - PENDING_DELETE: Pending delete is set when the snapshot location is being deleted by the service.
//   - DELETING: The phase when the snapshot location is being deleted by extension.
//
// swagger:model cluster.dataprotection.snapshotlocation.Status.Phase
type ClusterDataprotectionSnapshotlocationStatusPhase string

func NewClusterDataprotectionSnapshotlocationStatusPhase(value ClusterDataprotectionSnapshotlocationStatusPhase) *ClusterDataprotectionSnapshotlocationStatusPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClusterDataprotectionSnapshotlocationStatusPhase.
func (m ClusterDataprotectionSnapshotlocationStatusPhase) Pointer() *ClusterDataprotectionSnapshotlocationStatusPhase {
	return &m
}

const (

	// ClusterDataprotectionSnapshotlocationStatusPhasePHASEUNSPECIFIED captures enum value "PHASE_UNSPECIFIED"
	ClusterDataprotectionSnapshotlocationStatusPhasePHASEUNSPECIFIED ClusterDataprotectionSnapshotlocationStatusPhase = "PHASE_UNSPECIFIED"

	// ClusterDataprotectionSnapshotlocationStatusPhasePENDING captures enum value "PENDING"
	ClusterDataprotectionSnapshotlocationStatusPhasePENDING ClusterDataprotectionSnapshotlocationStatusPhase = "PENDING"

	// ClusterDataprotectionSnapshotlocationStatusPhaseCREATING captures enum value "CREATING"
	ClusterDataprotectionSnapshotlocationStatusPhaseCREATING ClusterDataprotectionSnapshotlocationStatusPhase = "CREATING"

	// ClusterDataprotectionSnapshotlocationStatusPhaseAVAILABLE captures enum value "AVAILABLE"
	ClusterDataprotectionSnapshotlocationStatusPhaseAVAILABLE ClusterDataprotectionSnapshotlocationStatusPhase = "AVAILABLE"

	// ClusterDataprotectionSnapshotlocationStatusPhaseUNAVAILABLE captures enum value "UNAVAILABLE"
	ClusterDataprotectionSnapshotlocationStatusPhaseUNAVAILABLE ClusterDataprotectionSnapshotlocationStatusPhase = "UNAVAILABLE"

	// ClusterDataprotectionSnapshotlocationStatusPhasePENDINGDELETE captures enum value "PENDING_DELETE"
	ClusterDataprotectionSnapshotlocationStatusPhasePENDINGDELETE ClusterDataprotectionSnapshotlocationStatusPhase = "PENDING_DELETE"

	// ClusterDataprotectionSnapshotlocationStatusPhaseDELETING captures enum value "DELETING"
	ClusterDataprotectionSnapshotlocationStatusPhaseDELETING ClusterDataprotectionSnapshotlocationStatusPhase = "DELETING"
)

// for schema
var clusterDataprotectionSnapshotlocationStatusPhaseEnum []interface{}

func init() {
	var res []ClusterDataprotectionSnapshotlocationStatusPhase
	if err := json.Unmarshal([]byte(`["PHASE_UNSPECIFIED","PENDING","CREATING","AVAILABLE","UNAVAILABLE","PENDING_DELETE","DELETING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterDataprotectionSnapshotlocationStatusPhaseEnum = append(clusterDataprotectionSnapshotlocationStatusPhaseEnum, v)
	}
}

func (m ClusterDataprotectionSnapshotlocationStatusPhase) validateClusterDataprotectionSnapshotlocationStatusPhaseEnum(path, location string, value ClusterDataprotectionSnapshotlocationStatusPhase) error {
	if err := validate.EnumCase(path, location, value, clusterDataprotectionSnapshotlocationStatusPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster dataprotection snapshotlocation status phase
func (m ClusterDataprotectionSnapshotlocationStatusPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterDataprotectionSnapshotlocationStatusPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cluster dataprotection snapshotlocation status phase based on context it is used
func (m ClusterDataprotectionSnapshotlocationStatusPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
