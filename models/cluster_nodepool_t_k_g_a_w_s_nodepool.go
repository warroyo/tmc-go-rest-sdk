// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterNodepoolTKGAWSNodepool TKGAWSNodepool is the nodepool spec for TKG aws cluster.
//
// swagger:model cluster.nodepool.TKGAWSNodepool
type ClusterNodepoolTKGAWSNodepool struct {

	// Availability zone for the nodepool. Should be one of the availability zones chosen for the cluster.
	// Use this field only if you are creating a nodepool for cluster in TMC hosted AWS solution. To create a nodepool for TKG
	// workload cluster please use TKGAWSNodePlacement
	AvailabilityZone string `json:"availabilityZone,omitempty"`

	// Nodepool instance type.
	// The potential values could be found using cluster:options api.
	InstanceType string `json:"instanceType,omitempty"`

	// List of AZs to place the AWS nodes on. Please use this field to provision a nodepool for workload cluster on an attached TKG AWS management cluster.
	// Please specify 1 AZ for a dev cluster and up to 3 AZs for production cluster.
	NodePlacement []*ClusterNodepoolTKGAWSNodePlacement `json:"nodePlacement"`

	// The nodes private CIDR block if we are creating a new VPC.
	// This is no longer used - Please dont use this deprecated field.
	PrivateCidr string `json:"privateCidr,omitempty"`

	// The nodes public CIDR block if we are creating a new VPC.
	// This is no longer used - Please dont use this deprecated field.
	PublicCidr string `json:"publicCidr,omitempty"`

	// Subnet ID of the private subnet in which you want the nodes to be created in. If specified, availability zone is
	// ignored.
	SubnetID string `json:"subnetId,omitempty"`

	// Kubernetes version of the node pool.
	Version string `json:"version,omitempty"`
}

// Validate validates this cluster nodepool t k g a w s nodepool
func (m *ClusterNodepoolTKGAWSNodepool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodePlacement(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNodepoolTKGAWSNodepool) validateNodePlacement(formats strfmt.Registry) error {
	if swag.IsZero(m.NodePlacement) { // not required
		return nil
	}

	for i := 0; i < len(m.NodePlacement); i++ {
		if swag.IsZero(m.NodePlacement[i]) { // not required
			continue
		}

		if m.NodePlacement[i] != nil {
			if err := m.NodePlacement[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodePlacement" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodePlacement" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cluster nodepool t k g a w s nodepool based on the context it is used
func (m *ClusterNodepoolTKGAWSNodepool) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNodePlacement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNodepoolTKGAWSNodepool) contextValidateNodePlacement(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodePlacement); i++ {

		if m.NodePlacement[i] != nil {
			if err := m.NodePlacement[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodePlacement" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodePlacement" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterNodepoolTKGAWSNodepool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterNodepoolTKGAWSNodepool) UnmarshalBinary(b []byte) error {
	var res ClusterNodepoolTKGAWSNodepool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
