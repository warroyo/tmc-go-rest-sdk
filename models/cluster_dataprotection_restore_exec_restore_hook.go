// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterDataprotectionRestoreExecRestoreHook ExecRestoreHook is a hook that uses pod exec API to execute a command inside a container in a pod.
//
// swagger:model cluster.dataprotection.restore.ExecRestoreHook
type ClusterDataprotectionRestoreExecRestoreHook struct {

	// Command is the command and arguments to execute.
	Command []string `json:"command"`

	// Container is the container in the pod where the command should be executed. If not specified,
	// the pod's first container is used.
	Container string `json:"container,omitempty"`

	// ExecTimeout defines the maximum amount of time Velero should wait for the hook to complete before
	// considering the execution a failure.
	ExecTimeout string `json:"execTimeout,omitempty"`

	// OnError specifies how Velero should behave if it encounters an error executing this hook.
	OnError *ClusterDataprotectionBackupHookErrorMode `json:"onError,omitempty"`

	// WaitTimeout defines the maximum amount of time Velero should wait for the container to be Ready
	// before attempting to run the command.
	WaitTimeout string `json:"waitTimeout,omitempty"`
}

// Validate validates this cluster dataprotection restore exec restore hook
func (m *ClusterDataprotectionRestoreExecRestoreHook) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOnError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDataprotectionRestoreExecRestoreHook) validateOnError(formats strfmt.Registry) error {
	if swag.IsZero(m.OnError) { // not required
		return nil
	}

	if m.OnError != nil {
		if err := m.OnError.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("onError")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster dataprotection restore exec restore hook based on the context it is used
func (m *ClusterDataprotectionRestoreExecRestoreHook) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOnError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterDataprotectionRestoreExecRestoreHook) contextValidateOnError(ctx context.Context, formats strfmt.Registry) error {

	if m.OnError != nil {
		if err := m.OnError.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onError")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("onError")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterDataprotectionRestoreExecRestoreHook) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterDataprotectionRestoreExecRestoreHook) UnmarshalBinary(b []byte) error {
	var res ClusterDataprotectionRestoreExecRestoreHook
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
