// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AntreaIoAntreaPkgApisCrdV1alpha1Packet Packet includes header info.
//
// swagger:model antrea_io.antrea.pkg.apis.crd.v1alpha1.Packet
type AntreaIoAntreaPkgApisCrdV1alpha1Packet struct {

	// dst IP
	DstIP string `json:"dstIP,omitempty"`

	// TODO: change type IPHeader to *IPHeader and correct all internal references
	IPHeader *AntreaIoAntreaPkgApisCrdV1alpha1IPHeader `json:"ipHeader,omitempty"`

	// ipv6 header
	IPV6Header *AntreaIoAntreaPkgApisCrdV1alpha1IPV6Header `json:"ipv6Header,omitempty"`

	// Length is the IP packet length (includes the IPv4 or IPv6 header length).
	Length int64 `json:"length,omitempty"`

	// src IP
	SrcIP string `json:"srcIP,omitempty"`

	// transport header
	TransportHeader *AntreaIoAntreaPkgApisCrdV1alpha1TransportHeader `json:"transportHeader,omitempty"`
}

// Validate validates this antrea io antrea pkg apis crd v1alpha1 packet
func (m *AntreaIoAntreaPkgApisCrdV1alpha1Packet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPHeader(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV6Header(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransportHeader(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1alpha1Packet) validateIPHeader(formats strfmt.Registry) error {
	if swag.IsZero(m.IPHeader) { // not required
		return nil
	}

	if m.IPHeader != nil {
		if err := m.IPHeader.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipHeader")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipHeader")
			}
			return err
		}
	}

	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1alpha1Packet) validateIPV6Header(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV6Header) { // not required
		return nil
	}

	if m.IPV6Header != nil {
		if err := m.IPV6Header.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6Header")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipv6Header")
			}
			return err
		}
	}

	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1alpha1Packet) validateTransportHeader(formats strfmt.Registry) error {
	if swag.IsZero(m.TransportHeader) { // not required
		return nil
	}

	if m.TransportHeader != nil {
		if err := m.TransportHeader.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transportHeader")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transportHeader")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this antrea io antrea pkg apis crd v1alpha1 packet based on the context it is used
func (m *AntreaIoAntreaPkgApisCrdV1alpha1Packet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIPHeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPV6Header(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransportHeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1alpha1Packet) contextValidateIPHeader(ctx context.Context, formats strfmt.Registry) error {

	if m.IPHeader != nil {
		if err := m.IPHeader.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipHeader")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipHeader")
			}
			return err
		}
	}

	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1alpha1Packet) contextValidateIPV6Header(ctx context.Context, formats strfmt.Registry) error {

	if m.IPV6Header != nil {
		if err := m.IPV6Header.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv6Header")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipv6Header")
			}
			return err
		}
	}

	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1alpha1Packet) contextValidateTransportHeader(ctx context.Context, formats strfmt.Registry) error {

	if m.TransportHeader != nil {
		if err := m.TransportHeader.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transportHeader")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transportHeader")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AntreaIoAntreaPkgApisCrdV1alpha1Packet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AntreaIoAntreaPkgApisCrdV1alpha1Packet) UnmarshalBinary(b []byte) error {
	var res AntreaIoAntreaPkgApisCrdV1alpha1Packet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
