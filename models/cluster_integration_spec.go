// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterIntegrationSpec The integration configuration spec.
//
// swagger:model cluster.integration.Spec
type ClusterIntegrationSpec struct {

	// Configurations. The expected input schema can be found in v1alpha1/integration API.
	Configurations map[string]interface{} `json:"configurations,omitempty"`

	// Credential name is the name of the Organization's Account Credential to be used instead of secrets to add an integration on this cluster.
	CredentialName string `json:"credentialName,omitempty"`

	// Secrets are for sensitive configurations. The values are write-only and will be masked when read.
	Secrets map[string]string `json:"secrets,omitempty"`

	// Version of the integration which is input for upgrade or rollback operation.
	Version string `json:"version,omitempty"`
}

// Validate validates this cluster integration spec
func (m *ClusterIntegrationSpec) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this cluster integration spec based on context it is used
func (m *ClusterIntegrationSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterIntegrationSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterIntegrationSpec) UnmarshalBinary(b []byte) error {
	var res ClusterIntegrationSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
