// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SettingEffectiveSpec Spec for the Effective Setting.
//
// swagger:model setting.effective.Spec
type SettingEffectiveSpec struct {

	// Boolean flag that specifies whether the setting was inherited from a parent.
	// This will be true when target and source are the different.
	Inherited bool `json:"inherited,omitempty"`

	// The source configuration spec.
	SettingSpec *CommonSettingSpec `json:"settingSpec,omitempty"`

	// Name of the setting type.
	SettingType string `json:"settingType,omitempty"`

	// The reference to the source setting (where it originated).
	Source *VmwareTanzuCoreV1alpha1ObjectReference `json:"source,omitempty"`

	// The reference to the target resource on which the setting is effectively applied.
	Target *VmwareTanzuCoreV1alpha1ObjectReference `json:"target,omitempty"`
}

// Validate validates this setting effective spec
func (m *SettingEffectiveSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSettingSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SettingEffectiveSpec) validateSettingSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.SettingSpec) { // not required
		return nil
	}

	if m.SettingSpec != nil {
		if err := m.SettingSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settingSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settingSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SettingEffectiveSpec) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *SettingEffectiveSpec) validateTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.Target) { // not required
		return nil
	}

	if m.Target != nil {
		if err := m.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this setting effective spec based on the context it is used
func (m *SettingEffectiveSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSettingSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SettingEffectiveSpec) contextValidateSettingSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.SettingSpec != nil {
		if err := m.SettingSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settingSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settingSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SettingEffectiveSpec) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {
		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *SettingEffectiveSpec) contextValidateTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.Target != nil {
		if err := m.Target.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SettingEffectiveSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettingEffectiveSpec) UnmarshalBinary(b []byte) error {
	var res SettingEffectiveSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
