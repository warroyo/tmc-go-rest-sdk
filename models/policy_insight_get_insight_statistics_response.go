// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PolicyInsightGetInsightStatisticsResponse Response for get policy insight statistics.
// It provides the summary of the statistics for policy insights in the org.
// Example:
// Violations = 6  * No of policy insights of type violation
// Sync Issues = 3 * No of policy insights of type sync issue
// Security = 4    * No of policy insights of category security
// Access = 5      * No of policy insights of category access
//
// swagger:model policy.insight.GetInsightStatisticsResponse
type PolicyInsightGetInsightStatisticsResponse struct {

	// List of policy insight statistics based on category.
	CategoryStats []*PolicyInsightCategoryStatistics `json:"categoryStats"`

	// List of policy insight statistics based on type.
	TypeStats []*PolicyInsightTypeStatistics `json:"typeStats"`
}

// Validate validates this policy insight get insight statistics response
func (m *PolicyInsightGetInsightStatisticsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategoryStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyInsightGetInsightStatisticsResponse) validateCategoryStats(formats strfmt.Registry) error {
	if swag.IsZero(m.CategoryStats) { // not required
		return nil
	}

	for i := 0; i < len(m.CategoryStats); i++ {
		if swag.IsZero(m.CategoryStats[i]) { // not required
			continue
		}

		if m.CategoryStats[i] != nil {
			if err := m.CategoryStats[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("categoryStats" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("categoryStats" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyInsightGetInsightStatisticsResponse) validateTypeStats(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeStats) { // not required
		return nil
	}

	for i := 0; i < len(m.TypeStats); i++ {
		if swag.IsZero(m.TypeStats[i]) { // not required
			continue
		}

		if m.TypeStats[i] != nil {
			if err := m.TypeStats[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("typeStats" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("typeStats" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this policy insight get insight statistics response based on the context it is used
func (m *PolicyInsightGetInsightStatisticsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCategoryStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyInsightGetInsightStatisticsResponse) contextValidateCategoryStats(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CategoryStats); i++ {

		if m.CategoryStats[i] != nil {
			if err := m.CategoryStats[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("categoryStats" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("categoryStats" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyInsightGetInsightStatisticsResponse) contextValidateTypeStats(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeStats); i++ {

		if m.TypeStats[i] != nil {
			if err := m.TypeStats[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("typeStats" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("typeStats" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyInsightGetInsightStatisticsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyInsightGetInsightStatisticsResponse) UnmarshalBinary(b []byte) error {
	var res PolicyInsightGetInsightStatisticsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
