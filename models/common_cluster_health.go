// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CommonClusterHealth Health describes the health of a resource.
//
//   - HEALTH_UNSPECIFIED: Unspecified health.
//   - HEALTHY: Resource is healthy.
//   - WARNING: Resource is in warning state.
//   - UNHEALTHY: Resource is unhealthy.
//   - DISCONNECTED: Resource is disconnected.
//   - OVER_LIMIT: Resource is over limits.
//
// swagger:model common.cluster.Health
type CommonClusterHealth string

func NewCommonClusterHealth(value CommonClusterHealth) *CommonClusterHealth {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CommonClusterHealth.
func (m CommonClusterHealth) Pointer() *CommonClusterHealth {
	return &m
}

const (

	// CommonClusterHealthHEALTHUNSPECIFIED captures enum value "HEALTH_UNSPECIFIED"
	CommonClusterHealthHEALTHUNSPECIFIED CommonClusterHealth = "HEALTH_UNSPECIFIED"

	// CommonClusterHealthHEALTHY captures enum value "HEALTHY"
	CommonClusterHealthHEALTHY CommonClusterHealth = "HEALTHY"

	// CommonClusterHealthWARNING captures enum value "WARNING"
	CommonClusterHealthWARNING CommonClusterHealth = "WARNING"

	// CommonClusterHealthUNHEALTHY captures enum value "UNHEALTHY"
	CommonClusterHealthUNHEALTHY CommonClusterHealth = "UNHEALTHY"

	// CommonClusterHealthDISCONNECTED captures enum value "DISCONNECTED"
	CommonClusterHealthDISCONNECTED CommonClusterHealth = "DISCONNECTED"

	// CommonClusterHealthOVERLIMIT captures enum value "OVER_LIMIT"
	CommonClusterHealthOVERLIMIT CommonClusterHealth = "OVER_LIMIT"
)

// for schema
var commonClusterHealthEnum []interface{}

func init() {
	var res []CommonClusterHealth
	if err := json.Unmarshal([]byte(`["HEALTH_UNSPECIFIED","HEALTHY","WARNING","UNHEALTHY","DISCONNECTED","OVER_LIMIT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonClusterHealthEnum = append(commonClusterHealthEnum, v)
	}
}

func (m CommonClusterHealth) validateCommonClusterHealthEnum(path, location string, value CommonClusterHealth) error {
	if err := validate.EnumCase(path, location, value, commonClusterHealthEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this common cluster health
func (m CommonClusterHealth) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCommonClusterHealthEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this common cluster health based on context it is used
func (m CommonClusterHealth) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
