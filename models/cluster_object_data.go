// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterObjectData The Object data.
//
// swagger:model cluster.object.Data
type ClusterObjectData struct {

	// Aggregated resources for object.
	AggregatedResources *ClusterObjectAggregatedResources `json:"aggregatedResources,omitempty"`

	// GVR of the resource.
	Gvr *K8sIoApimachineryPkgApisMetaV1GroupVersionResource `json:"gvr,omitempty"`

	// Kind of the resource.
	Kind *ClusterObjectDataKind `json:"kind,omitempty"`

	// Name of the namespace this object belongs to.
	NamespaceName string `json:"namespaceName,omitempty"`

	// CronJob object.
	ObjectCronJob *ClusterObjectObjectCronJob `json:"objectCronJob,omitempty"`

	// CustomResource object.
	ObjectCustomResource *ClusterObjectObjectCustomResource `json:"objectCustomResource,omitempty"`

	// DaemonSet object.
	ObjectDaemonSet *ClusterObjectObjectDaemonSet `json:"objectDaemonSet,omitempty"`

	// Deployment object.
	ObjectDeployment *ClusterObjectObjectDeployment `json:"objectDeployment,omitempty"`

	// Job object.
	ObjectJob *ClusterObjectObjectJob `json:"objectJob,omitempty"`

	// Namespace object.
	ObjectNamespace *ClusterObjectObjectNamespace `json:"objectNamespace,omitempty"`

	// Node object.
	ObjectNode *ClusterObjectObjectNode `json:"objectNode,omitempty"`

	// Pod object.
	ObjectPod *ClusterObjectObjectPod `json:"objectPod,omitempty"`

	// ReplicaSet object.
	ObjectReplicaSet *ClusterObjectObjectReplicaSet `json:"objectReplicaSet,omitempty"`

	// ReplicationController object.
	ObjectReplicationController *ClusterObjectObjectReplicationController `json:"objectReplicationController,omitempty"`

	// Service object.
	ObjectService *ClusterObjectObjectService `json:"objectService,omitempty"`

	// StatefulSet object.
	ObjectStatefulSet *ClusterObjectObjectStatefulSet `json:"objectStatefulSet,omitempty"`

	// Name of the workspace this object belongs to.
	WorkspaceName string `json:"workspaceName,omitempty"`
}

// Validate validates this cluster object data
func (m *ClusterObjectData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregatedResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGvr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectCronJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectCustomResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectDaemonSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectDeployment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectPod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectReplicaSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectReplicationController(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectStatefulSet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterObjectData) validateAggregatedResources(formats strfmt.Registry) error {
	if swag.IsZero(m.AggregatedResources) { // not required
		return nil
	}

	if m.AggregatedResources != nil {
		if err := m.AggregatedResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aggregatedResources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aggregatedResources")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) validateGvr(formats strfmt.Registry) error {
	if swag.IsZero(m.Gvr) { // not required
		return nil
	}

	if m.Gvr != nil {
		if err := m.Gvr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gvr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gvr")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) validateKind(formats strfmt.Registry) error {
	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	if m.Kind != nil {
		if err := m.Kind.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kind")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kind")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) validateObjectCronJob(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectCronJob) { // not required
		return nil
	}

	if m.ObjectCronJob != nil {
		if err := m.ObjectCronJob.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectCronJob")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectCronJob")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) validateObjectCustomResource(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectCustomResource) { // not required
		return nil
	}

	if m.ObjectCustomResource != nil {
		if err := m.ObjectCustomResource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectCustomResource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectCustomResource")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) validateObjectDaemonSet(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectDaemonSet) { // not required
		return nil
	}

	if m.ObjectDaemonSet != nil {
		if err := m.ObjectDaemonSet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectDaemonSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectDaemonSet")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) validateObjectDeployment(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectDeployment) { // not required
		return nil
	}

	if m.ObjectDeployment != nil {
		if err := m.ObjectDeployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectDeployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectDeployment")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) validateObjectJob(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectJob) { // not required
		return nil
	}

	if m.ObjectJob != nil {
		if err := m.ObjectJob.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectJob")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectJob")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) validateObjectNamespace(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectNamespace) { // not required
		return nil
	}

	if m.ObjectNamespace != nil {
		if err := m.ObjectNamespace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectNamespace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectNamespace")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) validateObjectNode(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectNode) { // not required
		return nil
	}

	if m.ObjectNode != nil {
		if err := m.ObjectNode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectNode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectNode")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) validateObjectPod(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectPod) { // not required
		return nil
	}

	if m.ObjectPod != nil {
		if err := m.ObjectPod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectPod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectPod")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) validateObjectReplicaSet(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectReplicaSet) { // not required
		return nil
	}

	if m.ObjectReplicaSet != nil {
		if err := m.ObjectReplicaSet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectReplicaSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectReplicaSet")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) validateObjectReplicationController(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectReplicationController) { // not required
		return nil
	}

	if m.ObjectReplicationController != nil {
		if err := m.ObjectReplicationController.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectReplicationController")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectReplicationController")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) validateObjectService(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectService) { // not required
		return nil
	}

	if m.ObjectService != nil {
		if err := m.ObjectService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectService")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectService")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) validateObjectStatefulSet(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectStatefulSet) { // not required
		return nil
	}

	if m.ObjectStatefulSet != nil {
		if err := m.ObjectStatefulSet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectStatefulSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectStatefulSet")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster object data based on the context it is used
func (m *ClusterObjectData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAggregatedResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGvr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKind(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectCronJob(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectCustomResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectDaemonSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectDeployment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectJob(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectNamespace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectPod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectReplicaSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectReplicationController(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectStatefulSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterObjectData) contextValidateAggregatedResources(ctx context.Context, formats strfmt.Registry) error {

	if m.AggregatedResources != nil {
		if err := m.AggregatedResources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aggregatedResources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aggregatedResources")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) contextValidateGvr(ctx context.Context, formats strfmt.Registry) error {

	if m.Gvr != nil {
		if err := m.Gvr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gvr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gvr")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) contextValidateKind(ctx context.Context, formats strfmt.Registry) error {

	if m.Kind != nil {
		if err := m.Kind.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kind")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kind")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) contextValidateObjectCronJob(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectCronJob != nil {
		if err := m.ObjectCronJob.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectCronJob")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectCronJob")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) contextValidateObjectCustomResource(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectCustomResource != nil {
		if err := m.ObjectCustomResource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectCustomResource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectCustomResource")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) contextValidateObjectDaemonSet(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectDaemonSet != nil {
		if err := m.ObjectDaemonSet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectDaemonSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectDaemonSet")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) contextValidateObjectDeployment(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectDeployment != nil {
		if err := m.ObjectDeployment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectDeployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectDeployment")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) contextValidateObjectJob(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectJob != nil {
		if err := m.ObjectJob.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectJob")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectJob")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) contextValidateObjectNamespace(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectNamespace != nil {
		if err := m.ObjectNamespace.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectNamespace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectNamespace")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) contextValidateObjectNode(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectNode != nil {
		if err := m.ObjectNode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectNode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectNode")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) contextValidateObjectPod(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectPod != nil {
		if err := m.ObjectPod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectPod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectPod")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) contextValidateObjectReplicaSet(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectReplicaSet != nil {
		if err := m.ObjectReplicaSet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectReplicaSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectReplicaSet")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) contextValidateObjectReplicationController(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectReplicationController != nil {
		if err := m.ObjectReplicationController.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectReplicationController")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectReplicationController")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) contextValidateObjectService(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectService != nil {
		if err := m.ObjectService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectService")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectService")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterObjectData) contextValidateObjectStatefulSet(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectStatefulSet != nil {
		if err := m.ObjectStatefulSet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectStatefulSet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectStatefulSet")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterObjectData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterObjectData) UnmarshalBinary(b []byte) error {
	var res ClusterObjectData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
