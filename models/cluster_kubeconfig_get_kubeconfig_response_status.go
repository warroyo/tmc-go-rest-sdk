// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterKubeconfigGetKubeconfigResponseStatus Kubeconfig status types.
//
//   - STATUS_UNSPECIFIED: Default value for the enum.
//   - CREATING: CREATING indicates either the cluster or TMC resources on the cluster are not ready yet.
//   - PENDING: PENDING indicates kubeconfig data is not yet available from the cluster.
//   - READY: READY indicates kubeconfig is ready to use.
//   - UNAVAILABLE: UNAVAILABLE indicates kubeconfig cannot be provided for this cluster.
//
// swagger:model cluster.kubeconfig.GetKubeconfigResponse.Status
type ClusterKubeconfigGetKubeconfigResponseStatus string

func NewClusterKubeconfigGetKubeconfigResponseStatus(value ClusterKubeconfigGetKubeconfigResponseStatus) *ClusterKubeconfigGetKubeconfigResponseStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClusterKubeconfigGetKubeconfigResponseStatus.
func (m ClusterKubeconfigGetKubeconfigResponseStatus) Pointer() *ClusterKubeconfigGetKubeconfigResponseStatus {
	return &m
}

const (

	// ClusterKubeconfigGetKubeconfigResponseStatusSTATUSUNSPECIFIED captures enum value "STATUS_UNSPECIFIED"
	ClusterKubeconfigGetKubeconfigResponseStatusSTATUSUNSPECIFIED ClusterKubeconfigGetKubeconfigResponseStatus = "STATUS_UNSPECIFIED"

	// ClusterKubeconfigGetKubeconfigResponseStatusCREATING captures enum value "CREATING"
	ClusterKubeconfigGetKubeconfigResponseStatusCREATING ClusterKubeconfigGetKubeconfigResponseStatus = "CREATING"

	// ClusterKubeconfigGetKubeconfigResponseStatusPENDING captures enum value "PENDING"
	ClusterKubeconfigGetKubeconfigResponseStatusPENDING ClusterKubeconfigGetKubeconfigResponseStatus = "PENDING"

	// ClusterKubeconfigGetKubeconfigResponseStatusREADY captures enum value "READY"
	ClusterKubeconfigGetKubeconfigResponseStatusREADY ClusterKubeconfigGetKubeconfigResponseStatus = "READY"

	// ClusterKubeconfigGetKubeconfigResponseStatusUNAVAILABLE captures enum value "UNAVAILABLE"
	ClusterKubeconfigGetKubeconfigResponseStatusUNAVAILABLE ClusterKubeconfigGetKubeconfigResponseStatus = "UNAVAILABLE"
)

// for schema
var clusterKubeconfigGetKubeconfigResponseStatusEnum []interface{}

func init() {
	var res []ClusterKubeconfigGetKubeconfigResponseStatus
	if err := json.Unmarshal([]byte(`["STATUS_UNSPECIFIED","CREATING","PENDING","READY","UNAVAILABLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterKubeconfigGetKubeconfigResponseStatusEnum = append(clusterKubeconfigGetKubeconfigResponseStatusEnum, v)
	}
}

func (m ClusterKubeconfigGetKubeconfigResponseStatus) validateClusterKubeconfigGetKubeconfigResponseStatusEnum(path, location string, value ClusterKubeconfigGetKubeconfigResponseStatus) error {
	if err := validate.EnumCase(path, location, value, clusterKubeconfigGetKubeconfigResponseStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster kubeconfig get kubeconfig response status
func (m ClusterKubeconfigGetKubeconfigResponseStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterKubeconfigGetKubeconfigResponseStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cluster kubeconfig get kubeconfig response status based on context it is used
func (m ClusterKubeconfigGetKubeconfigResponseStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
