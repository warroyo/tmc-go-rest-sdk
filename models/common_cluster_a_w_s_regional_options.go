// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CommonClusterAWSRegionalOptions AWS cloud provider specific regional options.
//
// swagger:model common.cluster.AWSRegionalOptions
type CommonClusterAWSRegionalOptions struct {

	// Name of the AWS region.
	RegionName string `json:"regionName,omitempty"`

	// List of AWS SSH key name.
	SSHKeyNames []string `json:"sshKeyNames"`

	// List of supported Kubernetes versions.
	VersionList []*CommonClusterVersion `json:"versionList"`

	// List of VPCs.
	VpcOptions []*CommonClusterAWSVPCOptions `json:"vpcOptions"`

	// List of zones and their options within the region (eg. zone format: us-west-2a).
	ZoneOptions []*CommonClusterAWSZoneOptions `json:"zoneOptions"`
}

// Validate validates this common cluster a w s regional options
func (m *CommonClusterAWSRegionalOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersionList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpcOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZoneOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonClusterAWSRegionalOptions) validateVersionList(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionList) { // not required
		return nil
	}

	for i := 0; i < len(m.VersionList); i++ {
		if swag.IsZero(m.VersionList[i]) { // not required
			continue
		}

		if m.VersionList[i] != nil {
			if err := m.VersionList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versionList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("versionList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonClusterAWSRegionalOptions) validateVpcOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.VpcOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.VpcOptions); i++ {
		if swag.IsZero(m.VpcOptions[i]) { // not required
			continue
		}

		if m.VpcOptions[i] != nil {
			if err := m.VpcOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vpcOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vpcOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonClusterAWSRegionalOptions) validateZoneOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.ZoneOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.ZoneOptions); i++ {
		if swag.IsZero(m.ZoneOptions[i]) { // not required
			continue
		}

		if m.ZoneOptions[i] != nil {
			if err := m.ZoneOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("zoneOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("zoneOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this common cluster a w s regional options based on the context it is used
func (m *CommonClusterAWSRegionalOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVersionList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVpcOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZoneOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonClusterAWSRegionalOptions) contextValidateVersionList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VersionList); i++ {

		if m.VersionList[i] != nil {
			if err := m.VersionList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versionList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("versionList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonClusterAWSRegionalOptions) contextValidateVpcOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VpcOptions); i++ {

		if m.VpcOptions[i] != nil {
			if err := m.VpcOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vpcOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vpcOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CommonClusterAWSRegionalOptions) contextValidateZoneOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ZoneOptions); i++ {

		if m.ZoneOptions[i] != nil {
			if err := m.ZoneOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("zoneOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("zoneOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonClusterAWSRegionalOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonClusterAWSRegionalOptions) UnmarshalBinary(b []byte) error {
	var res CommonClusterAWSRegionalOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
