// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CommonClusterResourceAllocation ResourceAllocation is used for CPU and Memory metrics of a cluster.
//
// swagger:model common.cluster.ResourceAllocation
type CommonClusterResourceAllocation struct {

	// Allocatable is the quantity of compute resources that can be allocated by the user excluding reserved resources.
	Allocatable float32 `json:"allocatable,omitempty"`

	// Represents allocated percentage.
	AllocatedPercentage float32 `json:"allocatedPercentage,omitempty"`

	// Capacity is the total quantity of compute resources available including reserved resources.
	Capacity float32 `json:"capacity,omitempty"`

	// Requested is the requested quantity of compute resources.
	Requested float32 `json:"requested,omitempty"`

	// Units is the unit on which resource can be measured e.g. mb, millicores etc.
	Units string `json:"units,omitempty"`
}

// Validate validates this common cluster resource allocation
func (m *CommonClusterResourceAllocation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this common cluster resource allocation based on context it is used
func (m *CommonClusterResourceAllocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CommonClusterResourceAllocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonClusterResourceAllocation) UnmarshalBinary(b []byte) error {
	var res CommonClusterResourceAllocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
