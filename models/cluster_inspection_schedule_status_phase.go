// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterInspectionScheduleStatusPhase Phase describes the phase of the inspection schedule.
//
//   - PHASE_UNSPECIFIED: Unknown - to be used if status of the current inspection schedule is unknown.
//   - RUNNING: Running - to indicate the schedule is currently running.
//   - PENDING: Pending - to indicate that the schedule is waiting to be started.
//   - COMPLETE: Complete - to indicate that the inspection schedule has completed.
//   - ERROR: Error - to indicate that an error had occurred during the schedule.
//   - CANCEL: CANCEL - to indicate that the schedule is canceled.
//
// swagger:model cluster.inspection.schedule.Status.Phase
type ClusterInspectionScheduleStatusPhase string

func NewClusterInspectionScheduleStatusPhase(value ClusterInspectionScheduleStatusPhase) *ClusterInspectionScheduleStatusPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClusterInspectionScheduleStatusPhase.
func (m ClusterInspectionScheduleStatusPhase) Pointer() *ClusterInspectionScheduleStatusPhase {
	return &m
}

const (

	// ClusterInspectionScheduleStatusPhasePHASEUNSPECIFIED captures enum value "PHASE_UNSPECIFIED"
	ClusterInspectionScheduleStatusPhasePHASEUNSPECIFIED ClusterInspectionScheduleStatusPhase = "PHASE_UNSPECIFIED"

	// ClusterInspectionScheduleStatusPhaseRUNNING captures enum value "RUNNING"
	ClusterInspectionScheduleStatusPhaseRUNNING ClusterInspectionScheduleStatusPhase = "RUNNING"

	// ClusterInspectionScheduleStatusPhasePENDING captures enum value "PENDING"
	ClusterInspectionScheduleStatusPhasePENDING ClusterInspectionScheduleStatusPhase = "PENDING"

	// ClusterInspectionScheduleStatusPhaseCOMPLETE captures enum value "COMPLETE"
	ClusterInspectionScheduleStatusPhaseCOMPLETE ClusterInspectionScheduleStatusPhase = "COMPLETE"

	// ClusterInspectionScheduleStatusPhaseERROR captures enum value "ERROR"
	ClusterInspectionScheduleStatusPhaseERROR ClusterInspectionScheduleStatusPhase = "ERROR"

	// ClusterInspectionScheduleStatusPhaseCANCEL captures enum value "CANCEL"
	ClusterInspectionScheduleStatusPhaseCANCEL ClusterInspectionScheduleStatusPhase = "CANCEL"
)

// for schema
var clusterInspectionScheduleStatusPhaseEnum []interface{}

func init() {
	var res []ClusterInspectionScheduleStatusPhase
	if err := json.Unmarshal([]byte(`["PHASE_UNSPECIFIED","RUNNING","PENDING","COMPLETE","ERROR","CANCEL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterInspectionScheduleStatusPhaseEnum = append(clusterInspectionScheduleStatusPhaseEnum, v)
	}
}

func (m ClusterInspectionScheduleStatusPhase) validateClusterInspectionScheduleStatusPhaseEnum(path, location string, value ClusterInspectionScheduleStatusPhase) error {
	if err := validate.EnumCase(path, location, value, clusterInspectionScheduleStatusPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster inspection schedule status phase
func (m ClusterInspectionScheduleStatusPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterInspectionScheduleStatusPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cluster inspection schedule status phase based on context it is used
func (m ClusterInspectionScheduleStatusPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
