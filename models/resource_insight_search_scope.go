// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResourceInsightSearchScope Scope to search by, any fields left empty will be considered all (*).
//
// swagger:model resource.insight.SearchScope
type ResourceInsightSearchScope struct {

	// Filter by cluster name; supports globbing; default (*).
	ClusterName string `json:"clusterName,omitempty"`

	// Filter by type of insight (ERROR / OVERRIDE); supports globbing; default (*).
	InsightType string `json:"insightType,omitempty"`

	// Scope search to the specified name; supports globbing; default (*).
	Name string `json:"name,omitempty"`

	// Filter by the kind of source resource (eg. integration, gitrepository, helm, policy-settings); supports globbing; default (*).
	SourceResourceKind string `json:"sourceResourceKind,omitempty"`

	// Filter by the uid of source resource; supports globbing; default (*).
	SourceResourceUID string `json:"sourceResourceUid,omitempty"`

	// Filter by source scope type (org / cg / c); supports globbing; default (*).
	SourceScopeType string `json:"sourceScopeType,omitempty"`
}

// Validate validates this resource insight search scope
func (m *ResourceInsightSearchScope) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this resource insight search scope based on context it is used
func (m *ResourceInsightSearchScope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResourceInsightSearchScope) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceInsightSearchScope) UnmarshalBinary(b []byte) error {
	var res ResourceInsightSearchScope
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
