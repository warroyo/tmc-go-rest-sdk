// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AntreaIoAntreaPkgApisCrdV1alpha1TraceflowSpec TraceflowSpec describes the spec of the traceflow.
//
// swagger:model antrea_io.antrea.pkg.apis.crd.v1alpha1.TraceflowSpec
type AntreaIoAntreaPkgApisCrdV1alpha1TraceflowSpec struct {

	// destination
	Destination *AntreaIoAntreaPkgApisCrdV1alpha1Destination `json:"destination,omitempty"`

	// DroppedOnly indicates only the dropped packet should be captured in a
	// live-traffic Traceflow.
	DroppedOnly bool `json:"droppedOnly,omitempty"`

	// LiveTraffic indicates the Traceflow is to trace the live traffic
	// rather than an injected packet, when set to true. The first packet of
	// the first connection that matches the packet spec will be traced.
	LiveTraffic bool `json:"liveTraffic,omitempty"`

	// packet
	Packet *AntreaIoAntreaPkgApisCrdV1alpha1Packet `json:"packet,omitempty"`

	// source
	Source *AntreaIoAntreaPkgApisCrdV1alpha1Source `json:"source,omitempty"`

	// Timeout specifies the timeout of the Traceflow in seconds. Defaults
	// to 20 seconds if not set.
	Timeout int64 `json:"timeout,omitempty"`
}

// Validate validates this antrea io antrea pkg apis crd v1alpha1 traceflow spec
func (m *AntreaIoAntreaPkgApisCrdV1alpha1TraceflowSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePacket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1alpha1TraceflowSpec) validateDestination(formats strfmt.Registry) error {
	if swag.IsZero(m.Destination) { // not required
		return nil
	}

	if m.Destination != nil {
		if err := m.Destination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination")
			}
			return err
		}
	}

	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1alpha1TraceflowSpec) validatePacket(formats strfmt.Registry) error {
	if swag.IsZero(m.Packet) { // not required
		return nil
	}

	if m.Packet != nil {
		if err := m.Packet.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packet")
			}
			return err
		}
	}

	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1alpha1TraceflowSpec) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this antrea io antrea pkg apis crd v1alpha1 traceflow spec based on the context it is used
func (m *AntreaIoAntreaPkgApisCrdV1alpha1TraceflowSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePacket(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1alpha1TraceflowSpec) contextValidateDestination(ctx context.Context, formats strfmt.Registry) error {

	if m.Destination != nil {
		if err := m.Destination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination")
			}
			return err
		}
	}

	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1alpha1TraceflowSpec) contextValidatePacket(ctx context.Context, formats strfmt.Registry) error {

	if m.Packet != nil {
		if err := m.Packet.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packet")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packet")
			}
			return err
		}
	}

	return nil
}

func (m *AntreaIoAntreaPkgApisCrdV1alpha1TraceflowSpec) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {
		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AntreaIoAntreaPkgApisCrdV1alpha1TraceflowSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AntreaIoAntreaPkgApisCrdV1alpha1TraceflowSpec) UnmarshalBinary(b []byte) error {
	var res AntreaIoAntreaPkgApisCrdV1alpha1TraceflowSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
