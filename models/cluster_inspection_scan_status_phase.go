// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterInspectionScanStatusPhase Phase describes the phase] of the inspection scan.
//
//   - PHASE_UNSPECIFIED: Unknown - to be used if status of the current inspection scan is unknown.
//   - RUNNING: Running - to indicate the inspection scan is currently running.
//   - PENDING: Pending - to indicate that the inspectionscan  is waiting to be started.
//   - COMPLETE: Complete - to indicate that the sonobuoy open source has completed the inspection scan.
//   - UPLOAD: Upload - to indicate that the inspection scan results are being uploaded to S3.
//   - FINISH: Finish - to indicate that the inspection has completed inspection + uploaded results to S3 successfully.
//   - STOP: Stop - to stop the sonobuoy inspection.
//   - ERROR: Error - to indicate that an error had occurred during the inspection.
//   - QUEUED: Queued - to indicate that the inspection is queued and waiting to be applied.
//   - CANCEL: CANCEL - to indicate that the inspection is canceled.
//
// swagger:model cluster.inspection.scan.Status.Phase
type ClusterInspectionScanStatusPhase string

func NewClusterInspectionScanStatusPhase(value ClusterInspectionScanStatusPhase) *ClusterInspectionScanStatusPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClusterInspectionScanStatusPhase.
func (m ClusterInspectionScanStatusPhase) Pointer() *ClusterInspectionScanStatusPhase {
	return &m
}

const (

	// ClusterInspectionScanStatusPhasePHASEUNSPECIFIED captures enum value "PHASE_UNSPECIFIED"
	ClusterInspectionScanStatusPhasePHASEUNSPECIFIED ClusterInspectionScanStatusPhase = "PHASE_UNSPECIFIED"

	// ClusterInspectionScanStatusPhaseRUNNING captures enum value "RUNNING"
	ClusterInspectionScanStatusPhaseRUNNING ClusterInspectionScanStatusPhase = "RUNNING"

	// ClusterInspectionScanStatusPhasePENDING captures enum value "PENDING"
	ClusterInspectionScanStatusPhasePENDING ClusterInspectionScanStatusPhase = "PENDING"

	// ClusterInspectionScanStatusPhaseCOMPLETE captures enum value "COMPLETE"
	ClusterInspectionScanStatusPhaseCOMPLETE ClusterInspectionScanStatusPhase = "COMPLETE"

	// ClusterInspectionScanStatusPhaseUPLOAD captures enum value "UPLOAD"
	ClusterInspectionScanStatusPhaseUPLOAD ClusterInspectionScanStatusPhase = "UPLOAD"

	// ClusterInspectionScanStatusPhaseFINISH captures enum value "FINISH"
	ClusterInspectionScanStatusPhaseFINISH ClusterInspectionScanStatusPhase = "FINISH"

	// ClusterInspectionScanStatusPhaseSTOP captures enum value "STOP"
	ClusterInspectionScanStatusPhaseSTOP ClusterInspectionScanStatusPhase = "STOP"

	// ClusterInspectionScanStatusPhaseERROR captures enum value "ERROR"
	ClusterInspectionScanStatusPhaseERROR ClusterInspectionScanStatusPhase = "ERROR"

	// ClusterInspectionScanStatusPhaseQUEUED captures enum value "QUEUED"
	ClusterInspectionScanStatusPhaseQUEUED ClusterInspectionScanStatusPhase = "QUEUED"

	// ClusterInspectionScanStatusPhaseCANCEL captures enum value "CANCEL"
	ClusterInspectionScanStatusPhaseCANCEL ClusterInspectionScanStatusPhase = "CANCEL"
)

// for schema
var clusterInspectionScanStatusPhaseEnum []interface{}

func init() {
	var res []ClusterInspectionScanStatusPhase
	if err := json.Unmarshal([]byte(`["PHASE_UNSPECIFIED","RUNNING","PENDING","COMPLETE","UPLOAD","FINISH","STOP","ERROR","QUEUED","CANCEL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterInspectionScanStatusPhaseEnum = append(clusterInspectionScanStatusPhaseEnum, v)
	}
}

func (m ClusterInspectionScanStatusPhase) validateClusterInspectionScanStatusPhaseEnum(path, location string, value ClusterInspectionScanStatusPhase) error {
	if err := validate.EnumCase(path, location, value, clusterInspectionScanStatusPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster inspection scan status phase
func (m ClusterInspectionScanStatusPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterInspectionScanStatusPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cluster inspection scan status phase based on context it is used
func (m ClusterInspectionScanStatusPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
