// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterNamespaceFluxcdHelmReleaseChartRef ChartRef of the helm release.
//
// swagger:model cluster.namespace.fluxcd.helm.release.ChartRef
type ClusterNamespaceFluxcdHelmReleaseChartRef struct {

	// Name/path of the chart in the helm/git repository.
	Chart string `json:"chart,omitempty"`

	// Repository name.
	RepositoryName string `json:"repositoryName,omitempty"`

	// Repository namespace.
	RepositoryNamespace string `json:"repositoryNamespace,omitempty"`

	// Repository type.
	RepositoryType *ClusterNamespaceFluxcdHelmReleaseRepositoryType `json:"repositoryType,omitempty"`

	// Chart version, applicable for helm repository type.
	Version string `json:"version,omitempty"`
}

// Validate validates this cluster namespace fluxcd helm release chart ref
func (m *ClusterNamespaceFluxcdHelmReleaseChartRef) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRepositoryType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNamespaceFluxcdHelmReleaseChartRef) validateRepositoryType(formats strfmt.Registry) error {
	if swag.IsZero(m.RepositoryType) { // not required
		return nil
	}

	if m.RepositoryType != nil {
		if err := m.RepositoryType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repositoryType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repositoryType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster namespace fluxcd helm release chart ref based on the context it is used
func (m *ClusterNamespaceFluxcdHelmReleaseChartRef) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRepositoryType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNamespaceFluxcdHelmReleaseChartRef) contextValidateRepositoryType(ctx context.Context, formats strfmt.Registry) error {

	if m.RepositoryType != nil {
		if err := m.RepositoryType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repositoryType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repositoryType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterNamespaceFluxcdHelmReleaseChartRef) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterNamespaceFluxcdHelmReleaseChartRef) UnmarshalBinary(b []byte) error {
	var res ClusterNamespaceFluxcdHelmReleaseChartRef
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
