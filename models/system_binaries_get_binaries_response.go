// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SystemBinariesGetBinariesResponse Response containing links.
//
// swagger:model system.binaries.GetBinariesResponse
type SystemBinariesGetBinariesResponse struct {

	// The latest version of the CLI.
	LatestVersion string `json:"latestVersion,omitempty"`

	// A map of CLI versions.
	Versions map[string]SystemBinariesVersion `json:"versions,omitempty"`
}

// Validate validates this system binaries get binaries response
func (m *SystemBinariesGetBinariesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemBinariesGetBinariesResponse) validateVersions(formats strfmt.Registry) error {
	if swag.IsZero(m.Versions) { // not required
		return nil
	}

	for k := range m.Versions {

		if err := validate.Required("versions"+"."+k, "body", m.Versions[k]); err != nil {
			return err
		}
		if val, ok := m.Versions[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versions" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("versions" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this system binaries get binaries response based on the context it is used
func (m *SystemBinariesGetBinariesResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemBinariesGetBinariesResponse) contextValidateVersions(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Versions {

		if val, ok := m.Versions[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SystemBinariesGetBinariesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemBinariesGetBinariesResponse) UnmarshalBinary(b []byte) error {
	var res SystemBinariesGetBinariesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
