// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterNodepoolSpec Spec for the cluster nodepool.
//
// swagger:model cluster.nodepool.Spec
type ClusterNodepoolSpec struct {

	// Cloud labels.
	CloudLabels map[string]string `json:"cloudLabels,omitempty"`

	// Node labels.
	NodeLabels map[string]string `json:"nodeLabels,omitempty"`

	// If specified, the node's taints.
	Taints []*ClusterNodepoolTaint `json:"taints"`

	// Nodepool config for tkg aws.
	TkgAws *ClusterNodepoolTKGAWSNodepool `json:"tkgAws,omitempty"`

	// Nodepool config for tkg azure.
	TkgAzure *ClusterNodepoolTKGAzureNodepool `json:"tkgAzure,omitempty"`

	// Nodepool config for tkg service vsphere.
	TkgServiceVsphere *ClusterNodepoolTKGServiceVsphereNodepool `json:"tkgServiceVsphere,omitempty"`

	// Nodepool config for tkg vsphere.
	TkgVsphere *ClusterNodepoolTKGVsphereNodepool `json:"tkgVsphere,omitempty"`

	// Count is the number of nodes.
	WorkerNodeCount string `json:"workerNodeCount,omitempty"`
}

// Validate validates this cluster nodepool spec
func (m *ClusterNodepoolSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTaints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTkgAws(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTkgAzure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTkgServiceVsphere(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTkgVsphere(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNodepoolSpec) validateTaints(formats strfmt.Registry) error {
	if swag.IsZero(m.Taints) { // not required
		return nil
	}

	for i := 0; i < len(m.Taints); i++ {
		if swag.IsZero(m.Taints[i]) { // not required
			continue
		}

		if m.Taints[i] != nil {
			if err := m.Taints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterNodepoolSpec) validateTkgAws(formats strfmt.Registry) error {
	if swag.IsZero(m.TkgAws) { // not required
		return nil
	}

	if m.TkgAws != nil {
		if err := m.TkgAws.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tkgAws")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tkgAws")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterNodepoolSpec) validateTkgAzure(formats strfmt.Registry) error {
	if swag.IsZero(m.TkgAzure) { // not required
		return nil
	}

	if m.TkgAzure != nil {
		if err := m.TkgAzure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tkgAzure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tkgAzure")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterNodepoolSpec) validateTkgServiceVsphere(formats strfmt.Registry) error {
	if swag.IsZero(m.TkgServiceVsphere) { // not required
		return nil
	}

	if m.TkgServiceVsphere != nil {
		if err := m.TkgServiceVsphere.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tkgServiceVsphere")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tkgServiceVsphere")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterNodepoolSpec) validateTkgVsphere(formats strfmt.Registry) error {
	if swag.IsZero(m.TkgVsphere) { // not required
		return nil
	}

	if m.TkgVsphere != nil {
		if err := m.TkgVsphere.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tkgVsphere")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tkgVsphere")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster nodepool spec based on the context it is used
func (m *ClusterNodepoolSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTaints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTkgAws(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTkgAzure(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTkgServiceVsphere(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTkgVsphere(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNodepoolSpec) contextValidateTaints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Taints); i++ {

		if m.Taints[i] != nil {
			if err := m.Taints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterNodepoolSpec) contextValidateTkgAws(ctx context.Context, formats strfmt.Registry) error {

	if m.TkgAws != nil {
		if err := m.TkgAws.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tkgAws")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tkgAws")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterNodepoolSpec) contextValidateTkgAzure(ctx context.Context, formats strfmt.Registry) error {

	if m.TkgAzure != nil {
		if err := m.TkgAzure.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tkgAzure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tkgAzure")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterNodepoolSpec) contextValidateTkgServiceVsphere(ctx context.Context, formats strfmt.Registry) error {

	if m.TkgServiceVsphere != nil {
		if err := m.TkgServiceVsphere.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tkgServiceVsphere")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tkgServiceVsphere")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterNodepoolSpec) contextValidateTkgVsphere(ctx context.Context, formats strfmt.Registry) error {

	if m.TkgVsphere != nil {
		if err := m.TkgVsphere.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tkgVsphere")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tkgVsphere")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterNodepoolSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterNodepoolSpec) UnmarshalBinary(b []byte) error {
	var res ClusterNodepoolSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
