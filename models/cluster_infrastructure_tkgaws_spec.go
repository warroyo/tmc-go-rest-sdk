// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterInfrastructureTkgawsSpec TKG AWS cluster spec.
//
// swagger:model cluster.infrastructure.tkgaws.Spec
type ClusterInfrastructureTkgawsSpec struct {

	// Advanced configurations for AWS cluster.
	AdvancedConfigs []*CommonClusterAdvancedConfig `json:"advancedConfigs"`

	// Kubernetes version distribution for the cluster.
	Distribution *ClusterInfrastructureTkgawsDistribution `json:"distribution,omitempty"`

	// Cluster settings for the AWS cluster.
	Settings *ClusterInfrastructureTkgawsSettings `json:"settings,omitempty"`

	// Topology configuration of the cluster.
	Topology *ClusterInfrastructureTkgawsTopology `json:"topology,omitempty"`
}

// Validate validates this cluster infrastructure tkgaws spec
func (m *ClusterInfrastructureTkgawsSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdvancedConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistribution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopology(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterInfrastructureTkgawsSpec) validateAdvancedConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.AdvancedConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.AdvancedConfigs); i++ {
		if swag.IsZero(m.AdvancedConfigs[i]) { // not required
			continue
		}

		if m.AdvancedConfigs[i] != nil {
			if err := m.AdvancedConfigs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("advancedConfigs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("advancedConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterInfrastructureTkgawsSpec) validateDistribution(formats strfmt.Registry) error {
	if swag.IsZero(m.Distribution) { // not required
		return nil
	}

	if m.Distribution != nil {
		if err := m.Distribution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("distribution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("distribution")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterInfrastructureTkgawsSpec) validateSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if m.Settings != nil {
		if err := m.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterInfrastructureTkgawsSpec) validateTopology(formats strfmt.Registry) error {
	if swag.IsZero(m.Topology) { // not required
		return nil
	}

	if m.Topology != nil {
		if err := m.Topology.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("topology")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("topology")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster infrastructure tkgaws spec based on the context it is used
func (m *ClusterInfrastructureTkgawsSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdvancedConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDistribution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTopology(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterInfrastructureTkgawsSpec) contextValidateAdvancedConfigs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AdvancedConfigs); i++ {

		if m.AdvancedConfigs[i] != nil {
			if err := m.AdvancedConfigs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("advancedConfigs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("advancedConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterInfrastructureTkgawsSpec) contextValidateDistribution(ctx context.Context, formats strfmt.Registry) error {

	if m.Distribution != nil {
		if err := m.Distribution.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("distribution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("distribution")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterInfrastructureTkgawsSpec) contextValidateSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.Settings != nil {
		if err := m.Settings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterInfrastructureTkgawsSpec) contextValidateTopology(ctx context.Context, formats strfmt.Registry) error {

	if m.Topology != nil {
		if err := m.Topology.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("topology")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("topology")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterInfrastructureTkgawsSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterInfrastructureTkgawsSpec) UnmarshalBinary(b []byte) error {
	var res ClusterInfrastructureTkgawsSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
