// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EksclusterNodepoolStatusPhase Phase of the nodepool resource.
//
//   - PHASE_UNSPECIFIED: Unspecified phase.
//   - CREATING: Resource is pending processing.
//   - READY: Resource is in ready state.
//   - ERROR: Error in processing.
//   - DELETING: Resource is being deleted.
//   - RESIZING: Resizing state.
//   - UPGRADING: An upgrade is in progress.
//   - UPGRADE_FAILED: An upgrade has failed.
//   - WAITING: The cluster is not created yet. so wait till then.
//   - UPDATING: A generic phase for nodepool update.
//
// swagger:model ekscluster.nodepool.Status.Phase
type EksclusterNodepoolStatusPhase string

func NewEksclusterNodepoolStatusPhase(value EksclusterNodepoolStatusPhase) *EksclusterNodepoolStatusPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EksclusterNodepoolStatusPhase.
func (m EksclusterNodepoolStatusPhase) Pointer() *EksclusterNodepoolStatusPhase {
	return &m
}

const (

	// EksclusterNodepoolStatusPhasePHASEUNSPECIFIED captures enum value "PHASE_UNSPECIFIED"
	EksclusterNodepoolStatusPhasePHASEUNSPECIFIED EksclusterNodepoolStatusPhase = "PHASE_UNSPECIFIED"

	// EksclusterNodepoolStatusPhaseCREATING captures enum value "CREATING"
	EksclusterNodepoolStatusPhaseCREATING EksclusterNodepoolStatusPhase = "CREATING"

	// EksclusterNodepoolStatusPhaseREADY captures enum value "READY"
	EksclusterNodepoolStatusPhaseREADY EksclusterNodepoolStatusPhase = "READY"

	// EksclusterNodepoolStatusPhaseERROR captures enum value "ERROR"
	EksclusterNodepoolStatusPhaseERROR EksclusterNodepoolStatusPhase = "ERROR"

	// EksclusterNodepoolStatusPhaseDELETING captures enum value "DELETING"
	EksclusterNodepoolStatusPhaseDELETING EksclusterNodepoolStatusPhase = "DELETING"

	// EksclusterNodepoolStatusPhaseRESIZING captures enum value "RESIZING"
	EksclusterNodepoolStatusPhaseRESIZING EksclusterNodepoolStatusPhase = "RESIZING"

	// EksclusterNodepoolStatusPhaseUPGRADING captures enum value "UPGRADING"
	EksclusterNodepoolStatusPhaseUPGRADING EksclusterNodepoolStatusPhase = "UPGRADING"

	// EksclusterNodepoolStatusPhaseUPGRADEFAILED captures enum value "UPGRADE_FAILED"
	EksclusterNodepoolStatusPhaseUPGRADEFAILED EksclusterNodepoolStatusPhase = "UPGRADE_FAILED"

	// EksclusterNodepoolStatusPhaseWAITING captures enum value "WAITING"
	EksclusterNodepoolStatusPhaseWAITING EksclusterNodepoolStatusPhase = "WAITING"

	// EksclusterNodepoolStatusPhaseUPDATING captures enum value "UPDATING"
	EksclusterNodepoolStatusPhaseUPDATING EksclusterNodepoolStatusPhase = "UPDATING"
)

// for schema
var eksclusterNodepoolStatusPhaseEnum []interface{}

func init() {
	var res []EksclusterNodepoolStatusPhase
	if err := json.Unmarshal([]byte(`["PHASE_UNSPECIFIED","CREATING","READY","ERROR","DELETING","RESIZING","UPGRADING","UPGRADE_FAILED","WAITING","UPDATING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eksclusterNodepoolStatusPhaseEnum = append(eksclusterNodepoolStatusPhaseEnum, v)
	}
}

func (m EksclusterNodepoolStatusPhase) validateEksclusterNodepoolStatusPhaseEnum(path, location string, value EksclusterNodepoolStatusPhase) error {
	if err := validate.EnumCase(path, location, value, eksclusterNodepoolStatusPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this ekscluster nodepool status phase
func (m EksclusterNodepoolStatusPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEksclusterNodepoolStatusPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this ekscluster nodepool status phase based on context it is used
func (m EksclusterNodepoolStatusPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
