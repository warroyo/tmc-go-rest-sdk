// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterNamespaceTanzupackageInstallStatus Status of Package Install.
//
// swagger:model cluster.namespace.tanzupackage.install.Status
type ClusterNamespaceTanzupackageInstallStatus struct {

	// Conditions of the Package Install resource.
	Conditions map[string]VmwareTanzuCoreV1alpha1StatusCondition `json:"conditions,omitempty"`

	// Kuberenetes RBAC resources and service account created on the cluster by TMC for Package Install.
	GeneratedResources *ClusterNamespaceTanzupackageInstallGeneratedResources `json:"generatedResources,omitempty"`

	// If true, the Package Install is managed by TMC.
	Managed bool `json:"managed,omitempty"`

	// TMC services/features referencing the package install.
	ReferredBy []string `json:"referredBy"`

	// Resolved version of the Package Install.
	ResolvedVersion string `json:"resolvedVersion,omitempty"`
}

// Validate validates this cluster namespace tanzupackage install status
func (m *ClusterNamespaceTanzupackageInstallStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeneratedResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNamespaceTanzupackageInstallStatus) validateConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for k := range m.Conditions {

		if err := validate.Required("conditions"+"."+k, "body", m.Conditions[k]); err != nil {
			return err
		}
		if val, ok := m.Conditions[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditions" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterNamespaceTanzupackageInstallStatus) validateGeneratedResources(formats strfmt.Registry) error {
	if swag.IsZero(m.GeneratedResources) { // not required
		return nil
	}

	if m.GeneratedResources != nil {
		if err := m.GeneratedResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("generatedResources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("generatedResources")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster namespace tanzupackage install status based on the context it is used
func (m *ClusterNamespaceTanzupackageInstallStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGeneratedResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNamespaceTanzupackageInstallStatus) contextValidateConditions(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Conditions {

		if val, ok := m.Conditions[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ClusterNamespaceTanzupackageInstallStatus) contextValidateGeneratedResources(ctx context.Context, formats strfmt.Registry) error {

	if m.GeneratedResources != nil {
		if err := m.GeneratedResources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("generatedResources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("generatedResources")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterNamespaceTanzupackageInstallStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterNamespaceTanzupackageInstallStatus) UnmarshalBinary(b []byte) error {
	var res ClusterNamespaceTanzupackageInstallStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
