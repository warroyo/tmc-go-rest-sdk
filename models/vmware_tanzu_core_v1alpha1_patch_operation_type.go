// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VmwareTanzuCoreV1alpha1PatchOperationType Type of the Patch operation.
//
//   - type_unspecified: Unspecified operation type.
//   - add: Add a field.
//   - remove: Remove a field.
//   - replace: Replace a field.
//   - test: Test a field.
//   - copy: Copy a field.
//   - move: Move a field.
//
// swagger:model vmware.tanzu.core.v1alpha1.patch.Operation.Type
type VmwareTanzuCoreV1alpha1PatchOperationType string

func NewVmwareTanzuCoreV1alpha1PatchOperationType(value VmwareTanzuCoreV1alpha1PatchOperationType) *VmwareTanzuCoreV1alpha1PatchOperationType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VmwareTanzuCoreV1alpha1PatchOperationType.
func (m VmwareTanzuCoreV1alpha1PatchOperationType) Pointer() *VmwareTanzuCoreV1alpha1PatchOperationType {
	return &m
}

const (

	// VmwareTanzuCoreV1alpha1PatchOperationTypeTypeUnspecified captures enum value "type_unspecified"
	VmwareTanzuCoreV1alpha1PatchOperationTypeTypeUnspecified VmwareTanzuCoreV1alpha1PatchOperationType = "type_unspecified"

	// VmwareTanzuCoreV1alpha1PatchOperationTypeAdd captures enum value "add"
	VmwareTanzuCoreV1alpha1PatchOperationTypeAdd VmwareTanzuCoreV1alpha1PatchOperationType = "add"

	// VmwareTanzuCoreV1alpha1PatchOperationTypeRemove captures enum value "remove"
	VmwareTanzuCoreV1alpha1PatchOperationTypeRemove VmwareTanzuCoreV1alpha1PatchOperationType = "remove"

	// VmwareTanzuCoreV1alpha1PatchOperationTypeReplace captures enum value "replace"
	VmwareTanzuCoreV1alpha1PatchOperationTypeReplace VmwareTanzuCoreV1alpha1PatchOperationType = "replace"

	// VmwareTanzuCoreV1alpha1PatchOperationTypeTest captures enum value "test"
	VmwareTanzuCoreV1alpha1PatchOperationTypeTest VmwareTanzuCoreV1alpha1PatchOperationType = "test"

	// VmwareTanzuCoreV1alpha1PatchOperationTypeCopy captures enum value "copy"
	VmwareTanzuCoreV1alpha1PatchOperationTypeCopy VmwareTanzuCoreV1alpha1PatchOperationType = "copy"

	// VmwareTanzuCoreV1alpha1PatchOperationTypeMove captures enum value "move"
	VmwareTanzuCoreV1alpha1PatchOperationTypeMove VmwareTanzuCoreV1alpha1PatchOperationType = "move"
)

// for schema
var vmwareTanzuCoreV1alpha1PatchOperationTypeEnum []interface{}

func init() {
	var res []VmwareTanzuCoreV1alpha1PatchOperationType
	if err := json.Unmarshal([]byte(`["type_unspecified","add","remove","replace","test","copy","move"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmwareTanzuCoreV1alpha1PatchOperationTypeEnum = append(vmwareTanzuCoreV1alpha1PatchOperationTypeEnum, v)
	}
}

func (m VmwareTanzuCoreV1alpha1PatchOperationType) validateVmwareTanzuCoreV1alpha1PatchOperationTypeEnum(path, location string, value VmwareTanzuCoreV1alpha1PatchOperationType) error {
	if err := validate.EnumCase(path, location, value, vmwareTanzuCoreV1alpha1PatchOperationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this vmware tanzu core v1alpha1 patch operation type
func (m VmwareTanzuCoreV1alpha1PatchOperationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVmwareTanzuCoreV1alpha1PatchOperationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this vmware tanzu core v1alpha1 patch operation type based on context it is used
func (m VmwareTanzuCoreV1alpha1PatchOperationType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
