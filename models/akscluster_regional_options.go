// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AksclusterRegionalOptions Azure AKS specific regional options.
//
// swagger:model akscluster.RegionalOptions
type AksclusterRegionalOptions struct {

	// List of availability zones that have vms
	AvailabilityZones []string `json:"availabilityZones"`

	// Disk encryption set options
	DiskEncryptionSetOptions []*AksclusterDiskEncryptionSetOptions `json:"diskEncryptionSetOptions"`

	// Display name of the Azure region.
	RegionDisplayName string `json:"regionDisplayName,omitempty"`

	// Name of the Azure region.
	RegionName string `json:"regionName,omitempty"`

	// List of supported Kubernetes versions.
	VersionList []*AksclusterVersion `json:"versionList"`

	// List of supported vm specs.
	VirtualMachineSpecs []*AksclusterVirtualMachineSpec `json:"virtualMachineSpecs"`

	// Virtual network options.
	VirtualNetworkOptions []*AksclusterVirtualNetworkOptions `json:"virtualNetworkOptions"`

	// List names of supported vm sizes.
	VMSizes []string `json:"vmSizes"`
}

// Validate validates this akscluster regional options
func (m *AksclusterRegionalOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskEncryptionSetOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualMachineSpecs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualNetworkOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AksclusterRegionalOptions) validateDiskEncryptionSetOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskEncryptionSetOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.DiskEncryptionSetOptions); i++ {
		if swag.IsZero(m.DiskEncryptionSetOptions[i]) { // not required
			continue
		}

		if m.DiskEncryptionSetOptions[i] != nil {
			if err := m.DiskEncryptionSetOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diskEncryptionSetOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("diskEncryptionSetOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AksclusterRegionalOptions) validateVersionList(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionList) { // not required
		return nil
	}

	for i := 0; i < len(m.VersionList); i++ {
		if swag.IsZero(m.VersionList[i]) { // not required
			continue
		}

		if m.VersionList[i] != nil {
			if err := m.VersionList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versionList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("versionList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AksclusterRegionalOptions) validateVirtualMachineSpecs(formats strfmt.Registry) error {
	if swag.IsZero(m.VirtualMachineSpecs) { // not required
		return nil
	}

	for i := 0; i < len(m.VirtualMachineSpecs); i++ {
		if swag.IsZero(m.VirtualMachineSpecs[i]) { // not required
			continue
		}

		if m.VirtualMachineSpecs[i] != nil {
			if err := m.VirtualMachineSpecs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtualMachineSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtualMachineSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AksclusterRegionalOptions) validateVirtualNetworkOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.VirtualNetworkOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.VirtualNetworkOptions); i++ {
		if swag.IsZero(m.VirtualNetworkOptions[i]) { // not required
			continue
		}

		if m.VirtualNetworkOptions[i] != nil {
			if err := m.VirtualNetworkOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtualNetworkOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtualNetworkOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this akscluster regional options based on the context it is used
func (m *AksclusterRegionalOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiskEncryptionSetOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVirtualMachineSpecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVirtualNetworkOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AksclusterRegionalOptions) contextValidateDiskEncryptionSetOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DiskEncryptionSetOptions); i++ {

		if m.DiskEncryptionSetOptions[i] != nil {
			if err := m.DiskEncryptionSetOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diskEncryptionSetOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("diskEncryptionSetOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AksclusterRegionalOptions) contextValidateVersionList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VersionList); i++ {

		if m.VersionList[i] != nil {
			if err := m.VersionList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versionList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("versionList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AksclusterRegionalOptions) contextValidateVirtualMachineSpecs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VirtualMachineSpecs); i++ {

		if m.VirtualMachineSpecs[i] != nil {
			if err := m.VirtualMachineSpecs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtualMachineSpecs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtualMachineSpecs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AksclusterRegionalOptions) contextValidateVirtualNetworkOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VirtualNetworkOptions); i++ {

		if m.VirtualNetworkOptions[i] != nil {
			if err := m.VirtualNetworkOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("virtualNetworkOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("virtualNetworkOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AksclusterRegionalOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AksclusterRegionalOptions) UnmarshalBinary(b []byte) error {
	var res AksclusterRegionalOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
