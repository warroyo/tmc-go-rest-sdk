// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PolicyEffectiveSpec Spec of the effective policy.
//
// swagger:model policy.effective.Spec
type PolicyEffectiveSpec struct {

	// Boolean flag that specifies whether the policy was inherited from a parent.
	Inherited bool `json:"inherited,omitempty"`

	// The source policy spec.
	PolicySpec *CommonPolicySpec `json:"policySpec,omitempty"`

	// The reference to the source policy object.
	SourcePolicy *VmwareTanzuCoreV1alpha1ObjectReference `json:"sourcePolicy,omitempty"`

	// The reference to the target object on which the policy is effectively applied.
	TargetResource *VmwareTanzuCoreV1alpha1ObjectReference `json:"targetResource,omitempty"`
}

// Validate validates this policy effective spec
func (m *PolicyEffectiveSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePolicySpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourcePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetResource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyEffectiveSpec) validatePolicySpec(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicySpec) { // not required
		return nil
	}

	if m.PolicySpec != nil {
		if err := m.PolicySpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policySpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policySpec")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyEffectiveSpec) validateSourcePolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.SourcePolicy) { // not required
		return nil
	}

	if m.SourcePolicy != nil {
		if err := m.SourcePolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourcePolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourcePolicy")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyEffectiveSpec) validateTargetResource(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetResource) { // not required
		return nil
	}

	if m.TargetResource != nil {
		if err := m.TargetResource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetResource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetResource")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this policy effective spec based on the context it is used
func (m *PolicyEffectiveSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePolicySpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourcePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyEffectiveSpec) contextValidatePolicySpec(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicySpec != nil {
		if err := m.PolicySpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policySpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policySpec")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyEffectiveSpec) contextValidateSourcePolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.SourcePolicy != nil {
		if err := m.SourcePolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourcePolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourcePolicy")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyEffectiveSpec) contextValidateTargetResource(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetResource != nil {
		if err := m.TargetResource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetResource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetResource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyEffectiveSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyEffectiveSpec) UnmarshalBinary(b []byte) error {
	var res PolicyEffectiveSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
