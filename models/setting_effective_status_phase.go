// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SettingEffectiveStatusPhase Phase of an effective setting.
//
//   - PHASE_UNSPECIFIED: UNSPECIFIED phase.
//
// This is the default state when the effective setting is first created.
// This will always be the state for non-leaf resources in the hierarchy of the setting type.
//   - PENDING: PENDING phase is set by spoke service or extension when they start processing the setting.
//   - APPLIED: Applied phase is set by spoke service or extension when the setting is successfully applied.
//   - ERROR: Error phase is set by spoke service or extension when the setting could not be applied due to some issue.
//
// Details will be provided in the status message.
//
// swagger:model setting.effective.Status.Phase
type SettingEffectiveStatusPhase string

func NewSettingEffectiveStatusPhase(value SettingEffectiveStatusPhase) *SettingEffectiveStatusPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SettingEffectiveStatusPhase.
func (m SettingEffectiveStatusPhase) Pointer() *SettingEffectiveStatusPhase {
	return &m
}

const (

	// SettingEffectiveStatusPhasePHASEUNSPECIFIED captures enum value "PHASE_UNSPECIFIED"
	SettingEffectiveStatusPhasePHASEUNSPECIFIED SettingEffectiveStatusPhase = "PHASE_UNSPECIFIED"

	// SettingEffectiveStatusPhasePENDING captures enum value "PENDING"
	SettingEffectiveStatusPhasePENDING SettingEffectiveStatusPhase = "PENDING"

	// SettingEffectiveStatusPhaseAPPLIED captures enum value "APPLIED"
	SettingEffectiveStatusPhaseAPPLIED SettingEffectiveStatusPhase = "APPLIED"

	// SettingEffectiveStatusPhaseERROR captures enum value "ERROR"
	SettingEffectiveStatusPhaseERROR SettingEffectiveStatusPhase = "ERROR"
)

// for schema
var settingEffectiveStatusPhaseEnum []interface{}

func init() {
	var res []SettingEffectiveStatusPhase
	if err := json.Unmarshal([]byte(`["PHASE_UNSPECIFIED","PENDING","APPLIED","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settingEffectiveStatusPhaseEnum = append(settingEffectiveStatusPhaseEnum, v)
	}
}

func (m SettingEffectiveStatusPhase) validateSettingEffectiveStatusPhaseEnum(path, location string, value SettingEffectiveStatusPhase) error {
	if err := validate.EnumCase(path, location, value, settingEffectiveStatusPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this setting effective status phase
func (m SettingEffectiveStatusPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSettingEffectiveStatusPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this setting effective status phase based on context it is used
func (m SettingEffectiveStatusPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
