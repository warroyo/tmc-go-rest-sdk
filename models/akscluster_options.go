// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AksclusterOptions Options available for cluster/nodepool operations.
//
// swagger:model akscluster.Options
type AksclusterOptions struct {

	// The information about of our access to the AKS account.
	AccessStatus *AksclusterAccountAccessStatus `json:"accessStatus,omitempty"`

	// Log workspace options.
	LogWorkspaceOptions []*AksclusterLogWorkspaceOptions `json:"logWorkspaceOptions"`

	// Regional options.
	RegionalOptions []*AksclusterRegionalOptions `json:"regionalOptions"`

	// Resurce groups options.
	ResourceGroupOptions []*AksclusterResourceGroupOptions `json:"resourceGroupOptions"`

	// VM sizes options.
	VMSizeOptions []*AksclusterVMSizeOptions `json:"vmSizeOptions"`
}

// Validate validates this akscluster options
func (m *AksclusterOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogWorkspaceOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegionalOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceGroupOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMSizeOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AksclusterOptions) validateAccessStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessStatus) { // not required
		return nil
	}

	if m.AccessStatus != nil {
		if err := m.AccessStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessStatus")
			}
			return err
		}
	}

	return nil
}

func (m *AksclusterOptions) validateLogWorkspaceOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.LogWorkspaceOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.LogWorkspaceOptions); i++ {
		if swag.IsZero(m.LogWorkspaceOptions[i]) { // not required
			continue
		}

		if m.LogWorkspaceOptions[i] != nil {
			if err := m.LogWorkspaceOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("logWorkspaceOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("logWorkspaceOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AksclusterOptions) validateRegionalOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.RegionalOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.RegionalOptions); i++ {
		if swag.IsZero(m.RegionalOptions[i]) { // not required
			continue
		}

		if m.RegionalOptions[i] != nil {
			if err := m.RegionalOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regionalOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("regionalOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AksclusterOptions) validateResourceGroupOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceGroupOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.ResourceGroupOptions); i++ {
		if swag.IsZero(m.ResourceGroupOptions[i]) { // not required
			continue
		}

		if m.ResourceGroupOptions[i] != nil {
			if err := m.ResourceGroupOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourceGroupOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resourceGroupOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AksclusterOptions) validateVMSizeOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.VMSizeOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.VMSizeOptions); i++ {
		if swag.IsZero(m.VMSizeOptions[i]) { // not required
			continue
		}

		if m.VMSizeOptions[i] != nil {
			if err := m.VMSizeOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vmSizeOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vmSizeOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this akscluster options based on the context it is used
func (m *AksclusterOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogWorkspaceOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegionalOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceGroupOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMSizeOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AksclusterOptions) contextValidateAccessStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.AccessStatus != nil {
		if err := m.AccessStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessStatus")
			}
			return err
		}
	}

	return nil
}

func (m *AksclusterOptions) contextValidateLogWorkspaceOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LogWorkspaceOptions); i++ {

		if m.LogWorkspaceOptions[i] != nil {
			if err := m.LogWorkspaceOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("logWorkspaceOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("logWorkspaceOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AksclusterOptions) contextValidateRegionalOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RegionalOptions); i++ {

		if m.RegionalOptions[i] != nil {
			if err := m.RegionalOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regionalOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("regionalOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AksclusterOptions) contextValidateResourceGroupOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResourceGroupOptions); i++ {

		if m.ResourceGroupOptions[i] != nil {
			if err := m.ResourceGroupOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourceGroupOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resourceGroupOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AksclusterOptions) contextValidateVMSizeOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VMSizeOptions); i++ {

		if m.VMSizeOptions[i] != nil {
			if err := m.VMSizeOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vmSizeOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vmSizeOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AksclusterOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AksclusterOptions) UnmarshalBinary(b []byte) error {
	var res AksclusterOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
