// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterNamespaceSecretSecretType SecretType definition - indicates the kubernetes secret type.
//
//   - SECRET_TYPE_UNSPECIFIED: SECRET_TYPE_UNSPECIFIED, Unspecified secret type (default).
//   - SECRET_TYPE_DOCKERCONFIGJSON: SECRET_TYPE_DOCKERCONFIGJSON, Kubernetes secrets type : kubernetes.io/dockerconfigjson.
//
// swagger:model cluster.namespace.secret.SecretType
type ClusterNamespaceSecretSecretType string

func NewClusterNamespaceSecretSecretType(value ClusterNamespaceSecretSecretType) *ClusterNamespaceSecretSecretType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClusterNamespaceSecretSecretType.
func (m ClusterNamespaceSecretSecretType) Pointer() *ClusterNamespaceSecretSecretType {
	return &m
}

const (

	// ClusterNamespaceSecretSecretTypeSECRETTYPEUNSPECIFIED captures enum value "SECRET_TYPE_UNSPECIFIED"
	ClusterNamespaceSecretSecretTypeSECRETTYPEUNSPECIFIED ClusterNamespaceSecretSecretType = "SECRET_TYPE_UNSPECIFIED"

	// ClusterNamespaceSecretSecretTypeSECRETTYPEDOCKERCONFIGJSON captures enum value "SECRET_TYPE_DOCKERCONFIGJSON"
	ClusterNamespaceSecretSecretTypeSECRETTYPEDOCKERCONFIGJSON ClusterNamespaceSecretSecretType = "SECRET_TYPE_DOCKERCONFIGJSON"
)

// for schema
var clusterNamespaceSecretSecretTypeEnum []interface{}

func init() {
	var res []ClusterNamespaceSecretSecretType
	if err := json.Unmarshal([]byte(`["SECRET_TYPE_UNSPECIFIED","SECRET_TYPE_DOCKERCONFIGJSON"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterNamespaceSecretSecretTypeEnum = append(clusterNamespaceSecretSecretTypeEnum, v)
	}
}

func (m ClusterNamespaceSecretSecretType) validateClusterNamespaceSecretSecretTypeEnum(path, location string, value ClusterNamespaceSecretSecretType) error {
	if err := validate.EnumCase(path, location, value, clusterNamespaceSecretSecretTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster namespace secret secret type
func (m ClusterNamespaceSecretSecretType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterNamespaceSecretSecretTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cluster namespace secret secret type based on context it is used
func (m ClusterNamespaceSecretSecretType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
