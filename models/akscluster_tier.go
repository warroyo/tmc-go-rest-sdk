// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AksclusterTier Tier options of cluster SKU.
//
//   - TIER_UNSPECIFIED: Unspecified tier.
//   - FREE: No guaranteed SLA, no additional charges. Free tier clusters have an SLO of 99.5%.
//   - PAID: Guarantees 99.95% availability of the Kubernetes API server endpoint for clusters that use
//
// Availability Zones and 99.9% of availability for clusters that don't use Availability Zones.
// Deprecated in favor of STANDARD to match Azure API changes.
//   - STANDARD: Guarantees 99.95% availability of the Kubernetes API server endpoint for clusters that use
//
// Availability Zones and 99.9% of availability for clusters that don't use Availability Zones.
//
// swagger:model akscluster.Tier
type AksclusterTier string

func NewAksclusterTier(value AksclusterTier) *AksclusterTier {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AksclusterTier.
func (m AksclusterTier) Pointer() *AksclusterTier {
	return &m
}

const (

	// AksclusterTierTIERUNSPECIFIED captures enum value "TIER_UNSPECIFIED"
	AksclusterTierTIERUNSPECIFIED AksclusterTier = "TIER_UNSPECIFIED"

	// AksclusterTierFREE captures enum value "FREE"
	AksclusterTierFREE AksclusterTier = "FREE"

	// AksclusterTierPAID captures enum value "PAID"
	AksclusterTierPAID AksclusterTier = "PAID"

	// AksclusterTierSTANDARD captures enum value "STANDARD"
	AksclusterTierSTANDARD AksclusterTier = "STANDARD"
)

// for schema
var aksclusterTierEnum []interface{}

func init() {
	var res []AksclusterTier
	if err := json.Unmarshal([]byte(`["TIER_UNSPECIFIED","FREE","PAID","STANDARD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		aksclusterTierEnum = append(aksclusterTierEnum, v)
	}
}

func (m AksclusterTier) validateAksclusterTierEnum(path, location string, value AksclusterTier) error {
	if err := validate.EnumCase(path, location, value, aksclusterTierEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this akscluster tier
func (m AksclusterTier) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAksclusterTierEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this akscluster tier based on context it is used
func (m AksclusterTier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
